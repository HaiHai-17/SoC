
vd1.elf:     file format elf32-littlenios2
vd1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000033c4 memsz 0x000033c4 flags r-x
    LOAD off    0x000043e4 vaddr 0x0000b3e4 paddr 0x0000b7cc align 2**12
         filesz 0x000003e8 memsz 0x000003e8 flags rw-
    LOAD off    0x00004bb4 vaddr 0x0000bbb4 paddr 0x0000bbb4 align 2**12
         filesz 0x00000000 memsz 0x000001a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000031e0  000081b4  000081b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  0000b394  0000b394  00004394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000003e8  0000b3e4  0000b7cc  000043e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a0  0000bbb4  0000bbb4  00004bb4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000047cc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005b8  00000000  00000000  000047f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000008e2  00000000  00000000  00004db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000abd1  00000000  00000000  00005692  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000284f  00000000  00000000  00010263  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006fb7  00000000  00000000  00012ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000af0  00000000  00000000  00019a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000de9  00000000  00000000  0001a55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001af3  00000000  00000000  0001b345  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001ce38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  0001ce48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ed16  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001ed19  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001ed25  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001ed26  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001ed27  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001ed32  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001ed3d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0001ed48  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000e  00000000  00000000  0001ed4e  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003a654  00000000  00000000  0001ed5c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b4 l    d  .text	00000000 .text
0000b394 l    d  .rodata	00000000 .rodata
0000b3e4 l    d  .rwdata	00000000 .rwdata
0000bbb4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000081ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000083ac l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000b404 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008c40 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00009110 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000930c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b4e4 l     O .rwdata	000000a4 dma_0_priv
0000b588 l     O .rwdata	0000001c dma_0_tx
0000b5a4 l     O .rwdata	0000001c dma_0_rx
0000b5c0 l     O .rwdata	0000002c jtag_uart_0
000093f8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
00009550 l     F .text	000000a8 alt_avalon_dma_launch_txonly
000095f8 l     F .text	000000a8 alt_avalon_dma_launch_rxonly
000096a0 l     F .text	000003a4 alt_avalon_dma_ioctl
00009df4 l     F .text	000001c8 alt_avalon_dma_irq
0000a06c l     F .text	00000038 alt_dma_txchan_reg
0000a0a4 l     F .text	00000038 alt_dma_rxchan_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a434 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000a4b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000a590 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
0000a648 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
0000a700 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a8d8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000aa28 l     F .text	000000f8 alt_file_locked
0000acac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000b170 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000b330 l     F .text	00000040 alt_sim_halt
0000917c g     F .text	0000006c alt_main
0000bbc8 g     O .bss	00000100 alt_irq
0000b7cc g       *ABS*	00000000 __flash_rwdata_start
00008314 g     F .text	00000054 printf
00009fbc g     F .text	000000b0 alt_avalon_dma_init
0000b3e4 g     O .rwdata	00000020 pdata0
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000bbb4 g     O .bss	00000004 errno
0000bbc0 g     O .bss	00000004 alt_argv
00013794 g       *ABS*	00000000 _gp
00008270 g     F .text	00000070 DMA_Init
0000a6a8 g     F .text	00000058 alt_dma_txchan_open
0000b614 g     O .rwdata	00000180 alt_fd_list
0000a828 g     F .text	00000094 alt_find_dev
0000a9b0 g     F .text	00000078 alt_io_redirect
0000b394 g       *ABS*	00000000 __DTOR_END__
0000a18c g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008368 g     F .text	00000044 _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008d7c g     F .text	00000008 __udivsi3
0000b7b4 g     O .rwdata	00000004 alt_max_fd
00009430 g     F .text	00000120 alt_avalon_dma_launch_bidir
0000a5f0 g     F .text	00000058 alt_dma_rxchan_open
0000b79c g     O .rwdata	00000004 _global_impure_ptr
0000bd54 g       *ABS*	00000000 __bss_end
00008f98 g     F .text	000000f8 alt_iic_isr_register
00008f50 g     F .text	00000048 alt_ic_irq_enabled
0000bbb8 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000c8 alt_irq_handler
0000b5ec g     O .rwdata	00000028 alt_dev_null
0000a494 g     F .text	0000001c alt_dcache_flush_all
0000b7cc g       *ABS*	00000000 __ram_rwdata_end
0000b7ac g     O .rwdata	00000008 alt_dev_list
00009c20 g     F .text	00000080 alt_avalon_dma_space
000091e8 g     F .text	00000124 write
0000b3e4 g       *ABS*	00000000 __ram_rodata_end
00008d84 g     F .text	00000008 __umodsi3
0000bd54 g       *ABS*	00000000 end
0000b390 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000a290 g     F .text	000000a4 altera_avalon_jtag_uart_write
0000842c g     F .text	0000069c ___vfprintf_internal_r
00009ca0 g     F .text	00000154 alt_avalon_dma_send
0000b174 g     F .text	000001bc __call_exitprocs
0000b7c0 g     O .rwdata	00000008 alt_dma_txchan_list
000081b4 g     F .text	0000003c _start
000093a0 g     F .text	00000058 alt_sys_init
0000b004 g     F .text	0000016c __register_exitproc
00008d8c g     F .text	00000038 __mulsi3
0000b3e4 g       *ABS*	00000000 __ram_rwdata_start
000081f0 g     F .text	00000080 DMA_ISR_Handler
0000b394 g       *ABS*	00000000 __ram_rodata_start
00011080 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0000a0dc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000aec4 g     F .text	000000d0 alt_get_fd
0000afc8 g     F .text	0000003c memcmp
0000bd54 g       *ABS*	00000000 __alt_stack_base
0000ada4 g     F .text	00000120 alt_find_file
0000a4dc g     F .text	000000b4 alt_dev_llist_insert
00008aec g     F .text	000000bc __sfvwrite_small_dev
0000bbb4 g       *ABS*	00000000 __bss_start
000082e0 g     F .text	00000034 main
00009a88 g     F .text	00000044 alt_avalon_dma_rx_ioctl
0000bbc4 g     O .bss	00000004 alt_envp
0000a134 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000b794 g     O .rwdata	00000004 pdata1
0000bcc8 g     O .bss	0000008c _atexit0
0000b7c8 g     O .rwdata	00000004 alt_errno
00008cbc g     F .text	00000060 __divsi3
0000b394 g       *ABS*	00000000 __CTOR_END__
0000b394 g       *ABS*	00000000 __flash_rodata_start
0000b394 g       *ABS*	00000000 __DTOR_LIST__
0000936c g     F .text	00000034 alt_irq_init
0000ad0c g     F .text	00000078 alt_release_fd
0000af94 g     F .text	00000014 atexit
00008bc8 g     F .text	00000078 _write_r
0000b798 g     O .rwdata	00000004 _impure_ptr
0000bbbc g     O .bss	00000004 alt_argc
0000a7c4 g     F .text	00000064 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000b7a4 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008dc4 g     F .text	00000050 alt_ic_isr_register
0000b7cc g       *ABS*	00000000 _edata
0000bd54 g       *ABS*	00000000 _end
000081b4 g       *ABS*	00000000 __ram_exceptions_end
00008eb0 g     F .text	000000a0 alt_ic_irq_disable
0000ad84 g     F .text	00000020 altera_nios2_qsys_irq_init
0000afa8 g     F .text	00000020 exit
00008d1c g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000b370 g     F .text	00000020 _exit
00008ba8 g     F .text	00000020 strlen
0000ab20 g     F .text	0000018c open
0000a8bc g     F .text	0000001c alt_icache_flush_all
0000b7a0 g     O .rwdata	00000004 alt_priority_mask
00008e14 g     F .text	0000009c alt_ic_irq_enable
00008ac8 g     F .text	00000024 __vfprintf_internal
00009acc g     F .text	00000154 alt_avalon_dma_prepare
0000b7b8 g     O .rwdata	00000008 alt_dma_rxchan_list
0000a760 g     F .text	00000064 _do_ctors
0000a334 g     F .text	00000100 close
00009090 g     F .text	00000080 alt_load
00009a44 g     F .text	00000044 alt_avalon_dma_tx_ioctl
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606d14 	ori	at,at,33204
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    80fc:	0005313a 	rdctl	r2,ipending
    8100:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    8108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    810c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8110:	00800044 	movi	r2,1
    8114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8118:	e0ffff17 	ldw	r3,-4(fp)
    811c:	e0bffe17 	ldw	r2,-8(fp)
    8120:	1884703a 	and	r2,r3,r2
    8124:	1005003a 	cmpeq	r2,r2,zero
    8128:	1000161e 	bne	r2,zero,8184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	e0bffd17 	ldw	r2,-12(fp)
    8130:	00c00074 	movhi	r3,1
    8134:	18eef204 	addi	r3,r3,-17464
    8138:	100490fa 	slli	r2,r2,3
    813c:	10c5883a 	add	r2,r2,r3
    8140:	11400017 	ldw	r5,0(r2)
    8144:	e0bffd17 	ldw	r2,-12(fp)
    8148:	00c00074 	movhi	r3,1
    814c:	18eef204 	addi	r3,r3,-17464
    8150:	100490fa 	slli	r2,r2,3
    8154:	10c5883a 	add	r2,r2,r3
    8158:	10800104 	addi	r2,r2,4
    815c:	11000017 	ldw	r4,0(r2)
    8160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8164:	0005313a 	rdctl	r2,ipending
    8168:	e0bffb15 	stw	r2,-20(fp)

  return active;
    816c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    8174:	e0bfff17 	ldw	r2,-4(fp)
    8178:	1004c03a 	cmpne	r2,r2,zero
    817c:	103fe31e 	bne	r2,zero,810c <alt_irq_handler+0x20>
    8180:	00000706 	br	81a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8184:	e0bffe17 	ldw	r2,-8(fp)
    8188:	1085883a 	add	r2,r2,r2
    818c:	e0bffe15 	stw	r2,-8(fp)
      i++;
    8190:	e0bffd17 	ldw	r2,-12(fp)
    8194:	10800044 	addi	r2,r2,1
    8198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    819c:	003fde06 	br	8118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a0:	e037883a 	mov	sp,fp
    81a4:	dfc00117 	ldw	ra,4(sp)
    81a8:	df000017 	ldw	fp,0(sp)
    81ac:	dec00204 	addi	sp,sp,8
    81b0:	f800283a 	ret

Disassembly of section .text:

000081b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    81bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c0:	d68de514 	ori	gp,gp,14228
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81c8:	10aeed14 	ori	r2,r2,48052

    movhi r3, %hi(__bss_end)
    81cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d0:	18ef5514 	ori	r3,r3,48468

    beq r2, r3, 1f
    81d4:	10c00326 	beq	r2,r3,81e4 <_start+0x30>

0:
    stw zero, (r2)
    81d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e0:	10fffd36 	bltu	r2,r3,81d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e4:	00090900 	call	9090 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81e8:	000917c0 	call	917c <alt_main>

000081ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81ec:	003fff06 	br	81ec <alt_after_alt_main>

000081f0 <DMA_ISR_Handler>:
		19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};


char *pdata1 = (char*)(ONCHIP_MEMORY2_1_BASE);

void DMA_ISR_Handler(void* isr_context){
    81f0:	defffc04 	addi	sp,sp,-16
    81f4:	dfc00315 	stw	ra,12(sp)
    81f8:	df000215 	stw	fp,8(sp)
    81fc:	df000204 	addi	fp,sp,8
    8200:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=0; i<32; i++){
    8204:	e03ffe15 	stw	zero,-8(fp)
    8208:	00000e06 	br	8244 <DMA_ISR_Handler+0x54>
		printf("byte %d = %d\n", i, pdata1[i]);
    820c:	d0e00017 	ldw	r3,-32768(gp)
    8210:	e0bffe17 	ldw	r2,-8(fp)
    8214:	1885883a 	add	r2,r3,r2
    8218:	10800003 	ldbu	r2,0(r2)
    821c:	11803fcc 	andi	r6,r2,255
    8220:	3180201c 	xori	r6,r6,128
    8224:	31bfe004 	addi	r6,r6,-128
    8228:	01000074 	movhi	r4,1
    822c:	212ce504 	addi	r4,r4,-19564
    8230:	e17ffe17 	ldw	r5,-8(fp)
    8234:	00083140 	call	8314 <printf>

char *pdata1 = (char*)(ONCHIP_MEMORY2_1_BASE);

void DMA_ISR_Handler(void* isr_context){
	int i;
	for(i=0; i<32; i++){
    8238:	e0bffe17 	ldw	r2,-8(fp)
    823c:	10800044 	addi	r2,r2,1
    8240:	e0bffe15 	stw	r2,-8(fp)
    8244:	e0bffe17 	ldw	r2,-8(fp)
    8248:	10800810 	cmplti	r2,r2,32
    824c:	103fef1e 	bne	r2,zero,820c <DMA_ISR_Handler+0x1c>
		printf("byte %d = %d\n", i, pdata1[i]);
	}
	IOWR_ALTERA_AVALON_DMA_STATUS(DMA_0_BASE, 0);
    8250:	00800074 	movhi	r2,1
    8254:	10844804 	addi	r2,r2,4384
    8258:	10000035 	stwio	zero,0(r2)
}
    825c:	e037883a 	mov	sp,fp
    8260:	dfc00117 	ldw	ra,4(sp)
    8264:	df000017 	ldw	fp,0(sp)
    8268:	dec00204 	addi	sp,sp,8
    826c:	f800283a 	ret

00008270 <DMA_Init>:

void DMA_Init(void) {
    8270:	deffff04 	addi	sp,sp,-4
    8274:	df000015 	stw	fp,0(sp)
    8278:	d839883a 	mov	fp,sp

    // De-init DMA
    IOWR_ALTERA_AVALON_DMA_CONTROL(DMA_0_BASE, 0);
    827c:	00800074 	movhi	r2,1
    8280:	10844e04 	addi	r2,r2,4408
    8284:	10000035 	stwio	zero,0(r2)

    // Source address is pdata
    IOWR_ALTERA_AVALON_DMA_RADDRESS(DMA_0_BASE, (int)pdata0);
    8288:	00c00074 	movhi	r3,1
    828c:	18ecf904 	addi	r3,r3,-19484
    8290:	00800074 	movhi	r2,1
    8294:	10844904 	addi	r2,r2,4388
    8298:	10c00035 	stwio	r3,0(r2)

    // Destination address is pdatal
    IOWR_ALTERA_AVALON_DMA_WADDRESS(DMA_0_BASE, (int)pdata1);
    829c:	d0a00017 	ldw	r2,-32768(gp)
    82a0:	1007883a 	mov	r3,r2
    82a4:	00800074 	movhi	r2,1
    82a8:	10844a04 	addi	r2,r2,4392
    82ac:	10c00035 	stwio	r3,0(r2)

    // Length is 32 bytes
    IOWR_ALTERA_AVALON_DMA_LENGTH(DMA_0_BASE, 32);
    82b0:	00c00074 	movhi	r3,1
    82b4:	18c44b04 	addi	r3,r3,4396
    82b8:	00800804 	movi	r2,32
    82bc:	18800035 	stwio	r2,0(r3)

    // Configure and Start DMA
    IOWR_ALTERA_AVALON_DMA_CONTROL(DMA_0_BASE,
    82c0:	00c00074 	movhi	r3,1
    82c4:	18c44e04 	addi	r3,r3,4408
    82c8:	00802644 	movi	r2,153
    82cc:	18800035 	stwio	r2,0(r3)
                                   ALTERA_AVALON_DMA_CONTROL_BYTE_MSK |
                                   ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
                                   ALTERA_AVALON_DMA_CONTROL_I_EN_MSK |
                                   ALTERA_AVALON_DMA_CONTROL_GO_MSK);
}
    82d0:	e037883a 	mov	sp,fp
    82d4:	df000017 	ldw	fp,0(sp)
    82d8:	dec00104 	addi	sp,sp,4
    82dc:	f800283a 	ret

000082e0 <main>:

int main(void){
    82e0:	defffd04 	addi	sp,sp,-12
    82e4:	dfc00215 	stw	ra,8(sp)
    82e8:	df000115 	stw	fp,4(sp)
    82ec:	df000104 	addi	fp,sp,4
	DMA_Init();
    82f0:	00082700 	call	8270 <DMA_Init>
	alt_ic_isr_register(0, DMA_0_IRQ, DMA_ISR_Handler, (void*)0, (void*)0);
    82f4:	d8000015 	stw	zero,0(sp)
    82f8:	0009883a 	mov	r4,zero
    82fc:	01400044 	movi	r5,1
    8300:	01800074 	movhi	r6,1
    8304:	31a07c04 	addi	r6,r6,-32272
    8308:	000f883a 	mov	r7,zero
    830c:	0008dc40 	call	8dc4 <alt_ic_isr_register>
	while(1);
    8310:	003fff06 	br	8310 <main+0x30>

00008314 <printf>:
    8314:	defffb04 	addi	sp,sp,-20
    8318:	dfc00115 	stw	ra,4(sp)
    831c:	d9400215 	stw	r5,8(sp)
    8320:	d9800315 	stw	r6,12(sp)
    8324:	d9c00415 	stw	r7,16(sp)
    8328:	00800074 	movhi	r2,1
    832c:	10ade604 	addi	r2,r2,-18536
    8330:	11400017 	ldw	r5,0(r2)
    8334:	d8800204 	addi	r2,sp,8
    8338:	d8800015 	stw	r2,0(sp)
    833c:	29c00217 	ldw	r7,8(r5)
    8340:	100d883a 	mov	r6,r2
    8344:	00800074 	movhi	r2,1
    8348:	10a2bb04 	addi	r2,r2,-29972
    834c:	200b883a 	mov	r5,r4
    8350:	38800115 	stw	r2,4(r7)
    8354:	3809883a 	mov	r4,r7
    8358:	0008ac80 	call	8ac8 <__vfprintf_internal>
    835c:	dfc00117 	ldw	ra,4(sp)
    8360:	dec00504 	addi	sp,sp,20
    8364:	f800283a 	ret

00008368 <_printf_r>:
    8368:	defffc04 	addi	sp,sp,-16
    836c:	dfc00115 	stw	ra,4(sp)
    8370:	d9800215 	stw	r6,8(sp)
    8374:	d9c00315 	stw	r7,12(sp)
    8378:	22000217 	ldw	r8,8(r4)
    837c:	d8800204 	addi	r2,sp,8
    8380:	d8800015 	stw	r2,0(sp)
    8384:	100f883a 	mov	r7,r2
    8388:	00800074 	movhi	r2,1
    838c:	10a2bb04 	addi	r2,r2,-29972
    8390:	280d883a 	mov	r6,r5
    8394:	40800115 	stw	r2,4(r8)
    8398:	400b883a 	mov	r5,r8
    839c:	000842c0 	call	842c <___vfprintf_internal_r>
    83a0:	dfc00117 	ldw	ra,4(sp)
    83a4:	dec00404 	addi	sp,sp,16
    83a8:	f800283a 	ret

000083ac <print_repeat>:
    83ac:	defffb04 	addi	sp,sp,-20
    83b0:	dc800315 	stw	r18,12(sp)
    83b4:	dc400215 	stw	r17,8(sp)
    83b8:	dc000115 	stw	r16,4(sp)
    83bc:	dfc00415 	stw	ra,16(sp)
    83c0:	2025883a 	mov	r18,r4
    83c4:	2823883a 	mov	r17,r5
    83c8:	3821883a 	mov	r16,r7
    83cc:	d9800005 	stb	r6,0(sp)
    83d0:	9009883a 	mov	r4,r18
    83d4:	880b883a 	mov	r5,r17
    83d8:	d80d883a 	mov	r6,sp
    83dc:	01c00044 	movi	r7,1
    83e0:	04000b0e 	bge	zero,r16,8410 <print_repeat+0x64>
    83e4:	88c00117 	ldw	r3,4(r17)
    83e8:	843fffc4 	addi	r16,r16,-1
    83ec:	183ee83a 	callr	r3
    83f0:	103ff726 	beq	r2,zero,83d0 <print_repeat+0x24>
    83f4:	00bfffc4 	movi	r2,-1
    83f8:	dfc00417 	ldw	ra,16(sp)
    83fc:	dc800317 	ldw	r18,12(sp)
    8400:	dc400217 	ldw	r17,8(sp)
    8404:	dc000117 	ldw	r16,4(sp)
    8408:	dec00504 	addi	sp,sp,20
    840c:	f800283a 	ret
    8410:	0005883a 	mov	r2,zero
    8414:	dfc00417 	ldw	ra,16(sp)
    8418:	dc800317 	ldw	r18,12(sp)
    841c:	dc400217 	ldw	r17,8(sp)
    8420:	dc000117 	ldw	r16,4(sp)
    8424:	dec00504 	addi	sp,sp,20
    8428:	f800283a 	ret

0000842c <___vfprintf_internal_r>:
    842c:	deffe304 	addi	sp,sp,-116
    8430:	df001b15 	stw	fp,108(sp)
    8434:	ddc01a15 	stw	r23,104(sp)
    8438:	dd001715 	stw	r20,92(sp)
    843c:	dc801515 	stw	r18,84(sp)
    8440:	dc001315 	stw	r16,76(sp)
    8444:	dfc01c15 	stw	ra,112(sp)
    8448:	dd801915 	stw	r22,100(sp)
    844c:	dd401815 	stw	r21,96(sp)
    8450:	dcc01615 	stw	r19,88(sp)
    8454:	dc401415 	stw	r17,80(sp)
    8458:	d9001015 	stw	r4,64(sp)
    845c:	2829883a 	mov	r20,r5
    8460:	d9c01115 	stw	r7,68(sp)
    8464:	3025883a 	mov	r18,r6
    8468:	0021883a 	mov	r16,zero
    846c:	d8000f15 	stw	zero,60(sp)
    8470:	d8000e15 	stw	zero,56(sp)
    8474:	0039883a 	mov	fp,zero
    8478:	d8000915 	stw	zero,36(sp)
    847c:	d8000d15 	stw	zero,52(sp)
    8480:	d8000c15 	stw	zero,48(sp)
    8484:	d8000b15 	stw	zero,44(sp)
    8488:	002f883a 	mov	r23,zero
    848c:	91400003 	ldbu	r5,0(r18)
    8490:	01c00044 	movi	r7,1
    8494:	94800044 	addi	r18,r18,1
    8498:	29003fcc 	andi	r4,r5,255
    849c:	2100201c 	xori	r4,r4,128
    84a0:	213fe004 	addi	r4,r4,-128
    84a4:	20001526 	beq	r4,zero,84fc <___vfprintf_internal_r+0xd0>
    84a8:	81c03526 	beq	r16,r7,8580 <___vfprintf_internal_r+0x154>
    84ac:	3c002016 	blt	r7,r16,8530 <___vfprintf_internal_r+0x104>
    84b0:	803ff61e 	bne	r16,zero,848c <___vfprintf_internal_r+0x60>
    84b4:	00800944 	movi	r2,37
    84b8:	2081501e 	bne	r4,r2,89fc <___vfprintf_internal_r+0x5d0>
    84bc:	073fffc4 	movi	fp,-1
    84c0:	00800284 	movi	r2,10
    84c4:	d9c00c15 	stw	r7,48(sp)
    84c8:	d8000f15 	stw	zero,60(sp)
    84cc:	d8000e15 	stw	zero,56(sp)
    84d0:	df000915 	stw	fp,36(sp)
    84d4:	d8800d15 	stw	r2,52(sp)
    84d8:	d8000b15 	stw	zero,44(sp)
    84dc:	91400003 	ldbu	r5,0(r18)
    84e0:	3821883a 	mov	r16,r7
    84e4:	94800044 	addi	r18,r18,1
    84e8:	29003fcc 	andi	r4,r5,255
    84ec:	2100201c 	xori	r4,r4,128
    84f0:	213fe004 	addi	r4,r4,-128
    84f4:	01c00044 	movi	r7,1
    84f8:	203feb1e 	bne	r4,zero,84a8 <___vfprintf_internal_r+0x7c>
    84fc:	b805883a 	mov	r2,r23
    8500:	dfc01c17 	ldw	ra,112(sp)
    8504:	df001b17 	ldw	fp,108(sp)
    8508:	ddc01a17 	ldw	r23,104(sp)
    850c:	dd801917 	ldw	r22,100(sp)
    8510:	dd401817 	ldw	r21,96(sp)
    8514:	dd001717 	ldw	r20,92(sp)
    8518:	dcc01617 	ldw	r19,88(sp)
    851c:	dc801517 	ldw	r18,84(sp)
    8520:	dc401417 	ldw	r17,80(sp)
    8524:	dc001317 	ldw	r16,76(sp)
    8528:	dec01d04 	addi	sp,sp,116
    852c:	f800283a 	ret
    8530:	00800084 	movi	r2,2
    8534:	80801726 	beq	r16,r2,8594 <___vfprintf_internal_r+0x168>
    8538:	008000c4 	movi	r2,3
    853c:	80bfd31e 	bne	r16,r2,848c <___vfprintf_internal_r+0x60>
    8540:	2c7ff404 	addi	r17,r5,-48
    8544:	88c03fcc 	andi	r3,r17,255
    8548:	00800244 	movi	r2,9
    854c:	10c02136 	bltu	r2,r3,85d4 <___vfprintf_internal_r+0x1a8>
    8550:	d8c00917 	ldw	r3,36(sp)
    8554:	18012716 	blt	r3,zero,89f4 <___vfprintf_internal_r+0x5c8>
    8558:	d9000917 	ldw	r4,36(sp)
    855c:	01400284 	movi	r5,10
    8560:	0008d8c0 	call	8d8c <__mulsi3>
    8564:	1007883a 	mov	r3,r2
    8568:	88803fcc 	andi	r2,r17,255
    856c:	1080201c 	xori	r2,r2,128
    8570:	10bfe004 	addi	r2,r2,-128
    8574:	1887883a 	add	r3,r3,r2
    8578:	d8c00915 	stw	r3,36(sp)
    857c:	003fc306 	br	848c <___vfprintf_internal_r+0x60>
    8580:	00800c04 	movi	r2,48
    8584:	2080b326 	beq	r4,r2,8854 <___vfprintf_internal_r+0x428>
    8588:	00800944 	movi	r2,37
    858c:	20812726 	beq	r4,r2,8a2c <___vfprintf_internal_r+0x600>
    8590:	04000084 	movi	r16,2
    8594:	2c7ff404 	addi	r17,r5,-48
    8598:	88c03fcc 	andi	r3,r17,255
    859c:	00800244 	movi	r2,9
    85a0:	10c00a36 	bltu	r2,r3,85cc <___vfprintf_internal_r+0x1a0>
    85a4:	e000b416 	blt	fp,zero,8878 <___vfprintf_internal_r+0x44c>
    85a8:	e009883a 	mov	r4,fp
    85ac:	01400284 	movi	r5,10
    85b0:	0008d8c0 	call	8d8c <__mulsi3>
    85b4:	1007883a 	mov	r3,r2
    85b8:	88803fcc 	andi	r2,r17,255
    85bc:	1080201c 	xori	r2,r2,128
    85c0:	10bfe004 	addi	r2,r2,-128
    85c4:	18b9883a 	add	fp,r3,r2
    85c8:	003fb006 	br	848c <___vfprintf_internal_r+0x60>
    85cc:	00800b84 	movi	r2,46
    85d0:	2080a326 	beq	r4,r2,8860 <___vfprintf_internal_r+0x434>
    85d4:	00801b04 	movi	r2,108
    85d8:	2080a326 	beq	r4,r2,8868 <___vfprintf_internal_r+0x43c>
    85dc:	d8c00917 	ldw	r3,36(sp)
    85e0:	1800a716 	blt	r3,zero,8880 <___vfprintf_internal_r+0x454>
    85e4:	d8000f15 	stw	zero,60(sp)
    85e8:	28bfea04 	addi	r2,r5,-88
    85ec:	10803fcc 	andi	r2,r2,255
    85f0:	00c00804 	movi	r3,32
    85f4:	18802836 	bltu	r3,r2,8698 <___vfprintf_internal_r+0x26c>
    85f8:	1085883a 	add	r2,r2,r2
    85fc:	1085883a 	add	r2,r2,r2
    8600:	00c00074 	movhi	r3,1
    8604:	18e18504 	addi	r3,r3,-31212
    8608:	10c5883a 	add	r2,r2,r3
    860c:	11000017 	ldw	r4,0(r2)
    8610:	2000683a 	jmp	r4
    8614:	000086a0 	cmpeqi	zero,zero,538
    8618:	00008698 	cmpnei	zero,zero,538
    861c:	00008698 	cmpnei	zero,zero,538
    8620:	00008698 	cmpnei	zero,zero,538
    8624:	00008698 	cmpnei	zero,zero,538
    8628:	00008698 	cmpnei	zero,zero,538
    862c:	00008698 	cmpnei	zero,zero,538
    8630:	00008698 	cmpnei	zero,zero,538
    8634:	00008698 	cmpnei	zero,zero,538
    8638:	00008698 	cmpnei	zero,zero,538
    863c:	00008698 	cmpnei	zero,zero,538
    8640:	000088cc 	andi	zero,zero,547
    8644:	000086b4 	movhi	zero,538
    8648:	00008698 	cmpnei	zero,zero,538
    864c:	00008698 	cmpnei	zero,zero,538
    8650:	00008698 	cmpnei	zero,zero,538
    8654:	00008698 	cmpnei	zero,zero,538
    8658:	000086b4 	movhi	zero,538
    865c:	00008698 	cmpnei	zero,zero,538
    8660:	00008698 	cmpnei	zero,zero,538
    8664:	00008698 	cmpnei	zero,zero,538
    8668:	00008698 	cmpnei	zero,zero,538
    866c:	00008698 	cmpnei	zero,zero,538
    8670:	00008934 	movhi	zero,548
    8674:	00008698 	cmpnei	zero,zero,538
    8678:	00008698 	cmpnei	zero,zero,538
    867c:	00008698 	cmpnei	zero,zero,538
    8680:	00008944 	movi	zero,549
    8684:	00008698 	cmpnei	zero,zero,538
    8688:	00008818 	cmpnei	zero,zero,544
    868c:	00008698 	cmpnei	zero,zero,538
    8690:	00008698 	cmpnei	zero,zero,538
    8694:	00008810 	cmplti	zero,zero,544
    8698:	0021883a 	mov	r16,zero
    869c:	003f7b06 	br	848c <___vfprintf_internal_r+0x60>
    86a0:	00c00404 	movi	r3,16
    86a4:	00800044 	movi	r2,1
    86a8:	d8c00d15 	stw	r3,52(sp)
    86ac:	d8000c15 	stw	zero,48(sp)
    86b0:	d8800b15 	stw	r2,44(sp)
    86b4:	d8c00e17 	ldw	r3,56(sp)
    86b8:	1805003a 	cmpeq	r2,r3,zero
    86bc:	10005a1e 	bne	r2,zero,8828 <___vfprintf_internal_r+0x3fc>
    86c0:	d8800c17 	ldw	r2,48(sp)
    86c4:	1000781e 	bne	r2,zero,88a8 <___vfprintf_internal_r+0x47c>
    86c8:	d8801117 	ldw	r2,68(sp)
    86cc:	d8000a15 	stw	zero,40(sp)
    86d0:	14400017 	ldw	r17,0(r2)
    86d4:	11c00104 	addi	r7,r2,4
    86d8:	d9c01115 	stw	r7,68(sp)
    86dc:	88005a26 	beq	r17,zero,8848 <___vfprintf_internal_r+0x41c>
    86e0:	d8c00b17 	ldw	r3,44(sp)
    86e4:	dcc00044 	addi	r19,sp,1
    86e8:	05800244 	movi	r22,9
    86ec:	182b003a 	cmpeq	r21,r3,zero
    86f0:	dcc01215 	stw	r19,72(sp)
    86f4:	00000506 	br	870c <___vfprintf_internal_r+0x2e0>
    86f8:	21000c04 	addi	r4,r4,48
    86fc:	99000005 	stb	r4,0(r19)
    8700:	9cc00044 	addi	r19,r19,1
    8704:	80000f26 	beq	r16,zero,8744 <___vfprintf_internal_r+0x318>
    8708:	8023883a 	mov	r17,r16
    870c:	d9400d17 	ldw	r5,52(sp)
    8710:	8809883a 	mov	r4,r17
    8714:	0008d7c0 	call	8d7c <__udivsi3>
    8718:	d9000d17 	ldw	r4,52(sp)
    871c:	100b883a 	mov	r5,r2
    8720:	1021883a 	mov	r16,r2
    8724:	0008d8c0 	call	8d8c <__mulsi3>
    8728:	8889c83a 	sub	r4,r17,r2
    872c:	b13ff20e 	bge	r22,r4,86f8 <___vfprintf_internal_r+0x2cc>
    8730:	a8009f1e 	bne	r21,zero,89b0 <___vfprintf_internal_r+0x584>
    8734:	21000dc4 	addi	r4,r4,55
    8738:	99000005 	stb	r4,0(r19)
    873c:	9cc00044 	addi	r19,r19,1
    8740:	803ff11e 	bne	r16,zero,8708 <___vfprintf_internal_r+0x2dc>
    8744:	d8801217 	ldw	r2,72(sp)
    8748:	98a3c83a 	sub	r17,r19,r2
    874c:	d8c00917 	ldw	r3,36(sp)
    8750:	1c4bc83a 	sub	r5,r3,r17
    8754:	0140130e 	bge	zero,r5,87a4 <___vfprintf_internal_r+0x378>
    8758:	d8c00044 	addi	r3,sp,1
    875c:	18800804 	addi	r2,r3,32
    8760:	9880102e 	bgeu	r19,r2,87a4 <___vfprintf_internal_r+0x378>
    8764:	00800c04 	movi	r2,48
    8768:	28ffffc4 	addi	r3,r5,-1
    876c:	98800005 	stb	r2,0(r19)
    8770:	99000044 	addi	r4,r19,1
    8774:	00c0080e 	bge	zero,r3,8798 <___vfprintf_internal_r+0x36c>
    8778:	d8c00044 	addi	r3,sp,1
    877c:	18800804 	addi	r2,r3,32
    8780:	2080052e 	bgeu	r4,r2,8798 <___vfprintf_internal_r+0x36c>
    8784:	00800c04 	movi	r2,48
    8788:	20800005 	stb	r2,0(r4)
    878c:	21000044 	addi	r4,r4,1
    8790:	9945883a 	add	r2,r19,r5
    8794:	20bff81e 	bne	r4,r2,8778 <___vfprintf_internal_r+0x34c>
    8798:	d8801217 	ldw	r2,72(sp)
    879c:	2027883a 	mov	r19,r4
    87a0:	20a3c83a 	sub	r17,r4,r2
    87a4:	d8c00a17 	ldw	r3,40(sp)
    87a8:	1c45883a 	add	r2,r3,r17
    87ac:	e0a1c83a 	sub	r16,fp,r2
    87b0:	d8800f17 	ldw	r2,60(sp)
    87b4:	10008026 	beq	r2,zero,89b8 <___vfprintf_internal_r+0x58c>
    87b8:	1805003a 	cmpeq	r2,r3,zero
    87bc:	1000ae26 	beq	r2,zero,8a78 <___vfprintf_internal_r+0x64c>
    87c0:	0400a516 	blt	zero,r16,8a58 <___vfprintf_internal_r+0x62c>
    87c4:	b805883a 	mov	r2,r23
    87c8:	0440950e 	bge	zero,r17,8a20 <___vfprintf_internal_r+0x5f4>
    87cc:	102f883a 	mov	r23,r2
    87d0:	1461883a 	add	r16,r2,r17
    87d4:	00000206 	br	87e0 <___vfprintf_internal_r+0x3b4>
    87d8:	bdc00044 	addi	r23,r23,1
    87dc:	85ffae26 	beq	r16,r23,8698 <___vfprintf_internal_r+0x26c>
    87e0:	9cffffc4 	addi	r19,r19,-1
    87e4:	98800003 	ldbu	r2,0(r19)
    87e8:	a0c00117 	ldw	r3,4(r20)
    87ec:	d9001017 	ldw	r4,64(sp)
    87f0:	d8800005 	stb	r2,0(sp)
    87f4:	a00b883a 	mov	r5,r20
    87f8:	d80d883a 	mov	r6,sp
    87fc:	01c00044 	movi	r7,1
    8800:	183ee83a 	callr	r3
    8804:	103ff426 	beq	r2,zero,87d8 <___vfprintf_internal_r+0x3ac>
    8808:	05ffffc4 	movi	r23,-1
    880c:	003f3b06 	br	84fc <___vfprintf_internal_r+0xd0>
    8810:	00c00404 	movi	r3,16
    8814:	d8c00d15 	stw	r3,52(sp)
    8818:	d8000c15 	stw	zero,48(sp)
    881c:	d8c00e17 	ldw	r3,56(sp)
    8820:	1805003a 	cmpeq	r2,r3,zero
    8824:	103fa626 	beq	r2,zero,86c0 <___vfprintf_internal_r+0x294>
    8828:	d8c00c17 	ldw	r3,48(sp)
    882c:	1800171e 	bne	r3,zero,888c <___vfprintf_internal_r+0x460>
    8830:	d8c01117 	ldw	r3,68(sp)
    8834:	d8000a15 	stw	zero,40(sp)
    8838:	1c400017 	ldw	r17,0(r3)
    883c:	19c00104 	addi	r7,r3,4
    8840:	d9c01115 	stw	r7,68(sp)
    8844:	883fa61e 	bne	r17,zero,86e0 <___vfprintf_internal_r+0x2b4>
    8848:	dcc00044 	addi	r19,sp,1
    884c:	dcc01215 	stw	r19,72(sp)
    8850:	003fbe06 	br	874c <___vfprintf_internal_r+0x320>
    8854:	04000084 	movi	r16,2
    8858:	d9c00f15 	stw	r7,60(sp)
    885c:	003f0b06 	br	848c <___vfprintf_internal_r+0x60>
    8860:	040000c4 	movi	r16,3
    8864:	003f0906 	br	848c <___vfprintf_internal_r+0x60>
    8868:	00800044 	movi	r2,1
    886c:	040000c4 	movi	r16,3
    8870:	d8800e15 	stw	r2,56(sp)
    8874:	003f0506 	br	848c <___vfprintf_internal_r+0x60>
    8878:	0007883a 	mov	r3,zero
    887c:	003f4e06 	br	85b8 <___vfprintf_internal_r+0x18c>
    8880:	00800044 	movi	r2,1
    8884:	d8800915 	stw	r2,36(sp)
    8888:	003f5706 	br	85e8 <___vfprintf_internal_r+0x1bc>
    888c:	d8801117 	ldw	r2,68(sp)
    8890:	14400017 	ldw	r17,0(r2)
    8894:	10800104 	addi	r2,r2,4
    8898:	d8801115 	stw	r2,68(sp)
    889c:	88000716 	blt	r17,zero,88bc <___vfprintf_internal_r+0x490>
    88a0:	d8000a15 	stw	zero,40(sp)
    88a4:	003f8d06 	br	86dc <___vfprintf_internal_r+0x2b0>
    88a8:	d8c01117 	ldw	r3,68(sp)
    88ac:	1c400017 	ldw	r17,0(r3)
    88b0:	18c00104 	addi	r3,r3,4
    88b4:	d8c01115 	stw	r3,68(sp)
    88b8:	883ff90e 	bge	r17,zero,88a0 <___vfprintf_internal_r+0x474>
    88bc:	00800044 	movi	r2,1
    88c0:	0463c83a 	sub	r17,zero,r17
    88c4:	d8800a15 	stw	r2,40(sp)
    88c8:	003f8406 	br	86dc <___vfprintf_internal_r+0x2b0>
    88cc:	04000044 	movi	r16,1
    88d0:	8700080e 	bge	r16,fp,88f4 <___vfprintf_internal_r+0x4c8>
    88d4:	d9001017 	ldw	r4,64(sp)
    88d8:	a00b883a 	mov	r5,r20
    88dc:	01800804 	movi	r6,32
    88e0:	e1ffffc4 	addi	r7,fp,-1
    88e4:	00083ac0 	call	83ac <print_repeat>
    88e8:	103fc71e 	bne	r2,zero,8808 <___vfprintf_internal_r+0x3dc>
    88ec:	e5c5883a 	add	r2,fp,r23
    88f0:	15ffffc4 	addi	r23,r2,-1
    88f4:	d8c01117 	ldw	r3,68(sp)
    88f8:	d9001017 	ldw	r4,64(sp)
    88fc:	800f883a 	mov	r7,r16
    8900:	18800017 	ldw	r2,0(r3)
    8904:	a0c00117 	ldw	r3,4(r20)
    8908:	a00b883a 	mov	r5,r20
    890c:	d8800005 	stb	r2,0(sp)
    8910:	d80d883a 	mov	r6,sp
    8914:	183ee83a 	callr	r3
    8918:	103fbb1e 	bne	r2,zero,8808 <___vfprintf_internal_r+0x3dc>
    891c:	d8801117 	ldw	r2,68(sp)
    8920:	bdc00044 	addi	r23,r23,1
    8924:	0021883a 	mov	r16,zero
    8928:	10800104 	addi	r2,r2,4
    892c:	d8801115 	stw	r2,68(sp)
    8930:	003ed606 	br	848c <___vfprintf_internal_r+0x60>
    8934:	00800204 	movi	r2,8
    8938:	d8800d15 	stw	r2,52(sp)
    893c:	d8000c15 	stw	zero,48(sp)
    8940:	003fb606 	br	881c <___vfprintf_internal_r+0x3f0>
    8944:	d8c01117 	ldw	r3,68(sp)
    8948:	1cc00017 	ldw	r19,0(r3)
    894c:	9809883a 	mov	r4,r19
    8950:	0008ba80 	call	8ba8 <strlen>
    8954:	e0a1c83a 	sub	r16,fp,r2
    8958:	1023883a 	mov	r17,r2
    895c:	0400070e 	bge	zero,r16,897c <___vfprintf_internal_r+0x550>
    8960:	d9001017 	ldw	r4,64(sp)
    8964:	a00b883a 	mov	r5,r20
    8968:	01800804 	movi	r6,32
    896c:	800f883a 	mov	r7,r16
    8970:	00083ac0 	call	83ac <print_repeat>
    8974:	103fa41e 	bne	r2,zero,8808 <___vfprintf_internal_r+0x3dc>
    8978:	bc2f883a 	add	r23,r23,r16
    897c:	a0c00117 	ldw	r3,4(r20)
    8980:	d9001017 	ldw	r4,64(sp)
    8984:	980d883a 	mov	r6,r19
    8988:	a00b883a 	mov	r5,r20
    898c:	880f883a 	mov	r7,r17
    8990:	183ee83a 	callr	r3
    8994:	103f9c1e 	bne	r2,zero,8808 <___vfprintf_internal_r+0x3dc>
    8998:	d8801117 	ldw	r2,68(sp)
    899c:	bc6f883a 	add	r23,r23,r17
    89a0:	0021883a 	mov	r16,zero
    89a4:	10800104 	addi	r2,r2,4
    89a8:	d8801115 	stw	r2,68(sp)
    89ac:	003eb706 	br	848c <___vfprintf_internal_r+0x60>
    89b0:	210015c4 	addi	r4,r4,87
    89b4:	003f5106 	br	86fc <___vfprintf_internal_r+0x2d0>
    89b8:	04003b16 	blt	zero,r16,8aa8 <___vfprintf_internal_r+0x67c>
    89bc:	d8c00a17 	ldw	r3,40(sp)
    89c0:	1805003a 	cmpeq	r2,r3,zero
    89c4:	103f7f1e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x398>
    89c8:	a0c00117 	ldw	r3,4(r20)
    89cc:	d9001017 	ldw	r4,64(sp)
    89d0:	00800b44 	movi	r2,45
    89d4:	d8800005 	stb	r2,0(sp)
    89d8:	a00b883a 	mov	r5,r20
    89dc:	d80d883a 	mov	r6,sp
    89e0:	01c00044 	movi	r7,1
    89e4:	183ee83a 	callr	r3
    89e8:	103f871e 	bne	r2,zero,8808 <___vfprintf_internal_r+0x3dc>
    89ec:	b8800044 	addi	r2,r23,1
    89f0:	003f7506 	br	87c8 <___vfprintf_internal_r+0x39c>
    89f4:	0007883a 	mov	r3,zero
    89f8:	003edb06 	br	8568 <___vfprintf_internal_r+0x13c>
    89fc:	a0c00117 	ldw	r3,4(r20)
    8a00:	d9001017 	ldw	r4,64(sp)
    8a04:	d9400005 	stb	r5,0(sp)
    8a08:	d80d883a 	mov	r6,sp
    8a0c:	a00b883a 	mov	r5,r20
    8a10:	183ee83a 	callr	r3
    8a14:	103f7c1e 	bne	r2,zero,8808 <___vfprintf_internal_r+0x3dc>
    8a18:	bdc00044 	addi	r23,r23,1
    8a1c:	003e9b06 	br	848c <___vfprintf_internal_r+0x60>
    8a20:	102f883a 	mov	r23,r2
    8a24:	0021883a 	mov	r16,zero
    8a28:	003e9806 	br	848c <___vfprintf_internal_r+0x60>
    8a2c:	a0c00117 	ldw	r3,4(r20)
    8a30:	d9000005 	stb	r4,0(sp)
    8a34:	d9001017 	ldw	r4,64(sp)
    8a38:	a00b883a 	mov	r5,r20
    8a3c:	d80d883a 	mov	r6,sp
    8a40:	800f883a 	mov	r7,r16
    8a44:	183ee83a 	callr	r3
    8a48:	103f6f1e 	bne	r2,zero,8808 <___vfprintf_internal_r+0x3dc>
    8a4c:	bc2f883a 	add	r23,r23,r16
    8a50:	0021883a 	mov	r16,zero
    8a54:	003e8d06 	br	848c <___vfprintf_internal_r+0x60>
    8a58:	d9001017 	ldw	r4,64(sp)
    8a5c:	a00b883a 	mov	r5,r20
    8a60:	01800c04 	movi	r6,48
    8a64:	800f883a 	mov	r7,r16
    8a68:	00083ac0 	call	83ac <print_repeat>
    8a6c:	103f661e 	bne	r2,zero,8808 <___vfprintf_internal_r+0x3dc>
    8a70:	bc05883a 	add	r2,r23,r16
    8a74:	003f5406 	br	87c8 <___vfprintf_internal_r+0x39c>
    8a78:	a0c00117 	ldw	r3,4(r20)
    8a7c:	d9001017 	ldw	r4,64(sp)
    8a80:	00800b44 	movi	r2,45
    8a84:	d8800005 	stb	r2,0(sp)
    8a88:	a00b883a 	mov	r5,r20
    8a8c:	d80d883a 	mov	r6,sp
    8a90:	01c00044 	movi	r7,1
    8a94:	183ee83a 	callr	r3
    8a98:	103f5b1e 	bne	r2,zero,8808 <___vfprintf_internal_r+0x3dc>
    8a9c:	bdc00044 	addi	r23,r23,1
    8aa0:	043f480e 	bge	zero,r16,87c4 <___vfprintf_internal_r+0x398>
    8aa4:	003fec06 	br	8a58 <___vfprintf_internal_r+0x62c>
    8aa8:	d9001017 	ldw	r4,64(sp)
    8aac:	a00b883a 	mov	r5,r20
    8ab0:	01800804 	movi	r6,32
    8ab4:	800f883a 	mov	r7,r16
    8ab8:	00083ac0 	call	83ac <print_repeat>
    8abc:	103f521e 	bne	r2,zero,8808 <___vfprintf_internal_r+0x3dc>
    8ac0:	bc2f883a 	add	r23,r23,r16
    8ac4:	003fbd06 	br	89bc <___vfprintf_internal_r+0x590>

00008ac8 <__vfprintf_internal>:
    8ac8:	00800074 	movhi	r2,1
    8acc:	10ade604 	addi	r2,r2,-18536
    8ad0:	2013883a 	mov	r9,r4
    8ad4:	11000017 	ldw	r4,0(r2)
    8ad8:	2805883a 	mov	r2,r5
    8adc:	300f883a 	mov	r7,r6
    8ae0:	480b883a 	mov	r5,r9
    8ae4:	100d883a 	mov	r6,r2
    8ae8:	000842c1 	jmpi	842c <___vfprintf_internal_r>

00008aec <__sfvwrite_small_dev>:
    8aec:	2880000b 	ldhu	r2,0(r5)
    8af0:	defffa04 	addi	sp,sp,-24
    8af4:	dcc00315 	stw	r19,12(sp)
    8af8:	1080020c 	andi	r2,r2,8
    8afc:	dc800215 	stw	r18,8(sp)
    8b00:	dc400115 	stw	r17,4(sp)
    8b04:	dfc00515 	stw	ra,20(sp)
    8b08:	dd000415 	stw	r20,16(sp)
    8b0c:	dc000015 	stw	r16,0(sp)
    8b10:	2825883a 	mov	r18,r5
    8b14:	2027883a 	mov	r19,r4
    8b18:	3023883a 	mov	r17,r6
    8b1c:	10002026 	beq	r2,zero,8ba0 <__sfvwrite_small_dev+0xb4>
    8b20:	2940008f 	ldh	r5,2(r5)
    8b24:	28000f16 	blt	r5,zero,8b64 <__sfvwrite_small_dev+0x78>
    8b28:	01c01b0e 	bge	zero,r7,8b98 <__sfvwrite_small_dev+0xac>
    8b2c:	3821883a 	mov	r16,r7
    8b30:	05010004 	movi	r20,1024
    8b34:	00000206 	br	8b40 <__sfvwrite_small_dev+0x54>
    8b38:	0400170e 	bge	zero,r16,8b98 <__sfvwrite_small_dev+0xac>
    8b3c:	9140008f 	ldh	r5,2(r18)
    8b40:	880d883a 	mov	r6,r17
    8b44:	9809883a 	mov	r4,r19
    8b48:	800f883a 	mov	r7,r16
    8b4c:	a400010e 	bge	r20,r16,8b54 <__sfvwrite_small_dev+0x68>
    8b50:	01c10004 	movi	r7,1024
    8b54:	0008bc80 	call	8bc8 <_write_r>
    8b58:	88a3883a 	add	r17,r17,r2
    8b5c:	80a1c83a 	sub	r16,r16,r2
    8b60:	00bff516 	blt	zero,r2,8b38 <__sfvwrite_small_dev+0x4c>
    8b64:	9080000b 	ldhu	r2,0(r18)
    8b68:	00ffffc4 	movi	r3,-1
    8b6c:	10801014 	ori	r2,r2,64
    8b70:	9080000d 	sth	r2,0(r18)
    8b74:	1805883a 	mov	r2,r3
    8b78:	dfc00517 	ldw	ra,20(sp)
    8b7c:	dd000417 	ldw	r20,16(sp)
    8b80:	dcc00317 	ldw	r19,12(sp)
    8b84:	dc800217 	ldw	r18,8(sp)
    8b88:	dc400117 	ldw	r17,4(sp)
    8b8c:	dc000017 	ldw	r16,0(sp)
    8b90:	dec00604 	addi	sp,sp,24
    8b94:	f800283a 	ret
    8b98:	0007883a 	mov	r3,zero
    8b9c:	003ff506 	br	8b74 <__sfvwrite_small_dev+0x88>
    8ba0:	00ffffc4 	movi	r3,-1
    8ba4:	003ff306 	br	8b74 <__sfvwrite_small_dev+0x88>

00008ba8 <strlen>:
    8ba8:	20800007 	ldb	r2,0(r4)
    8bac:	10000526 	beq	r2,zero,8bc4 <strlen+0x1c>
    8bb0:	2007883a 	mov	r3,r4
    8bb4:	18c00044 	addi	r3,r3,1
    8bb8:	18800007 	ldb	r2,0(r3)
    8bbc:	103ffd1e 	bne	r2,zero,8bb4 <strlen+0xc>
    8bc0:	1905c83a 	sub	r2,r3,r4
    8bc4:	f800283a 	ret

00008bc8 <_write_r>:
    8bc8:	defffd04 	addi	sp,sp,-12
    8bcc:	dc000015 	stw	r16,0(sp)
    8bd0:	04000074 	movhi	r16,1
    8bd4:	842eed04 	addi	r16,r16,-17484
    8bd8:	dc400115 	stw	r17,4(sp)
    8bdc:	80000015 	stw	zero,0(r16)
    8be0:	2023883a 	mov	r17,r4
    8be4:	2809883a 	mov	r4,r5
    8be8:	300b883a 	mov	r5,r6
    8bec:	380d883a 	mov	r6,r7
    8bf0:	dfc00215 	stw	ra,8(sp)
    8bf4:	00091e80 	call	91e8 <write>
    8bf8:	1007883a 	mov	r3,r2
    8bfc:	00bfffc4 	movi	r2,-1
    8c00:	18800626 	beq	r3,r2,8c1c <_write_r+0x54>
    8c04:	1805883a 	mov	r2,r3
    8c08:	dfc00217 	ldw	ra,8(sp)
    8c0c:	dc400117 	ldw	r17,4(sp)
    8c10:	dc000017 	ldw	r16,0(sp)
    8c14:	dec00304 	addi	sp,sp,12
    8c18:	f800283a 	ret
    8c1c:	80800017 	ldw	r2,0(r16)
    8c20:	103ff826 	beq	r2,zero,8c04 <_write_r+0x3c>
    8c24:	88800015 	stw	r2,0(r17)
    8c28:	1805883a 	mov	r2,r3
    8c2c:	dfc00217 	ldw	ra,8(sp)
    8c30:	dc400117 	ldw	r17,4(sp)
    8c34:	dc000017 	ldw	r16,0(sp)
    8c38:	dec00304 	addi	sp,sp,12
    8c3c:	f800283a 	ret

00008c40 <udivmodsi4>:
    8c40:	29001b2e 	bgeu	r5,r4,8cb0 <udivmodsi4+0x70>
    8c44:	28001a16 	blt	r5,zero,8cb0 <udivmodsi4+0x70>
    8c48:	00800044 	movi	r2,1
    8c4c:	0007883a 	mov	r3,zero
    8c50:	01c007c4 	movi	r7,31
    8c54:	00000306 	br	8c64 <udivmodsi4+0x24>
    8c58:	19c01326 	beq	r3,r7,8ca8 <udivmodsi4+0x68>
    8c5c:	18c00044 	addi	r3,r3,1
    8c60:	28000416 	blt	r5,zero,8c74 <udivmodsi4+0x34>
    8c64:	294b883a 	add	r5,r5,r5
    8c68:	1085883a 	add	r2,r2,r2
    8c6c:	293ffa36 	bltu	r5,r4,8c58 <udivmodsi4+0x18>
    8c70:	10000d26 	beq	r2,zero,8ca8 <udivmodsi4+0x68>
    8c74:	0007883a 	mov	r3,zero
    8c78:	21400236 	bltu	r4,r5,8c84 <udivmodsi4+0x44>
    8c7c:	2149c83a 	sub	r4,r4,r5
    8c80:	1886b03a 	or	r3,r3,r2
    8c84:	1004d07a 	srli	r2,r2,1
    8c88:	280ad07a 	srli	r5,r5,1
    8c8c:	103ffa1e 	bne	r2,zero,8c78 <udivmodsi4+0x38>
    8c90:	30000226 	beq	r6,zero,8c9c <udivmodsi4+0x5c>
    8c94:	2005883a 	mov	r2,r4
    8c98:	f800283a 	ret
    8c9c:	1809883a 	mov	r4,r3
    8ca0:	2005883a 	mov	r2,r4
    8ca4:	f800283a 	ret
    8ca8:	0007883a 	mov	r3,zero
    8cac:	003ff806 	br	8c90 <udivmodsi4+0x50>
    8cb0:	00800044 	movi	r2,1
    8cb4:	0007883a 	mov	r3,zero
    8cb8:	003fef06 	br	8c78 <udivmodsi4+0x38>

00008cbc <__divsi3>:
    8cbc:	defffe04 	addi	sp,sp,-8
    8cc0:	dc000015 	stw	r16,0(sp)
    8cc4:	dfc00115 	stw	ra,4(sp)
    8cc8:	0021883a 	mov	r16,zero
    8ccc:	20000c16 	blt	r4,zero,8d00 <__divsi3+0x44>
    8cd0:	000d883a 	mov	r6,zero
    8cd4:	28000e16 	blt	r5,zero,8d10 <__divsi3+0x54>
    8cd8:	0008c400 	call	8c40 <udivmodsi4>
    8cdc:	1007883a 	mov	r3,r2
    8ce0:	8005003a 	cmpeq	r2,r16,zero
    8ce4:	1000011e 	bne	r2,zero,8cec <__divsi3+0x30>
    8ce8:	00c7c83a 	sub	r3,zero,r3
    8cec:	1805883a 	mov	r2,r3
    8cf0:	dfc00117 	ldw	ra,4(sp)
    8cf4:	dc000017 	ldw	r16,0(sp)
    8cf8:	dec00204 	addi	sp,sp,8
    8cfc:	f800283a 	ret
    8d00:	0109c83a 	sub	r4,zero,r4
    8d04:	04000044 	movi	r16,1
    8d08:	000d883a 	mov	r6,zero
    8d0c:	283ff20e 	bge	r5,zero,8cd8 <__divsi3+0x1c>
    8d10:	014bc83a 	sub	r5,zero,r5
    8d14:	8021003a 	cmpeq	r16,r16,zero
    8d18:	003fef06 	br	8cd8 <__divsi3+0x1c>

00008d1c <__modsi3>:
    8d1c:	deffff04 	addi	sp,sp,-4
    8d20:	dfc00015 	stw	ra,0(sp)
    8d24:	01800044 	movi	r6,1
    8d28:	2807883a 	mov	r3,r5
    8d2c:	20000416 	blt	r4,zero,8d40 <__modsi3+0x24>
    8d30:	28000c16 	blt	r5,zero,8d64 <__modsi3+0x48>
    8d34:	dfc00017 	ldw	ra,0(sp)
    8d38:	dec00104 	addi	sp,sp,4
    8d3c:	0008c401 	jmpi	8c40 <udivmodsi4>
    8d40:	0109c83a 	sub	r4,zero,r4
    8d44:	28000b16 	blt	r5,zero,8d74 <__modsi3+0x58>
    8d48:	180b883a 	mov	r5,r3
    8d4c:	01800044 	movi	r6,1
    8d50:	0008c400 	call	8c40 <udivmodsi4>
    8d54:	0085c83a 	sub	r2,zero,r2
    8d58:	dfc00017 	ldw	ra,0(sp)
    8d5c:	dec00104 	addi	sp,sp,4
    8d60:	f800283a 	ret
    8d64:	014bc83a 	sub	r5,zero,r5
    8d68:	dfc00017 	ldw	ra,0(sp)
    8d6c:	dec00104 	addi	sp,sp,4
    8d70:	0008c401 	jmpi	8c40 <udivmodsi4>
    8d74:	0147c83a 	sub	r3,zero,r5
    8d78:	003ff306 	br	8d48 <__modsi3+0x2c>

00008d7c <__udivsi3>:
    8d7c:	000d883a 	mov	r6,zero
    8d80:	0008c401 	jmpi	8c40 <udivmodsi4>

00008d84 <__umodsi3>:
    8d84:	01800044 	movi	r6,1
    8d88:	0008c401 	jmpi	8c40 <udivmodsi4>

00008d8c <__mulsi3>:
    8d8c:	20000a26 	beq	r4,zero,8db8 <__mulsi3+0x2c>
    8d90:	0007883a 	mov	r3,zero
    8d94:	2080004c 	andi	r2,r4,1
    8d98:	1005003a 	cmpeq	r2,r2,zero
    8d9c:	2008d07a 	srli	r4,r4,1
    8da0:	1000011e 	bne	r2,zero,8da8 <__mulsi3+0x1c>
    8da4:	1947883a 	add	r3,r3,r5
    8da8:	294b883a 	add	r5,r5,r5
    8dac:	203ff91e 	bne	r4,zero,8d94 <__mulsi3+0x8>
    8db0:	1805883a 	mov	r2,r3
    8db4:	f800283a 	ret
    8db8:	0007883a 	mov	r3,zero
    8dbc:	1805883a 	mov	r2,r3
    8dc0:	f800283a 	ret

00008dc4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8dc4:	defff904 	addi	sp,sp,-28
    8dc8:	dfc00615 	stw	ra,24(sp)
    8dcc:	df000515 	stw	fp,20(sp)
    8dd0:	df000504 	addi	fp,sp,20
    8dd4:	e13ffc15 	stw	r4,-16(fp)
    8dd8:	e17ffd15 	stw	r5,-12(fp)
    8ddc:	e1bffe15 	stw	r6,-8(fp)
    8de0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    8de4:	e0800217 	ldw	r2,8(fp)
    8de8:	d8800015 	stw	r2,0(sp)
    8dec:	e13ffc17 	ldw	r4,-16(fp)
    8df0:	e17ffd17 	ldw	r5,-12(fp)
    8df4:	e1bffe17 	ldw	r6,-8(fp)
    8df8:	e1ffff17 	ldw	r7,-4(fp)
    8dfc:	0008f980 	call	8f98 <alt_iic_isr_register>
}  
    8e00:	e037883a 	mov	sp,fp
    8e04:	dfc00117 	ldw	ra,4(sp)
    8e08:	df000017 	ldw	fp,0(sp)
    8e0c:	dec00204 	addi	sp,sp,8
    8e10:	f800283a 	ret

00008e14 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    8e14:	defff904 	addi	sp,sp,-28
    8e18:	df000615 	stw	fp,24(sp)
    8e1c:	df000604 	addi	fp,sp,24
    8e20:	e13ffe15 	stw	r4,-8(fp)
    8e24:	e17fff15 	stw	r5,-4(fp)
    8e28:	e0bfff17 	ldw	r2,-4(fp)
    8e2c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8e30:	0005303a 	rdctl	r2,status
    8e34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e38:	e0fffb17 	ldw	r3,-20(fp)
    8e3c:	00bfff84 	movi	r2,-2
    8e40:	1884703a 	and	r2,r3,r2
    8e44:	1001703a 	wrctl	status,r2
  
  return context;
    8e48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8e4c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    8e50:	e0fffc17 	ldw	r3,-16(fp)
    8e54:	00800044 	movi	r2,1
    8e58:	10c4983a 	sll	r2,r2,r3
    8e5c:	1007883a 	mov	r3,r2
    8e60:	00800074 	movhi	r2,1
    8e64:	10aeee04 	addi	r2,r2,-17480
    8e68:	10800017 	ldw	r2,0(r2)
    8e6c:	1886b03a 	or	r3,r3,r2
    8e70:	00800074 	movhi	r2,1
    8e74:	10aeee04 	addi	r2,r2,-17480
    8e78:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8e7c:	00800074 	movhi	r2,1
    8e80:	10aeee04 	addi	r2,r2,-17480
    8e84:	10800017 	ldw	r2,0(r2)
    8e88:	100170fa 	wrctl	ienable,r2
    8e8c:	e0bffd17 	ldw	r2,-12(fp)
    8e90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e94:	e0bffa17 	ldw	r2,-24(fp)
    8e98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    8e9c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    8ea0:	e037883a 	mov	sp,fp
    8ea4:	df000017 	ldw	fp,0(sp)
    8ea8:	dec00104 	addi	sp,sp,4
    8eac:	f800283a 	ret

00008eb0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    8eb0:	defff904 	addi	sp,sp,-28
    8eb4:	df000615 	stw	fp,24(sp)
    8eb8:	df000604 	addi	fp,sp,24
    8ebc:	e13ffe15 	stw	r4,-8(fp)
    8ec0:	e17fff15 	stw	r5,-4(fp)
    8ec4:	e0bfff17 	ldw	r2,-4(fp)
    8ec8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ecc:	0005303a 	rdctl	r2,status
    8ed0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ed4:	e0fffb17 	ldw	r3,-20(fp)
    8ed8:	00bfff84 	movi	r2,-2
    8edc:	1884703a 	and	r2,r3,r2
    8ee0:	1001703a 	wrctl	status,r2
  
  return context;
    8ee4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8ee8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    8eec:	e0fffc17 	ldw	r3,-16(fp)
    8ef0:	00800044 	movi	r2,1
    8ef4:	10c4983a 	sll	r2,r2,r3
    8ef8:	0084303a 	nor	r2,zero,r2
    8efc:	1007883a 	mov	r3,r2
    8f00:	00800074 	movhi	r2,1
    8f04:	10aeee04 	addi	r2,r2,-17480
    8f08:	10800017 	ldw	r2,0(r2)
    8f0c:	1886703a 	and	r3,r3,r2
    8f10:	00800074 	movhi	r2,1
    8f14:	10aeee04 	addi	r2,r2,-17480
    8f18:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8f1c:	00800074 	movhi	r2,1
    8f20:	10aeee04 	addi	r2,r2,-17480
    8f24:	10800017 	ldw	r2,0(r2)
    8f28:	100170fa 	wrctl	ienable,r2
    8f2c:	e0bffd17 	ldw	r2,-12(fp)
    8f30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8f34:	e0bffa17 	ldw	r2,-24(fp)
    8f38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    8f3c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    8f40:	e037883a 	mov	sp,fp
    8f44:	df000017 	ldw	fp,0(sp)
    8f48:	dec00104 	addi	sp,sp,4
    8f4c:	f800283a 	ret

00008f50 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    8f50:	defffc04 	addi	sp,sp,-16
    8f54:	df000315 	stw	fp,12(sp)
    8f58:	df000304 	addi	fp,sp,12
    8f5c:	e13ffe15 	stw	r4,-8(fp)
    8f60:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8f64:	000530fa 	rdctl	r2,ienable
    8f68:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    8f6c:	e0ffff17 	ldw	r3,-4(fp)
    8f70:	00800044 	movi	r2,1
    8f74:	10c4983a 	sll	r2,r2,r3
    8f78:	1007883a 	mov	r3,r2
    8f7c:	e0bffd17 	ldw	r2,-12(fp)
    8f80:	1884703a 	and	r2,r3,r2
    8f84:	1004c03a 	cmpne	r2,r2,zero
}
    8f88:	e037883a 	mov	sp,fp
    8f8c:	df000017 	ldw	fp,0(sp)
    8f90:	dec00104 	addi	sp,sp,4
    8f94:	f800283a 	ret

00008f98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8f98:	defff404 	addi	sp,sp,-48
    8f9c:	dfc00b15 	stw	ra,44(sp)
    8fa0:	df000a15 	stw	fp,40(sp)
    8fa4:	df000a04 	addi	fp,sp,40
    8fa8:	e13ffb15 	stw	r4,-20(fp)
    8fac:	e17ffc15 	stw	r5,-16(fp)
    8fb0:	e1bffd15 	stw	r6,-12(fp)
    8fb4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    8fb8:	00bffa84 	movi	r2,-22
    8fbc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    8fc0:	e0bffc17 	ldw	r2,-16(fp)
    8fc4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8fc8:	e0bff917 	ldw	r2,-28(fp)
    8fcc:	10800808 	cmpgei	r2,r2,32
    8fd0:	1000291e 	bne	r2,zero,9078 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fd4:	0005303a 	rdctl	r2,status
    8fd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8fdc:	e0fff717 	ldw	r3,-36(fp)
    8fe0:	00bfff84 	movi	r2,-2
    8fe4:	1884703a 	and	r2,r3,r2
    8fe8:	1001703a 	wrctl	status,r2
  
  return context;
    8fec:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    8ff0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    8ff4:	e0bff917 	ldw	r2,-28(fp)
    8ff8:	00c00074 	movhi	r3,1
    8ffc:	18eef204 	addi	r3,r3,-17464
    9000:	100490fa 	slli	r2,r2,3
    9004:	10c7883a 	add	r3,r2,r3
    9008:	e0bffd17 	ldw	r2,-12(fp)
    900c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    9010:	e0bff917 	ldw	r2,-28(fp)
    9014:	00c00074 	movhi	r3,1
    9018:	18eef204 	addi	r3,r3,-17464
    901c:	100490fa 	slli	r2,r2,3
    9020:	10c5883a 	add	r2,r2,r3
    9024:	10c00104 	addi	r3,r2,4
    9028:	e0bffe17 	ldw	r2,-8(fp)
    902c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9030:	e0bffd17 	ldw	r2,-12(fp)
    9034:	1005003a 	cmpeq	r2,r2,zero
    9038:	1000051e 	bne	r2,zero,9050 <alt_iic_isr_register+0xb8>
    903c:	e17ff917 	ldw	r5,-28(fp)
    9040:	e13ffb17 	ldw	r4,-20(fp)
    9044:	0008e140 	call	8e14 <alt_ic_irq_enable>
    9048:	e0bfff15 	stw	r2,-4(fp)
    904c:	00000406 	br	9060 <alt_iic_isr_register+0xc8>
    9050:	e17ff917 	ldw	r5,-28(fp)
    9054:	e13ffb17 	ldw	r4,-20(fp)
    9058:	0008eb00 	call	8eb0 <alt_ic_irq_disable>
    905c:	e0bfff15 	stw	r2,-4(fp)
    9060:	e0bfff17 	ldw	r2,-4(fp)
    9064:	e0bffa15 	stw	r2,-24(fp)
    9068:	e0bff817 	ldw	r2,-32(fp)
    906c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9070:	e0bff617 	ldw	r2,-40(fp)
    9074:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9078:	e0bffa17 	ldw	r2,-24(fp)
}
    907c:	e037883a 	mov	sp,fp
    9080:	dfc00117 	ldw	ra,4(sp)
    9084:	df000017 	ldw	fp,0(sp)
    9088:	dec00204 	addi	sp,sp,8
    908c:	f800283a 	ret

00009090 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9090:	defffe04 	addi	sp,sp,-8
    9094:	dfc00115 	stw	ra,4(sp)
    9098:	df000015 	stw	fp,0(sp)
    909c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    90a0:	01000074 	movhi	r4,1
    90a4:	212df304 	addi	r4,r4,-18484
    90a8:	01400074 	movhi	r5,1
    90ac:	296cf904 	addi	r5,r5,-19484
    90b0:	01800074 	movhi	r6,1
    90b4:	31adf304 	addi	r6,r6,-18484
    90b8:	00091100 	call	9110 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    90bc:	01000074 	movhi	r4,1
    90c0:	21200804 	addi	r4,r4,-32736
    90c4:	01400074 	movhi	r5,1
    90c8:	29600804 	addi	r5,r5,-32736
    90cc:	01800074 	movhi	r6,1
    90d0:	31a06d04 	addi	r6,r6,-32332
    90d4:	00091100 	call	9110 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    90d8:	01000074 	movhi	r4,1
    90dc:	212ce504 	addi	r4,r4,-19564
    90e0:	01400074 	movhi	r5,1
    90e4:	296ce504 	addi	r5,r5,-19564
    90e8:	01800074 	movhi	r6,1
    90ec:	31acf904 	addi	r6,r6,-19484
    90f0:	00091100 	call	9110 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    90f4:	000a4940 	call	a494 <alt_dcache_flush_all>
  alt_icache_flush_all();
    90f8:	000a8bc0 	call	a8bc <alt_icache_flush_all>
}
    90fc:	e037883a 	mov	sp,fp
    9100:	dfc00117 	ldw	ra,4(sp)
    9104:	df000017 	ldw	fp,0(sp)
    9108:	dec00204 	addi	sp,sp,8
    910c:	f800283a 	ret

00009110 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9110:	defffc04 	addi	sp,sp,-16
    9114:	df000315 	stw	fp,12(sp)
    9118:	df000304 	addi	fp,sp,12
    911c:	e13ffd15 	stw	r4,-12(fp)
    9120:	e17ffe15 	stw	r5,-8(fp)
    9124:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9128:	e0fffe17 	ldw	r3,-8(fp)
    912c:	e0bffd17 	ldw	r2,-12(fp)
    9130:	18800e26 	beq	r3,r2,916c <alt_load_section+0x5c>
  {
    while( to != end )
    9134:	00000a06 	br	9160 <alt_load_section+0x50>
    {
      *to++ = *from++;
    9138:	e0bffd17 	ldw	r2,-12(fp)
    913c:	10c00017 	ldw	r3,0(r2)
    9140:	e0bffe17 	ldw	r2,-8(fp)
    9144:	10c00015 	stw	r3,0(r2)
    9148:	e0bffe17 	ldw	r2,-8(fp)
    914c:	10800104 	addi	r2,r2,4
    9150:	e0bffe15 	stw	r2,-8(fp)
    9154:	e0bffd17 	ldw	r2,-12(fp)
    9158:	10800104 	addi	r2,r2,4
    915c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9160:	e0fffe17 	ldw	r3,-8(fp)
    9164:	e0bfff17 	ldw	r2,-4(fp)
    9168:	18bff31e 	bne	r3,r2,9138 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    916c:	e037883a 	mov	sp,fp
    9170:	df000017 	ldw	fp,0(sp)
    9174:	dec00104 	addi	sp,sp,4
    9178:	f800283a 	ret

0000917c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    917c:	defffd04 	addi	sp,sp,-12
    9180:	dfc00215 	stw	ra,8(sp)
    9184:	df000115 	stw	fp,4(sp)
    9188:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    918c:	0009883a 	mov	r4,zero
    9190:	000936c0 	call	936c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9194:	00093a00 	call	93a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9198:	01000074 	movhi	r4,1
    919c:	212ce904 	addi	r4,r4,-19548
    91a0:	01400074 	movhi	r5,1
    91a4:	296ce904 	addi	r5,r5,-19548
    91a8:	01800074 	movhi	r6,1
    91ac:	31ace904 	addi	r6,r6,-19548
    91b0:	000a9b00 	call	a9b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    91b4:	000a7600 	call	a760 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    91b8:	01000074 	movhi	r4,1
    91bc:	2129f104 	addi	r4,r4,-22588
    91c0:	000af940 	call	af94 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    91c4:	d1210a17 	ldw	r4,-31704(gp)
    91c8:	d1610b17 	ldw	r5,-31700(gp)
    91cc:	d1a10c17 	ldw	r6,-31696(gp)
    91d0:	00082e00 	call	82e0 <main>
    91d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    91d8:	01000044 	movi	r4,1
    91dc:	000a3340 	call	a334 <close>
  exit (result);
    91e0:	e13fff17 	ldw	r4,-4(fp)
    91e4:	000afa80 	call	afa8 <exit>

000091e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    91e8:	defff704 	addi	sp,sp,-36
    91ec:	dfc00815 	stw	ra,32(sp)
    91f0:	df000715 	stw	fp,28(sp)
    91f4:	df000704 	addi	fp,sp,28
    91f8:	e13ffb15 	stw	r4,-20(fp)
    91fc:	e17ffc15 	stw	r5,-16(fp)
    9200:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9204:	e0bffb17 	ldw	r2,-20(fp)
    9208:	1004803a 	cmplt	r2,r2,zero
    920c:	1000091e 	bne	r2,zero,9234 <write+0x4c>
    9210:	e13ffb17 	ldw	r4,-20(fp)
    9214:	01400304 	movi	r5,12
    9218:	0008d8c0 	call	8d8c <__mulsi3>
    921c:	1007883a 	mov	r3,r2
    9220:	00800074 	movhi	r2,1
    9224:	10ad8504 	addi	r2,r2,-18924
    9228:	1887883a 	add	r3,r3,r2
    922c:	e0ffff15 	stw	r3,-4(fp)
    9230:	00000106 	br	9238 <write+0x50>
    9234:	e03fff15 	stw	zero,-4(fp)
    9238:	e0bfff17 	ldw	r2,-4(fp)
    923c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    9240:	e0bffa17 	ldw	r2,-24(fp)
    9244:	1005003a 	cmpeq	r2,r2,zero
    9248:	1000241e 	bne	r2,zero,92dc <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    924c:	e0bffa17 	ldw	r2,-24(fp)
    9250:	10800217 	ldw	r2,8(r2)
    9254:	108000cc 	andi	r2,r2,3
    9258:	1005003a 	cmpeq	r2,r2,zero
    925c:	10001a1e 	bne	r2,zero,92c8 <write+0xe0>
    9260:	e0bffa17 	ldw	r2,-24(fp)
    9264:	10800017 	ldw	r2,0(r2)
    9268:	10800617 	ldw	r2,24(r2)
    926c:	1005003a 	cmpeq	r2,r2,zero
    9270:	1000151e 	bne	r2,zero,92c8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9274:	e0bffa17 	ldw	r2,-24(fp)
    9278:	10800017 	ldw	r2,0(r2)
    927c:	10800617 	ldw	r2,24(r2)
    9280:	e17ffc17 	ldw	r5,-16(fp)
    9284:	e1bffd17 	ldw	r6,-12(fp)
    9288:	e13ffa17 	ldw	r4,-24(fp)
    928c:	103ee83a 	callr	r2
    9290:	e0bff915 	stw	r2,-28(fp)
    9294:	e0bff917 	ldw	r2,-28(fp)
    9298:	1004403a 	cmpge	r2,r2,zero
    929c:	1000071e 	bne	r2,zero,92bc <write+0xd4>
      {
        ALT_ERRNO = -rval;
    92a0:	000930c0 	call	930c <alt_get_errno>
    92a4:	e0fff917 	ldw	r3,-28(fp)
    92a8:	00c7c83a 	sub	r3,zero,r3
    92ac:	10c00015 	stw	r3,0(r2)
        return -1;
    92b0:	00bfffc4 	movi	r2,-1
    92b4:	e0bffe15 	stw	r2,-8(fp)
    92b8:	00000e06 	br	92f4 <write+0x10c>
      }
      return rval;
    92bc:	e0bff917 	ldw	r2,-28(fp)
    92c0:	e0bffe15 	stw	r2,-8(fp)
    92c4:	00000b06 	br	92f4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    92c8:	000930c0 	call	930c <alt_get_errno>
    92cc:	1007883a 	mov	r3,r2
    92d0:	00800344 	movi	r2,13
    92d4:	18800015 	stw	r2,0(r3)
    92d8:	00000406 	br	92ec <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    92dc:	000930c0 	call	930c <alt_get_errno>
    92e0:	1007883a 	mov	r3,r2
    92e4:	00801444 	movi	r2,81
    92e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    92ec:	00bfffc4 	movi	r2,-1
    92f0:	e0bffe15 	stw	r2,-8(fp)
    92f4:	e0bffe17 	ldw	r2,-8(fp)
}
    92f8:	e037883a 	mov	sp,fp
    92fc:	dfc00117 	ldw	ra,4(sp)
    9300:	df000017 	ldw	fp,0(sp)
    9304:	dec00204 	addi	sp,sp,8
    9308:	f800283a 	ret

0000930c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    930c:	defffd04 	addi	sp,sp,-12
    9310:	dfc00215 	stw	ra,8(sp)
    9314:	df000115 	stw	fp,4(sp)
    9318:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    931c:	00800074 	movhi	r2,1
    9320:	10adf204 	addi	r2,r2,-18488
    9324:	10800017 	ldw	r2,0(r2)
    9328:	1005003a 	cmpeq	r2,r2,zero
    932c:	1000061e 	bne	r2,zero,9348 <alt_get_errno+0x3c>
    9330:	00800074 	movhi	r2,1
    9334:	10adf204 	addi	r2,r2,-18488
    9338:	10800017 	ldw	r2,0(r2)
    933c:	103ee83a 	callr	r2
    9340:	e0bfff15 	stw	r2,-4(fp)
    9344:	00000306 	br	9354 <alt_get_errno+0x48>
    9348:	00800074 	movhi	r2,1
    934c:	10aeed04 	addi	r2,r2,-17484
    9350:	e0bfff15 	stw	r2,-4(fp)
    9354:	e0bfff17 	ldw	r2,-4(fp)
}
    9358:	e037883a 	mov	sp,fp
    935c:	dfc00117 	ldw	ra,4(sp)
    9360:	df000017 	ldw	fp,0(sp)
    9364:	dec00204 	addi	sp,sp,8
    9368:	f800283a 	ret

0000936c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    936c:	defffd04 	addi	sp,sp,-12
    9370:	dfc00215 	stw	ra,8(sp)
    9374:	df000115 	stw	fp,4(sp)
    9378:	df000104 	addi	fp,sp,4
    937c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    9380:	000ad840 	call	ad84 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9384:	00800044 	movi	r2,1
    9388:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    938c:	e037883a 	mov	sp,fp
    9390:	dfc00117 	ldw	ra,4(sp)
    9394:	df000017 	ldw	fp,0(sp)
    9398:	dec00204 	addi	sp,sp,8
    939c:	f800283a 	ret

000093a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    93a0:	defffd04 	addi	sp,sp,-12
    93a4:	dfc00215 	stw	ra,8(sp)
    93a8:	df000115 	stw	fp,4(sp)
    93ac:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_DMA_INIT ( DMA_0, dma_0);
    93b0:	00800044 	movi	r2,1
    93b4:	d8800015 	stw	r2,0(sp)
    93b8:	01000074 	movhi	r4,1
    93bc:	212d6204 	addi	r4,r4,-19064
    93c0:	01400074 	movhi	r5,1
    93c4:	296d6904 	addi	r5,r5,-19036
    93c8:	01800074 	movhi	r6,1
    93cc:	31844804 	addi	r6,r6,4384
    93d0:	000f883a 	mov	r7,zero
    93d4:	0009fbc0 	call	9fbc <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    93d8:	01000074 	movhi	r4,1
    93dc:	212d7004 	addi	r4,r4,-19008
    93e0:	00093f80 	call	93f8 <alt_dev_reg>
}
    93e4:	e037883a 	mov	sp,fp
    93e8:	dfc00117 	ldw	ra,4(sp)
    93ec:	df000017 	ldw	fp,0(sp)
    93f0:	dec00204 	addi	sp,sp,8
    93f4:	f800283a 	ret

000093f8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    93f8:	defffd04 	addi	sp,sp,-12
    93fc:	dfc00215 	stw	ra,8(sp)
    9400:	df000115 	stw	fp,4(sp)
    9404:	df000104 	addi	fp,sp,4
    9408:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    940c:	e13fff17 	ldw	r4,-4(fp)
    9410:	01400074 	movhi	r5,1
    9414:	296deb04 	addi	r5,r5,-18516
    9418:	000a4dc0 	call	a4dc <alt_dev_llist_insert>
}
    941c:	e037883a 	mov	sp,fp
    9420:	dfc00117 	ldw	ra,4(sp)
    9424:	df000017 	ldw	fp,0(sp)
    9428:	dec00204 	addi	sp,sp,8
    942c:	f800283a 	ret

00009430 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
    9430:	defff904 	addi	sp,sp,-28
    9434:	df000615 	stw	fp,24(sp)
    9438:	df000604 	addi	fp,sp,24
    943c:	e13ffc15 	stw	r4,-16(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
    9440:	e0bffc17 	ldw	r2,-16(fp)
    9444:	10c00117 	ldw	r3,4(r2)
    9448:	e0bffc17 	ldw	r2,-16(fp)
    944c:	10800217 	ldw	r2,8(r2)
    9450:	18803926 	beq	r3,r2,9538 <alt_avalon_dma_launch_bidir+0x108>
    9454:	e0bffc17 	ldw	r2,-16(fp)
    9458:	10c00317 	ldw	r3,12(r2)
    945c:	e0bffc17 	ldw	r2,-16(fp)
    9460:	10800417 	ldw	r2,16(r2)
    9464:	18803426 	beq	r3,r2,9538 <alt_avalon_dma_launch_bidir+0x108>
  {
    priv->active = 1;
    9468:	e0fffc17 	ldw	r3,-16(fp)
    946c:	00800044 	movi	r2,1
    9470:	18800815 	stw	r2,32(r3)

    tx_slot = &priv->tx_buf[priv->tx_start];
    9474:	e0bffc17 	ldw	r2,-16(fp)
    9478:	10c00904 	addi	r3,r2,36
    947c:	e0bffc17 	ldw	r2,-16(fp)
    9480:	10800117 	ldw	r2,4(r2)
    9484:	1004913a 	slli	r2,r2,4
    9488:	1885883a 	add	r2,r3,r2
    948c:	e0bffb15 	stw	r2,-20(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
    9490:	e0bffc17 	ldw	r2,-16(fp)
    9494:	10c01904 	addi	r3,r2,100
    9498:	e0bffc17 	ldw	r2,-16(fp)
    949c:	10800317 	ldw	r2,12(r2)
    94a0:	1004913a 	slli	r2,r2,4
    94a4:	1885883a 	add	r2,r3,r2
    94a8:	e0bffa15 	stw	r2,-24(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    94ac:	e0bffc17 	ldw	r2,-16(fp)
    94b0:	10800017 	ldw	r2,0(r2)
    94b4:	11000104 	addi	r4,r2,4
    94b8:	e0bffb17 	ldw	r2,-20(fp)
    94bc:	10800017 	ldw	r2,0(r2)
    94c0:	1007883a 	mov	r3,r2
    94c4:	2005883a 	mov	r2,r4
    94c8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    94cc:	e0bffc17 	ldw	r2,-16(fp)
    94d0:	10800017 	ldw	r2,0(r2)
    94d4:	11000204 	addi	r4,r2,8
    94d8:	e0bffa17 	ldw	r2,-24(fp)
    94dc:	10800017 	ldw	r2,0(r2)
    94e0:	1007883a 	mov	r3,r2
    94e4:	2005883a 	mov	r2,r4
    94e8:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
    94ec:	e0bffc17 	ldw	r2,-16(fp)
    94f0:	10800017 	ldw	r2,0(r2)
    94f4:	10800304 	addi	r2,r2,12
    94f8:	e0bfff15 	stw	r2,-4(fp)
    94fc:	e0bffb17 	ldw	r2,-20(fp)
    9500:	10c00117 	ldw	r3,4(r2)
    9504:	e0bffa17 	ldw	r2,-24(fp)
    9508:	10800117 	ldw	r2,4(r2)
    950c:	e0bffe15 	stw	r2,-8(fp)
    9510:	e0fffd15 	stw	r3,-12(fp)
    9514:	e0bffe17 	ldw	r2,-8(fp)
    9518:	e0fffd17 	ldw	r3,-12(fp)
    951c:	10c0022e 	bgeu	r2,r3,9528 <alt_avalon_dma_launch_bidir+0xf8>
    9520:	e0bffe17 	ldw	r2,-8(fp)
    9524:	e0bffd15 	stw	r2,-12(fp)
    9528:	e0fffd17 	ldw	r3,-12(fp)
    952c:	e0bfff17 	ldw	r2,-4(fp)
    9530:	10c00035 	stwio	r3,0(r2)
void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
    9534:	00000206 	br	9540 <alt_avalon_dma_launch_bidir+0x110>
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
    9538:	e0bffc17 	ldw	r2,-16(fp)
    953c:	10000815 	stw	zero,32(r2)
  }
}
    9540:	e037883a 	mov	sp,fp
    9544:	df000017 	ldw	fp,0(sp)
    9548:	dec00104 	addi	sp,sp,4
    954c:	f800283a 	ret

00009550 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
    9550:	defffd04 	addi	sp,sp,-12
    9554:	df000215 	stw	fp,8(sp)
    9558:	df000204 	addi	fp,sp,8
    955c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
    9560:	e0bfff17 	ldw	r2,-4(fp)
    9564:	10c00117 	ldw	r3,4(r2)
    9568:	e0bfff17 	ldw	r2,-4(fp)
    956c:	10800217 	ldw	r2,8(r2)
    9570:	18801b26 	beq	r3,r2,95e0 <alt_avalon_dma_launch_txonly+0x90>
  {
    priv->active = 1;
    9574:	e0ffff17 	ldw	r3,-4(fp)
    9578:	00800044 	movi	r2,1
    957c:	18800815 	stw	r2,32(r3)
    tx_slot      = &priv->tx_buf[priv->tx_start];
    9580:	e0bfff17 	ldw	r2,-4(fp)
    9584:	10c00904 	addi	r3,r2,36
    9588:	e0bfff17 	ldw	r2,-4(fp)
    958c:	10800117 	ldw	r2,4(r2)
    9590:	1004913a 	slli	r2,r2,4
    9594:	1885883a 	add	r2,r3,r2
    9598:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    959c:	e0bfff17 	ldw	r2,-4(fp)
    95a0:	10800017 	ldw	r2,0(r2)
    95a4:	11000104 	addi	r4,r2,4
    95a8:	e0bffe17 	ldw	r2,-8(fp)
    95ac:	10800017 	ldw	r2,0(r2)
    95b0:	1007883a 	mov	r3,r2
    95b4:	2005883a 	mov	r2,r4
    95b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
    95bc:	e0bfff17 	ldw	r2,-4(fp)
    95c0:	10800017 	ldw	r2,0(r2)
    95c4:	11000304 	addi	r4,r2,12
    95c8:	e0bffe17 	ldw	r2,-8(fp)
    95cc:	10800117 	ldw	r2,4(r2)
    95d0:	1007883a 	mov	r3,r2
    95d4:	2005883a 	mov	r2,r4
    95d8:	10c00035 	stwio	r3,0(r2)
    95dc:	00000206 	br	95e8 <alt_avalon_dma_launch_txonly+0x98>
  }
  else
  {
    priv->active = 0;
    95e0:	e0bfff17 	ldw	r2,-4(fp)
    95e4:	10000815 	stw	zero,32(r2)
  }
}
    95e8:	e037883a 	mov	sp,fp
    95ec:	df000017 	ldw	fp,0(sp)
    95f0:	dec00104 	addi	sp,sp,4
    95f4:	f800283a 	ret

000095f8 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
    95f8:	defffd04 	addi	sp,sp,-12
    95fc:	df000215 	stw	fp,8(sp)
    9600:	df000204 	addi	fp,sp,8
    9604:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
    9608:	e0bfff17 	ldw	r2,-4(fp)
    960c:	10c00317 	ldw	r3,12(r2)
    9610:	e0bfff17 	ldw	r2,-4(fp)
    9614:	10800417 	ldw	r2,16(r2)
    9618:	18801b26 	beq	r3,r2,9688 <alt_avalon_dma_launch_rxonly+0x90>
  {
    priv->active = 1;
    961c:	e0ffff17 	ldw	r3,-4(fp)
    9620:	00800044 	movi	r2,1
    9624:	18800815 	stw	r2,32(r3)
    rx_slot      = &priv->rx_buf[priv->rx_start];
    9628:	e0bfff17 	ldw	r2,-4(fp)
    962c:	10c01904 	addi	r3,r2,100
    9630:	e0bfff17 	ldw	r2,-4(fp)
    9634:	10800317 	ldw	r2,12(r2)
    9638:	1004913a 	slli	r2,r2,4
    963c:	1885883a 	add	r2,r3,r2
    9640:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    9644:	e0bfff17 	ldw	r2,-4(fp)
    9648:	10800017 	ldw	r2,0(r2)
    964c:	11000204 	addi	r4,r2,8
    9650:	e0bffe17 	ldw	r2,-8(fp)
    9654:	10800017 	ldw	r2,0(r2)
    9658:	1007883a 	mov	r3,r2
    965c:	2005883a 	mov	r2,r4
    9660:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
    9664:	e0bfff17 	ldw	r2,-4(fp)
    9668:	10800017 	ldw	r2,0(r2)
    966c:	11000304 	addi	r4,r2,12
    9670:	e0bffe17 	ldw	r2,-8(fp)
    9674:	10800117 	ldw	r2,4(r2)
    9678:	1007883a 	mov	r3,r2
    967c:	2005883a 	mov	r2,r4
    9680:	10c00035 	stwio	r3,0(r2)
    9684:	00000206 	br	9690 <alt_avalon_dma_launch_rxonly+0x98>
  }
  else
  {
    priv->active = 0;
    9688:	e0bfff17 	ldw	r2,-4(fp)
    968c:	10000815 	stw	zero,32(r2)
  }
}
    9690:	e037883a 	mov	sp,fp
    9694:	df000017 	ldw	fp,0(sp)
    9698:	dec00104 	addi	sp,sp,4
    969c:	f800283a 	ret

000096a0 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
    96a0:	defff804 	addi	sp,sp,-32
    96a4:	df000715 	stw	fp,28(sp)
    96a8:	df000704 	addi	fp,sp,28
    96ac:	e13ffb15 	stw	r4,-20(fp)
    96b0:	e17ffc15 	stw	r5,-16(fp)
    96b4:	e1bffd15 	stw	r6,-12(fp)
  int     status = 0;
    96b8:	e03ffa15 	stw	zero,-24(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
    96bc:	e0bffb17 	ldw	r2,-20(fp)
    96c0:	10c00117 	ldw	r3,4(r2)
    96c4:	e0bffb17 	ldw	r2,-20(fp)
    96c8:	10800217 	ldw	r2,8(r2)
    96cc:	18800b1e 	bne	r3,r2,96fc <alt_avalon_dma_ioctl+0x5c>
    96d0:	e0bffb17 	ldw	r2,-20(fp)
    96d4:	10c00317 	ldw	r3,12(r2)
    96d8:	e0bffb17 	ldw	r2,-20(fp)
    96dc:	10800417 	ldw	r2,16(r2)
    96e0:	1880061e 	bne	r3,r2,96fc <alt_avalon_dma_ioctl+0x5c>
    96e4:	e0bffb17 	ldw	r2,-20(fp)
    96e8:	10800017 	ldw	r2,0(r2)
    96ec:	10800304 	addi	r2,r2,12
    96f0:	10800037 	ldwio	r2,0(r2)
    96f4:	1005003a 	cmpeq	r2,r2,zero
    96f8:	1000031e 	bne	r2,zero,9708 <alt_avalon_dma_ioctl+0x68>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
    96fc:	00bffec4 	movi	r2,-5
    9700:	e0bfff15 	stw	r2,-4(fp)
    9704:	0000ca06 	br	9a30 <alt_avalon_dma_ioctl+0x390>
  }

  /* Now process the ioctl. */

  switch (req)
    9708:	e0bffc17 	ldw	r2,-16(fp)
    970c:	108002a8 	cmpgeui	r2,r2,10
    9710:	10007d1e 	bne	r2,zero,9908 <alt_avalon_dma_ioctl+0x268>
    9714:	e0bffc17 	ldw	r2,-16(fp)
    9718:	1085883a 	add	r2,r2,r2
    971c:	1087883a 	add	r3,r2,r2
    9720:	00800074 	movhi	r2,1
    9724:	10a5cd04 	addi	r2,r2,-26828
    9728:	1885883a 	add	r2,r3,r2
    972c:	10800017 	ldw	r2,0(r2)
    9730:	1000683a 	jmp	r2
    9734:	00009908 	cmpgei	zero,zero,612
    9738:	0000975c 	xori	zero,zero,605
    973c:	000097b8 	rdprs	zero,zero,606
    9740:	000097e4 	muli	zero,zero,607
    9744:	00009840 	call	984 <__alt_mem_onchip_memory2_0-0x767c>
    9748:	0000986c 	andhi	zero,zero,609
    974c:	00009888 	cmpgei	zero,zero,610
    9750:	000098a8 	cmpgeui	zero,zero,610
    9754:	000098c8 	cmpgei	zero,zero,611
    9758:	000098e8 	cmpgeui	zero,zero,611
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
    975c:	e0bffb17 	ldw	r2,-20(fp)
    9760:	10800517 	ldw	r2,20(r2)
    9764:	1080100c 	andi	r2,r2,64
    9768:	1004c03a 	cmpne	r2,r2,zero
    976c:	10000f1e 	bne	r2,zero,97ac <alt_avalon_dma_ioctl+0x10c>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
    9770:	e0bffb17 	ldw	r2,-20(fp)
    9774:	10800017 	ldw	r2,0(r2)
    9778:	10800104 	addi	r2,r2,4
    977c:	e0fffd17 	ldw	r3,-12(fp)
    9780:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
    9784:	e0bffb17 	ldw	r2,-20(fp)
    9788:	10800517 	ldw	r2,20(r2)
    978c:	10c00814 	ori	r3,r2,32
    9790:	e0bffb17 	ldw	r2,-20(fp)
    9794:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
    9798:	e0fffb17 	ldw	r3,-20(fp)
    979c:	00800074 	movhi	r2,1
    97a0:	10a57e04 	addi	r2,r2,-27144
    97a4:	18800715 	stw	r2,28(r3)
    97a8:	00005906 	br	9910 <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
    97ac:	00bffec4 	movi	r2,-5
    97b0:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
    97b4:	00005606 	br	9910 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
    97b8:	e0bffb17 	ldw	r2,-20(fp)
    97bc:	10c00517 	ldw	r3,20(r2)
    97c0:	00bff7c4 	movi	r2,-33
    97c4:	1886703a 	and	r3,r3,r2
    97c8:	e0bffb17 	ldw	r2,-20(fp)
    97cc:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
    97d0:	e0fffb17 	ldw	r3,-20(fp)
    97d4:	00800074 	movhi	r2,1
    97d8:	10a50c04 	addi	r2,r2,-27600
    97dc:	18800715 	stw	r2,28(r3)
    break;
    97e0:	00004b06 	br	9910 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
    97e4:	e0bffb17 	ldw	r2,-20(fp)
    97e8:	10800517 	ldw	r2,20(r2)
    97ec:	1080080c 	andi	r2,r2,32
    97f0:	1004c03a 	cmpne	r2,r2,zero
    97f4:	10000f1e 	bne	r2,zero,9834 <alt_avalon_dma_ioctl+0x194>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
    97f8:	e0bffb17 	ldw	r2,-20(fp)
    97fc:	10800017 	ldw	r2,0(r2)
    9800:	10800204 	addi	r2,r2,8
    9804:	e0fffd17 	ldw	r3,-12(fp)
    9808:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
    980c:	e0bffb17 	ldw	r2,-20(fp)
    9810:	10800517 	ldw	r2,20(r2)
    9814:	10c01014 	ori	r3,r2,64
    9818:	e0bffb17 	ldw	r2,-20(fp)
    981c:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
    9820:	e0fffb17 	ldw	r3,-20(fp)
    9824:	00800074 	movhi	r2,1
    9828:	10a55404 	addi	r2,r2,-27312
    982c:	18800715 	stw	r2,28(r3)
    9830:	00003706 	br	9910 <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
    9834:	00bffec4 	movi	r2,-5
    9838:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
    983c:	00003406 	br	9910 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
    9840:	e0bffb17 	ldw	r2,-20(fp)
    9844:	10c00517 	ldw	r3,20(r2)
    9848:	00bfefc4 	movi	r2,-65
    984c:	1886703a 	and	r3,r3,r2
    9850:	e0bffb17 	ldw	r2,-20(fp)
    9854:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
    9858:	e0fffb17 	ldw	r3,-20(fp)
    985c:	00800074 	movhi	r2,1
    9860:	10a50c04 	addi	r2,r2,-27600
    9864:	18800715 	stw	r2,28(r3)
    break;
    9868:	00002906 	br	9910 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    986c:	e0bffb17 	ldw	r2,-20(fp)
    9870:	10c00517 	ldw	r3,20(r2)
    9874:	00bffc04 	movi	r2,-16
    9878:	1886703a 	and	r3,r3,r2
    987c:	e0bffb17 	ldw	r2,-20(fp)
    9880:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
    9884:	00002206 	br	9910 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    9888:	e0bffb17 	ldw	r2,-20(fp)
    988c:	10c00517 	ldw	r3,20(r2)
    9890:	00bffc04 	movi	r2,-16
    9894:	1884703a 	and	r2,r3,r2
    9898:	10c00054 	ori	r3,r2,1
    989c:	e0bffb17 	ldw	r2,-20(fp)
    98a0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
    98a4:	00001a06 	br	9910 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    98a8:	e0bffb17 	ldw	r2,-20(fp)
    98ac:	10c00517 	ldw	r3,20(r2)
    98b0:	00bffc04 	movi	r2,-16
    98b4:	1884703a 	and	r2,r3,r2
    98b8:	10c000d4 	ori	r3,r2,3
    98bc:	e0bffb17 	ldw	r2,-20(fp)
    98c0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
    98c4:	00001206 	br	9910 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    98c8:	e0bffb17 	ldw	r2,-20(fp)
    98cc:	10c00517 	ldw	r3,20(r2)
    98d0:	00bffc04 	movi	r2,-16
    98d4:	1884703a 	and	r2,r3,r2
    98d8:	10c001d4 	ori	r3,r2,7
    98dc:	e0bffb17 	ldw	r2,-20(fp)
    98e0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
    98e4:	00000a06 	br	9910 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    98e8:	e0bffb17 	ldw	r2,-20(fp)
    98ec:	10c00517 	ldw	r3,20(r2)
    98f0:	00bffc04 	movi	r2,-16
    98f4:	1884703a 	and	r2,r3,r2
    98f8:	10c003d4 	ori	r3,r2,15
    98fc:	e0bffb17 	ldw	r2,-20(fp)
    9900:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
    9904:	00000206 	br	9910 <alt_avalon_dma_ioctl+0x270>
  default:
    status = -ENOTTY;
    9908:	00bff9c4 	movi	r2,-25
    990c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (!status)
    9910:	e0bffa17 	ldw	r2,-24(fp)
    9914:	1004c03a 	cmpne	r2,r2,zero
    9918:	1000431e 	bne	r2,zero,9a28 <alt_avalon_dma_ioctl+0x388>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
    991c:	e0bffb17 	ldw	r2,-20(fp)
    9920:	10800517 	ldw	r2,20(r2)
    9924:	108003cc 	andi	r2,r2,15
    9928:	e0bffe15 	stw	r2,-8(fp)
    992c:	e0fffe17 	ldw	r3,-8(fp)
    9930:	18800060 	cmpeqi	r2,r3,1
    9934:	10000d1e 	bne	r2,zero,996c <alt_avalon_dma_ioctl+0x2cc>
    9938:	e0fffe17 	ldw	r3,-8(fp)
    993c:	18800070 	cmpltui	r2,r3,1
    9940:	1000071e 	bne	r2,zero,9960 <alt_avalon_dma_ioctl+0x2c0>
    9944:	e0fffe17 	ldw	r3,-8(fp)
    9948:	188000e0 	cmpeqi	r2,r3,3
    994c:	10000a1e 	bne	r2,zero,9978 <alt_avalon_dma_ioctl+0x2d8>
    9950:	e0fffe17 	ldw	r3,-8(fp)
    9954:	188001e0 	cmpeqi	r2,r3,7
    9958:	10000a1e 	bne	r2,zero,9984 <alt_avalon_dma_ioctl+0x2e4>
    995c:	00000c06 	br	9990 <alt_avalon_dma_ioctl+0x2f0>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
    9960:	00800044 	movi	r2,1
    9964:	e0bff915 	stw	r2,-28(fp)
       break;
    9968:	00000b06 	br	9998 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
    996c:	00800084 	movi	r2,2
    9970:	e0bff915 	stw	r2,-28(fp)
       break;
    9974:	00000806 	br	9998 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
    9978:	00800104 	movi	r2,4
    997c:	e0bff915 	stw	r2,-28(fp)
       break;
    9980:	00000506 	br	9998 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
    9984:	00810004 	movi	r2,1024
    9988:	e0bff915 	stw	r2,-28(fp)
       break;
    998c:	00000206 	br	9998 <alt_avalon_dma_ioctl+0x2f8>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
    9990:	00820004 	movi	r2,2048
    9994:	e0bff915 	stw	r2,-28(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
    9998:	e0bffb17 	ldw	r2,-20(fp)
    999c:	10800517 	ldw	r2,20(r2)
    99a0:	1080080c 	andi	r2,r2,32
    99a4:	1005003a 	cmpeq	r2,r2,zero
    99a8:	1000091e 	bne	r2,zero,99d0 <alt_avalon_dma_ioctl+0x330>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    99ac:	e0bffb17 	ldw	r2,-20(fp)
    99b0:	10800017 	ldw	r2,0(r2)
    99b4:	11000604 	addi	r4,r2,24
    99b8:	e0bff917 	ldw	r2,-28(fp)
    99bc:	10807e14 	ori	r2,r2,504
    99c0:	1007883a 	mov	r3,r2
    99c4:	2005883a 	mov	r2,r4
    99c8:	10c00035 	stwio	r3,0(r2)
    99cc:	00001606 	br	9a28 <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
    99d0:	e0bffb17 	ldw	r2,-20(fp)
    99d4:	10800517 	ldw	r2,20(r2)
    99d8:	1080100c 	andi	r2,r2,64
    99dc:	1005003a 	cmpeq	r2,r2,zero
    99e0:	1000091e 	bne	r2,zero,9a08 <alt_avalon_dma_ioctl+0x368>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    99e4:	e0bffb17 	ldw	r2,-20(fp)
    99e8:	10800017 	ldw	r2,0(r2)
    99ec:	11000604 	addi	r4,r2,24
    99f0:	e0bff917 	ldw	r2,-28(fp)
    99f4:	1080be14 	ori	r2,r2,760
    99f8:	1007883a 	mov	r3,r2
    99fc:	2005883a 	mov	r2,r4
    9a00:	10c00035 	stwio	r3,0(r2)
    9a04:	00000806 	br	9a28 <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    9a08:	e0bffb17 	ldw	r2,-20(fp)
    9a0c:	10800017 	ldw	r2,0(r2)
    9a10:	11000604 	addi	r4,r2,24
    9a14:	e0bff917 	ldw	r2,-28(fp)
    9a18:	10803e14 	ori	r2,r2,248
    9a1c:	1007883a 	mov	r3,r2
    9a20:	2005883a 	mov	r2,r4
    9a24:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
    9a28:	e0bffa17 	ldw	r2,-24(fp)
    9a2c:	e0bfff15 	stw	r2,-4(fp)
    9a30:	e0bfff17 	ldw	r2,-4(fp)
}
    9a34:	e037883a 	mov	sp,fp
    9a38:	df000017 	ldw	fp,0(sp)
    9a3c:	dec00104 	addi	sp,sp,4
    9a40:	f800283a 	ret

00009a44 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
    9a44:	defffb04 	addi	sp,sp,-20
    9a48:	dfc00415 	stw	ra,16(sp)
    9a4c:	df000315 	stw	fp,12(sp)
    9a50:	df000304 	addi	fp,sp,12
    9a54:	e13ffd15 	stw	r4,-12(fp)
    9a58:	e17ffe15 	stw	r5,-8(fp)
    9a5c:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
    9a60:	e0bffd17 	ldw	r2,-12(fp)
    9a64:	11000617 	ldw	r4,24(r2)
    9a68:	e17ffe17 	ldw	r5,-8(fp)
    9a6c:	e1bfff17 	ldw	r6,-4(fp)
    9a70:	00096a00 	call	96a0 <alt_avalon_dma_ioctl>
             req,
             arg);
}
    9a74:	e037883a 	mov	sp,fp
    9a78:	dfc00117 	ldw	ra,4(sp)
    9a7c:	df000017 	ldw	fp,0(sp)
    9a80:	dec00204 	addi	sp,sp,8
    9a84:	f800283a 	ret

00009a88 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
    9a88:	defffb04 	addi	sp,sp,-20
    9a8c:	dfc00415 	stw	ra,16(sp)
    9a90:	df000315 	stw	fp,12(sp)
    9a94:	df000304 	addi	fp,sp,12
    9a98:	e13ffd15 	stw	r4,-12(fp)
    9a9c:	e17ffe15 	stw	r5,-8(fp)
    9aa0:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
    9aa4:	e0bffd17 	ldw	r2,-12(fp)
    9aa8:	11000617 	ldw	r4,24(r2)
    9aac:	e17ffe17 	ldw	r5,-8(fp)
    9ab0:	e1bfff17 	ldw	r6,-4(fp)
    9ab4:	00096a00 	call	96a0 <alt_avalon_dma_ioctl>
             req,
             arg);
}
    9ab8:	e037883a 	mov	sp,fp
    9abc:	dfc00117 	ldw	ra,4(sp)
    9ac0:	df000017 	ldw	fp,0(sp)
    9ac4:	dec00204 	addi	sp,sp,8
    9ac8:	f800283a 	ret

00009acc <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
    9acc:	defff304 	addi	sp,sp,-52
    9ad0:	dfc00c15 	stw	ra,48(sp)
    9ad4:	df000b15 	stw	fp,44(sp)
    9ad8:	df000b04 	addi	fp,sp,44
    9adc:	e13ffb15 	stw	r4,-20(fp)
    9ae0:	e17ffc15 	stw	r5,-16(fp)
    9ae4:	e1bffd15 	stw	r6,-12(fp)
    9ae8:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
    9aec:	e0bffb17 	ldw	r2,-20(fp)
    9af0:	10800617 	ldw	r2,24(r2)
    9af4:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
    9af8:	e0bff517 	ldw	r2,-44(fp)
    9afc:	10800517 	ldw	r2,20(r2)
    9b00:	108003cc 	andi	r2,r2,15
    9b04:	e0bff615 	stw	r2,-40(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
    9b08:	e0bffc17 	ldw	r2,-16(fp)
    9b0c:	1007883a 	mov	r3,r2
    9b10:	e0bff617 	ldw	r2,-40(fp)
    9b14:	1884703a 	and	r2,r3,r2
    9b18:	1004c03a 	cmpne	r2,r2,zero
    9b1c:	1000091e 	bne	r2,zero,9b44 <alt_avalon_dma_prepare+0x78>
    9b20:	e0fffd17 	ldw	r3,-12(fp)
    9b24:	e0bff617 	ldw	r2,-40(fp)
    9b28:	1884703a 	and	r2,r3,r2
    9b2c:	1004c03a 	cmpne	r2,r2,zero
    9b30:	1000041e 	bne	r2,zero,9b44 <alt_avalon_dma_prepare+0x78>
    9b34:	e0bff517 	ldw	r2,-44(fp)
    9b38:	10c00617 	ldw	r3,24(r2)
    9b3c:	e0bffd17 	ldw	r2,-12(fp)
    9b40:	1880032e 	bgeu	r3,r2,9b50 <alt_avalon_dma_prepare+0x84>
     (len > priv->max_length))
  {
    return -EINVAL;
    9b44:	00bffa84 	movi	r2,-22
    9b48:	e0bfff15 	stw	r2,-4(fp)
    9b4c:	00002e06 	br	9c08 <alt_avalon_dma_prepare+0x13c>
  }

  start = priv->rx_start;
    9b50:	e0bff517 	ldw	r2,-44(fp)
    9b54:	10800317 	ldw	r2,12(r2)
    9b58:	e0bff915 	stw	r2,-28(fp)
  end   = priv->rx_end;
    9b5c:	e0bff517 	ldw	r2,-44(fp)
    9b60:	10800417 	ldw	r2,16(r2)
    9b64:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->rx_buf[end];
    9b68:	e0bff517 	ldw	r2,-44(fp)
    9b6c:	10c01904 	addi	r3,r2,100
    9b70:	e0bff817 	ldw	r2,-32(fp)
    9b74:	1004913a 	slli	r2,r2,4
    9b78:	1885883a 	add	r2,r3,r2
    9b7c:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    9b80:	e0bff817 	ldw	r2,-32(fp)
    9b84:	10800044 	addi	r2,r2,1
    9b88:	108000cc 	andi	r2,r2,3
    9b8c:	e0bff715 	stw	r2,-36(fp)

  if (next == start)
    9b90:	e0fff717 	ldw	r3,-36(fp)
    9b94:	e0bff917 	ldw	r2,-28(fp)
    9b98:	1880031e 	bne	r3,r2,9ba8 <alt_avalon_dma_prepare+0xdc>
  {
    return -ENOSPC;
    9b9c:	00bff904 	movi	r2,-28
    9ba0:	e0bfff15 	stw	r2,-4(fp)
    9ba4:	00001806 	br	9c08 <alt_avalon_dma_prepare+0x13c>
  }

  slot->data   = data;
    9ba8:	e0fffa17 	ldw	r3,-24(fp)
    9bac:	e0bffc17 	ldw	r2,-16(fp)
    9bb0:	18800015 	stw	r2,0(r3)
  slot->len    = len;
    9bb4:	e0fffa17 	ldw	r3,-24(fp)
    9bb8:	e0bffd17 	ldw	r2,-12(fp)
    9bbc:	18800115 	stw	r2,4(r3)
  slot->done   = done;
    9bc0:	e0fffa17 	ldw	r3,-24(fp)
    9bc4:	e0bffe17 	ldw	r2,-8(fp)
    9bc8:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
    9bcc:	e0fffa17 	ldw	r3,-24(fp)
    9bd0:	e0800217 	ldw	r2,8(fp)
    9bd4:	18800315 	stw	r2,12(r3)

  priv->rx_end = next;
    9bd8:	e0fff517 	ldw	r3,-44(fp)
    9bdc:	e0bff717 	ldw	r2,-36(fp)
    9be0:	18800415 	stw	r2,16(r3)

  if (!priv->active)
    9be4:	e0bff517 	ldw	r2,-44(fp)
    9be8:	10800817 	ldw	r2,32(r2)
    9bec:	1004c03a 	cmpne	r2,r2,zero
    9bf0:	1000041e 	bne	r2,zero,9c04 <alt_avalon_dma_prepare+0x138>
  {
    priv->launch (priv);
    9bf4:	e0bff517 	ldw	r2,-44(fp)
    9bf8:	10800717 	ldw	r2,28(r2)
    9bfc:	e13ff517 	ldw	r4,-44(fp)
    9c00:	103ee83a 	callr	r2
  }

  return 0;
    9c04:	e03fff15 	stw	zero,-4(fp)
    9c08:	e0bfff17 	ldw	r2,-4(fp)
}
    9c0c:	e037883a 	mov	sp,fp
    9c10:	dfc00117 	ldw	ra,4(sp)
    9c14:	df000017 	ldw	fp,0(sp)
    9c18:	dec00204 	addi	sp,sp,8
    9c1c:	f800283a 	ret

00009c20 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
    9c20:	defffa04 	addi	sp,sp,-24
    9c24:	df000515 	stw	fp,20(sp)
    9c28:	df000504 	addi	fp,sp,20
    9c2c:	e13ffe15 	stw	r4,-8(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
    9c30:	e0bffe17 	ldw	r2,-8(fp)
    9c34:	10800617 	ldw	r2,24(r2)
    9c38:	e0bffd15 	stw	r2,-12(fp)

  start = priv->tx_start;
    9c3c:	e0bffd17 	ldw	r2,-12(fp)
    9c40:	10800117 	ldw	r2,4(r2)
    9c44:	e0bffc15 	stw	r2,-16(fp)
  end   = priv->tx_end;
    9c48:	e0bffd17 	ldw	r2,-12(fp)
    9c4c:	10800217 	ldw	r2,8(r2)
    9c50:	e0bffb15 	stw	r2,-20(fp)

  return (start > end) ? start - end - 1 :
    9c54:	e0fffc17 	ldw	r3,-16(fp)
    9c58:	e0bffb17 	ldw	r2,-20(fp)
    9c5c:	10c0062e 	bgeu	r2,r3,9c78 <alt_avalon_dma_space+0x58>
    9c60:	e0fffc17 	ldw	r3,-16(fp)
    9c64:	e0bffb17 	ldw	r2,-20(fp)
    9c68:	1885c83a 	sub	r2,r3,r2
    9c6c:	10bfffc4 	addi	r2,r2,-1
    9c70:	e0bfff15 	stw	r2,-4(fp)
    9c74:	00000506 	br	9c8c <alt_avalon_dma_space+0x6c>
    9c78:	e0fffc17 	ldw	r3,-16(fp)
    9c7c:	e0bffb17 	ldw	r2,-20(fp)
    9c80:	1885c83a 	sub	r2,r3,r2
    9c84:	108000c4 	addi	r2,r2,3
    9c88:	e0bfff15 	stw	r2,-4(fp)
    9c8c:	e0bfff17 	ldw	r2,-4(fp)
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
}
    9c90:	e037883a 	mov	sp,fp
    9c94:	df000017 	ldw	fp,0(sp)
    9c98:	dec00104 	addi	sp,sp,4
    9c9c:	f800283a 	ret

00009ca0 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
    9ca0:	defff304 	addi	sp,sp,-52
    9ca4:	dfc00c15 	stw	ra,48(sp)
    9ca8:	df000b15 	stw	fp,44(sp)
    9cac:	df000b04 	addi	fp,sp,44
    9cb0:	e13ffb15 	stw	r4,-20(fp)
    9cb4:	e17ffc15 	stw	r5,-16(fp)
    9cb8:	e1bffd15 	stw	r6,-12(fp)
    9cbc:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
    9cc0:	e0bffb17 	ldw	r2,-20(fp)
    9cc4:	10800617 	ldw	r2,24(r2)
    9cc8:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
    9ccc:	e0bff517 	ldw	r2,-44(fp)
    9cd0:	10800517 	ldw	r2,20(r2)
    9cd4:	108003cc 	andi	r2,r2,15
    9cd8:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
    9cdc:	e0bffc17 	ldw	r2,-16(fp)
    9ce0:	1007883a 	mov	r3,r2
    9ce4:	e0bff717 	ldw	r2,-36(fp)
    9ce8:	1884703a 	and	r2,r3,r2
    9cec:	1004c03a 	cmpne	r2,r2,zero
    9cf0:	1000091e 	bne	r2,zero,9d18 <alt_avalon_dma_send+0x78>
    9cf4:	e0fffd17 	ldw	r3,-12(fp)
    9cf8:	e0bff717 	ldw	r2,-36(fp)
    9cfc:	1884703a 	and	r2,r3,r2
    9d00:	1004c03a 	cmpne	r2,r2,zero
    9d04:	1000041e 	bne	r2,zero,9d18 <alt_avalon_dma_send+0x78>
    9d08:	e0bff517 	ldw	r2,-44(fp)
    9d0c:	10c00617 	ldw	r3,24(r2)
    9d10:	e0bffd17 	ldw	r2,-12(fp)
    9d14:	1880032e 	bgeu	r3,r2,9d24 <alt_avalon_dma_send+0x84>
        (len & align_mask)            ||
        (len > priv->max_length))
  {
    return -EINVAL;
    9d18:	00bffa84 	movi	r2,-22
    9d1c:	e0bfff15 	stw	r2,-4(fp)
    9d20:	00002e06 	br	9ddc <alt_avalon_dma_send+0x13c>
  }

  start = priv->tx_start;
    9d24:	e0bff517 	ldw	r2,-44(fp)
    9d28:	10800117 	ldw	r2,4(r2)
    9d2c:	e0bff915 	stw	r2,-28(fp)
  end   = priv->tx_end;
    9d30:	e0bff517 	ldw	r2,-44(fp)
    9d34:	10800217 	ldw	r2,8(r2)
    9d38:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->tx_buf[end];
    9d3c:	e0bff517 	ldw	r2,-44(fp)
    9d40:	10c00904 	addi	r3,r2,36
    9d44:	e0bff817 	ldw	r2,-32(fp)
    9d48:	1004913a 	slli	r2,r2,4
    9d4c:	1885883a 	add	r2,r3,r2
    9d50:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    9d54:	e0bff817 	ldw	r2,-32(fp)
    9d58:	10800044 	addi	r2,r2,1
    9d5c:	108000cc 	andi	r2,r2,3
    9d60:	e0bff615 	stw	r2,-40(fp)

  if (next == start)
    9d64:	e0fff617 	ldw	r3,-40(fp)
    9d68:	e0bff917 	ldw	r2,-28(fp)
    9d6c:	1880031e 	bne	r3,r2,9d7c <alt_avalon_dma_send+0xdc>
  {
    return -ENOSPC;
    9d70:	00bff904 	movi	r2,-28
    9d74:	e0bfff15 	stw	r2,-4(fp)
    9d78:	00001806 	br	9ddc <alt_avalon_dma_send+0x13c>
  }

  /* Fill in the descriptor */

  slot->from   = from;
    9d7c:	e0fffa17 	ldw	r3,-24(fp)
    9d80:	e0bffc17 	ldw	r2,-16(fp)
    9d84:	18800015 	stw	r2,0(r3)
  slot->len    = len;
    9d88:	e0fffa17 	ldw	r3,-24(fp)
    9d8c:	e0bffd17 	ldw	r2,-12(fp)
    9d90:	18800115 	stw	r2,4(r3)
  slot->done   = done;
    9d94:	e0fffa17 	ldw	r3,-24(fp)
    9d98:	e0bffe17 	ldw	r2,-8(fp)
    9d9c:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
    9da0:	e0fffa17 	ldw	r3,-24(fp)
    9da4:	e0800217 	ldw	r2,8(fp)
    9da8:	18800315 	stw	r2,12(r3)

  priv->tx_end = next;
    9dac:	e0fff517 	ldw	r3,-44(fp)
    9db0:	e0bff617 	ldw	r2,-40(fp)
    9db4:	18800215 	stw	r2,8(r3)

  if (!priv->active)
    9db8:	e0bff517 	ldw	r2,-44(fp)
    9dbc:	10800817 	ldw	r2,32(r2)
    9dc0:	1004c03a 	cmpne	r2,r2,zero
    9dc4:	1000041e 	bne	r2,zero,9dd8 <alt_avalon_dma_send+0x138>
  {
    priv->launch (priv);
    9dc8:	e0bff517 	ldw	r2,-44(fp)
    9dcc:	10800717 	ldw	r2,28(r2)
    9dd0:	e13ff517 	ldw	r4,-44(fp)
    9dd4:	103ee83a 	callr	r2
  }

  return 0;
    9dd8:	e03fff15 	stw	zero,-4(fp)
    9ddc:	e0bfff17 	ldw	r2,-4(fp)
}
    9de0:	e037883a 	mov	sp,fp
    9de4:	dfc00117 	ldw	ra,4(sp)
    9de8:	df000017 	ldw	fp,0(sp)
    9dec:	dec00204 	addi	sp,sp,8
    9df0:	f800283a 	ret

00009df4 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
    9df4:	defff104 	addi	sp,sp,-60
    9df8:	dfc00e15 	stw	ra,56(sp)
    9dfc:	df000d15 	stw	fp,52(sp)
    9e00:	df000d04 	addi	fp,sp,52
    9e04:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
    9e08:	e0bfff17 	ldw	r2,-4(fp)
    9e0c:	e0bffe15 	stw	r2,-8(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
    9e10:	e0bffe17 	ldw	r2,-8(fp)
    9e14:	10800517 	ldw	r2,20(r2)
    9e18:	1080080c 	andi	r2,r2,32
    9e1c:	e0bff915 	stw	r2,-28(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
    9e20:	e0bffe17 	ldw	r2,-8(fp)
    9e24:	10800517 	ldw	r2,20(r2)
    9e28:	1080100c 	andi	r2,r2,64
    9e2c:	e0bff815 	stw	r2,-32(fp)

  tx_start = priv->tx_start;
    9e30:	e0bffe17 	ldw	r2,-8(fp)
    9e34:	10800117 	ldw	r2,4(r2)
    9e38:	e0bffb15 	stw	r2,-20(fp)
  rx_start = priv->rx_start;
    9e3c:	e0bffe17 	ldw	r2,-8(fp)
    9e40:	10800317 	ldw	r2,12(r2)
    9e44:	e0bffa15 	stw	r2,-24(fp)

  tx_slot = &priv->tx_buf[tx_start];
    9e48:	e0bffe17 	ldw	r2,-8(fp)
    9e4c:	10c00904 	addi	r3,r2,36
    9e50:	e0bffb17 	ldw	r2,-20(fp)
    9e54:	1004913a 	slli	r2,r2,4
    9e58:	1885883a 	add	r2,r3,r2
    9e5c:	e0bffd15 	stw	r2,-12(fp)
  rx_slot = &priv->rx_buf[rx_start];
    9e60:	e0bffe17 	ldw	r2,-8(fp)
    9e64:	10c01904 	addi	r3,r2,100
    9e68:	e0bffa17 	ldw	r2,-24(fp)
    9e6c:	1004913a 	slli	r2,r2,4
    9e70:	1885883a 	add	r2,r3,r2
    9e74:	e0bffc15 	stw	r2,-16(fp)

  /* Increment the descriptors */

  if (!stream_tx)
    9e78:	e0bff917 	ldw	r2,-28(fp)
    9e7c:	1004c03a 	cmpne	r2,r2,zero
    9e80:	1000051e 	bne	r2,zero,9e98 <alt_avalon_dma_irq+0xa4>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    9e84:	e0bffb17 	ldw	r2,-20(fp)
    9e88:	10800044 	addi	r2,r2,1
    9e8c:	10c000cc 	andi	r3,r2,3
    9e90:	e0bffe17 	ldw	r2,-8(fp)
    9e94:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
    9e98:	e0bff817 	ldw	r2,-32(fp)
    9e9c:	1004c03a 	cmpne	r2,r2,zero
    9ea0:	1000051e 	bne	r2,zero,9eb8 <alt_avalon_dma_irq+0xc4>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    9ea4:	e0bffa17 	ldw	r2,-24(fp)
    9ea8:	10800044 	addi	r2,r2,1
    9eac:	10c000cc 	andi	r3,r2,3
    9eb0:	e0bffe17 	ldw	r2,-8(fp)
    9eb4:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
    9eb8:	e0bffe17 	ldw	r2,-8(fp)
    9ebc:	10800017 	ldw	r2,0(r2)
    9ec0:	10000035 	stwio	zero,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
    9ec4:	e0bffe17 	ldw	r2,-8(fp)
    9ec8:	10800017 	ldw	r2,0(r2)
    9ecc:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
    9ed0:	e0bffe17 	ldw	r2,-8(fp)
    9ed4:	10800717 	ldw	r2,28(r2)
    9ed8:	e13ffe17 	ldw	r4,-8(fp)
    9edc:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
    9ee0:	e0bff917 	ldw	r2,-28(fp)
    9ee4:	1004c03a 	cmpne	r2,r2,zero
    9ee8:	1000151e 	bne	r2,zero,9f40 <alt_avalon_dma_irq+0x14c>
    9eec:	e0bffd17 	ldw	r2,-12(fp)
    9ef0:	10800217 	ldw	r2,8(r2)
    9ef4:	1005003a 	cmpeq	r2,r2,zero
    9ef8:	1000111e 	bne	r2,zero,9f40 <alt_avalon_dma_irq+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9efc:	0005303a 	rdctl	r2,status
    9f00:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f04:	e0fff617 	ldw	r3,-40(fp)
    9f08:	00bfff84 	movi	r2,-2
    9f0c:	1884703a 	and	r2,r3,r2
    9f10:	1001703a 	wrctl	status,r2
  
  return context;
    9f14:	e0bff617 	ldw	r2,-40(fp)
  {
    cpu_sr = alt_irq_disable_all();
    9f18:	e0bff715 	stw	r2,-36(fp)
    tx_slot->done (tx_slot->handle);
    9f1c:	e0bffd17 	ldw	r2,-12(fp)
    9f20:	10c00217 	ldw	r3,8(r2)
    9f24:	e0bffd17 	ldw	r2,-12(fp)
    9f28:	11000317 	ldw	r4,12(r2)
    9f2c:	183ee83a 	callr	r3
    9f30:	e0bff717 	ldw	r2,-36(fp)
    9f34:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f38:	e0bff517 	ldw	r2,-44(fp)
    9f3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
    9f40:	e0bff817 	ldw	r2,-32(fp)
    9f44:	1004c03a 	cmpne	r2,r2,zero
    9f48:	1000171e 	bne	r2,zero,9fa8 <alt_avalon_dma_irq+0x1b4>
    9f4c:	e0bffc17 	ldw	r2,-16(fp)
    9f50:	10800217 	ldw	r2,8(r2)
    9f54:	1005003a 	cmpeq	r2,r2,zero
    9f58:	1000131e 	bne	r2,zero,9fa8 <alt_avalon_dma_irq+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f5c:	0005303a 	rdctl	r2,status
    9f60:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f64:	e0fff417 	ldw	r3,-48(fp)
    9f68:	00bfff84 	movi	r2,-2
    9f6c:	1884703a 	and	r2,r3,r2
    9f70:	1001703a 	wrctl	status,r2
  
  return context;
    9f74:	e0bff417 	ldw	r2,-48(fp)
  {
    cpu_sr = alt_irq_disable_all();
    9f78:	e0bff715 	stw	r2,-36(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
    9f7c:	e0bffc17 	ldw	r2,-16(fp)
    9f80:	10c00217 	ldw	r3,8(r2)
    9f84:	e0bffc17 	ldw	r2,-16(fp)
    9f88:	11000317 	ldw	r4,12(r2)
    9f8c:	e0bffc17 	ldw	r2,-16(fp)
    9f90:	11400017 	ldw	r5,0(r2)
    9f94:	183ee83a 	callr	r3
    9f98:	e0bff717 	ldw	r2,-36(fp)
    9f9c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9fa0:	e0bff317 	ldw	r2,-52(fp)
    9fa4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
    9fa8:	e037883a 	mov	sp,fp
    9fac:	dfc00117 	ldw	ra,4(sp)
    9fb0:	df000017 	ldw	fp,0(sp)
    9fb4:	dec00204 	addi	sp,sp,8
    9fb8:	f800283a 	ret

00009fbc <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
    9fbc:	defff904 	addi	sp,sp,-28
    9fc0:	dfc00615 	stw	ra,24(sp)
    9fc4:	df000515 	stw	fp,20(sp)
    9fc8:	df000504 	addi	fp,sp,20
    9fcc:	e13ffc15 	stw	r4,-16(fp)
    9fd0:	e17ffd15 	stw	r5,-12(fp)
    9fd4:	e1bffe15 	stw	r6,-8(fp)
    9fd8:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
    9fdc:	e0bffe17 	ldw	r2,-8(fp)
    9fe0:	10800604 	addi	r2,r2,24
    9fe4:	1007883a 	mov	r3,r2
    9fe8:	00840004 	movi	r2,4096
    9fec:	18800035 	stwio	r2,0(r3)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
    9ff0:	e0bffe17 	ldw	r2,-8(fp)
    9ff4:	10800604 	addi	r2,r2,24
    9ff8:	1007883a 	mov	r3,r2
    9ffc:	00840004 	movi	r2,4096
    a000:	18800035 	stwio	r2,0(r3)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
    a004:	e0bffe17 	ldw	r2,-8(fp)
    a008:	10800604 	addi	r2,r2,24
    a00c:	1007883a 	mov	r3,r2
    a010:	00803f04 	movi	r2,252
    a014:	18800035 	stwio	r2,0(r3)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
    a018:	e0bffe17 	ldw	r2,-8(fp)
    a01c:	10000035 	stwio	zero,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
    a020:	e0bffc17 	ldw	r2,-16(fp)
    a024:	11c00617 	ldw	r7,24(r2)
    a028:	d8000015 	stw	zero,0(sp)
    a02c:	e13fff17 	ldw	r4,-4(fp)
    a030:	e1400217 	ldw	r5,8(fp)
    a034:	01800074 	movhi	r6,1
    a038:	31a77d04 	addi	r6,r6,-25100
    a03c:	0008dc40 	call	8dc4 <alt_ic_isr_register>
    a040:	1004803a 	cmplt	r2,r2,zero
    a044:	1000041e 	bne	r2,zero,a058 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
    a048:	e13ffc17 	ldw	r4,-16(fp)
    a04c:	000a06c0 	call	a06c <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
    a050:	e13ffd17 	ldw	r4,-12(fp)
    a054:	000a0a40 	call	a0a4 <alt_dma_rxchan_reg>
  }
}
    a058:	e037883a 	mov	sp,fp
    a05c:	dfc00117 	ldw	ra,4(sp)
    a060:	df000017 	ldw	fp,0(sp)
    a064:	dec00204 	addi	sp,sp,8
    a068:	f800283a 	ret

0000a06c <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
    a06c:	defffd04 	addi	sp,sp,-12
    a070:	dfc00215 	stw	ra,8(sp)
    a074:	df000115 	stw	fp,4(sp)
    a078:	df000104 	addi	fp,sp,4
    a07c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
    a080:	e13fff17 	ldw	r4,-4(fp)
    a084:	01400074 	movhi	r5,1
    a088:	296df004 	addi	r5,r5,-18496
    a08c:	000a4dc0 	call	a4dc <alt_dev_llist_insert>
}
    a090:	e037883a 	mov	sp,fp
    a094:	dfc00117 	ldw	ra,4(sp)
    a098:	df000017 	ldw	fp,0(sp)
    a09c:	dec00204 	addi	sp,sp,8
    a0a0:	f800283a 	ret

0000a0a4 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
    a0a4:	defffd04 	addi	sp,sp,-12
    a0a8:	dfc00215 	stw	ra,8(sp)
    a0ac:	df000115 	stw	fp,4(sp)
    a0b0:	df000104 	addi	fp,sp,4
    a0b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
    a0b8:	e13fff17 	ldw	r4,-4(fp)
    a0bc:	01400074 	movhi	r5,1
    a0c0:	296dee04 	addi	r5,r5,-18504
    a0c4:	000a4dc0 	call	a4dc <alt_dev_llist_insert>
}
    a0c8:	e037883a 	mov	sp,fp
    a0cc:	dfc00117 	ldw	ra,4(sp)
    a0d0:	df000017 	ldw	fp,0(sp)
    a0d4:	dec00204 	addi	sp,sp,8
    a0d8:	f800283a 	ret

0000a0dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a0dc:	defffa04 	addi	sp,sp,-24
    a0e0:	dfc00515 	stw	ra,20(sp)
    a0e4:	df000415 	stw	fp,16(sp)
    a0e8:	df000404 	addi	fp,sp,16
    a0ec:	e13ffd15 	stw	r4,-12(fp)
    a0f0:	e17ffe15 	stw	r5,-8(fp)
    a0f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a0f8:	e0bffd17 	ldw	r2,-12(fp)
    a0fc:	10800017 	ldw	r2,0(r2)
    a100:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a104:	e0bffc17 	ldw	r2,-16(fp)
    a108:	11000a04 	addi	r4,r2,40
    a10c:	e0bffd17 	ldw	r2,-12(fp)
    a110:	11c00217 	ldw	r7,8(r2)
    a114:	e17ffe17 	ldw	r5,-8(fp)
    a118:	e1bfff17 	ldw	r6,-4(fp)
    a11c:	000a18c0 	call	a18c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a120:	e037883a 	mov	sp,fp
    a124:	dfc00117 	ldw	ra,4(sp)
    a128:	df000017 	ldw	fp,0(sp)
    a12c:	dec00204 	addi	sp,sp,8
    a130:	f800283a 	ret

0000a134 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a134:	defffa04 	addi	sp,sp,-24
    a138:	dfc00515 	stw	ra,20(sp)
    a13c:	df000415 	stw	fp,16(sp)
    a140:	df000404 	addi	fp,sp,16
    a144:	e13ffd15 	stw	r4,-12(fp)
    a148:	e17ffe15 	stw	r5,-8(fp)
    a14c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a150:	e0bffd17 	ldw	r2,-12(fp)
    a154:	10800017 	ldw	r2,0(r2)
    a158:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a15c:	e0bffc17 	ldw	r2,-16(fp)
    a160:	11000a04 	addi	r4,r2,40
    a164:	e0bffd17 	ldw	r2,-12(fp)
    a168:	11c00217 	ldw	r7,8(r2)
    a16c:	e17ffe17 	ldw	r5,-8(fp)
    a170:	e1bfff17 	ldw	r6,-4(fp)
    a174:	000a2900 	call	a290 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a178:	e037883a 	mov	sp,fp
    a17c:	dfc00117 	ldw	ra,4(sp)
    a180:	df000017 	ldw	fp,0(sp)
    a184:	dec00204 	addi	sp,sp,8
    a188:	f800283a 	ret

0000a18c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    a18c:	defff604 	addi	sp,sp,-40
    a190:	df000915 	stw	fp,36(sp)
    a194:	df000904 	addi	fp,sp,36
    a198:	e13ffb15 	stw	r4,-20(fp)
    a19c:	e17ffc15 	stw	r5,-16(fp)
    a1a0:	e1bffd15 	stw	r6,-12(fp)
    a1a4:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    a1a8:	e0bffb17 	ldw	r2,-20(fp)
    a1ac:	10800017 	ldw	r2,0(r2)
    a1b0:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    a1b4:	e0bffc17 	ldw	r2,-16(fp)
    a1b8:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    a1bc:	e0bffd17 	ldw	r2,-12(fp)
    a1c0:	1007883a 	mov	r3,r2
    a1c4:	e0bffc17 	ldw	r2,-16(fp)
    a1c8:	10c5883a 	add	r2,r2,r3
    a1cc:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    a1d0:	00001606 	br	a22c <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a1d4:	e0bffa17 	ldw	r2,-24(fp)
    a1d8:	10800037 	ldwio	r2,0(r2)
    a1dc:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    a1e0:	e0bff717 	ldw	r2,-36(fp)
    a1e4:	10a0000c 	andi	r2,r2,32768
    a1e8:	1005003a 	cmpeq	r2,r2,zero
    a1ec:	1000081e 	bne	r2,zero,a210 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a1f0:	e0bff717 	ldw	r2,-36(fp)
    a1f4:	1007883a 	mov	r3,r2
    a1f8:	e0bff917 	ldw	r2,-28(fp)
    a1fc:	10c00005 	stb	r3,0(r2)
    a200:	e0bff917 	ldw	r2,-28(fp)
    a204:	10800044 	addi	r2,r2,1
    a208:	e0bff915 	stw	r2,-28(fp)
    a20c:	00000706 	br	a22c <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    a210:	e0fff917 	ldw	r3,-28(fp)
    a214:	e0bffc17 	ldw	r2,-16(fp)
    a218:	1880071e 	bne	r3,r2,a238 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    a21c:	e0bffe17 	ldw	r2,-8(fp)
    a220:	1090000c 	andi	r2,r2,16384
    a224:	1004c03a 	cmpne	r2,r2,zero
    a228:	1000031e 	bne	r2,zero,a238 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    a22c:	e0fff917 	ldw	r3,-28(fp)
    a230:	e0bff817 	ldw	r2,-32(fp)
    a234:	18bfe736 	bltu	r3,r2,a1d4 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    a238:	e0fff917 	ldw	r3,-28(fp)
    a23c:	e0bffc17 	ldw	r2,-16(fp)
    a240:	18800526 	beq	r3,r2,a258 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    a244:	e0fff917 	ldw	r3,-28(fp)
    a248:	e0bffc17 	ldw	r2,-16(fp)
    a24c:	1887c83a 	sub	r3,r3,r2
    a250:	e0ffff15 	stw	r3,-4(fp)
    a254:	00000906 	br	a27c <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    a258:	e0bffe17 	ldw	r2,-8(fp)
    a25c:	1090000c 	andi	r2,r2,16384
    a260:	1005003a 	cmpeq	r2,r2,zero
    a264:	1000031e 	bne	r2,zero,a274 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    a268:	00bffd44 	movi	r2,-11
    a26c:	e0bfff15 	stw	r2,-4(fp)
    a270:	00000206 	br	a27c <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    a274:	00bffec4 	movi	r2,-5
    a278:	e0bfff15 	stw	r2,-4(fp)
    a27c:	e0bfff17 	ldw	r2,-4(fp)
}
    a280:	e037883a 	mov	sp,fp
    a284:	df000017 	ldw	fp,0(sp)
    a288:	dec00104 	addi	sp,sp,4
    a28c:	f800283a 	ret

0000a290 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    a290:	defff904 	addi	sp,sp,-28
    a294:	df000615 	stw	fp,24(sp)
    a298:	df000604 	addi	fp,sp,24
    a29c:	e13ffc15 	stw	r4,-16(fp)
    a2a0:	e17ffd15 	stw	r5,-12(fp)
    a2a4:	e1bffe15 	stw	r6,-8(fp)
    a2a8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    a2ac:	e0bffc17 	ldw	r2,-16(fp)
    a2b0:	10800017 	ldw	r2,0(r2)
    a2b4:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    a2b8:	e0bffe17 	ldw	r2,-8(fp)
    a2bc:	1007883a 	mov	r3,r2
    a2c0:	e0bffd17 	ldw	r2,-12(fp)
    a2c4:	10c5883a 	add	r2,r2,r3
    a2c8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    a2cc:	00001106 	br	a314 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    a2d0:	e0bffb17 	ldw	r2,-20(fp)
    a2d4:	10800104 	addi	r2,r2,4
    a2d8:	10800037 	ldwio	r2,0(r2)
    a2dc:	10bfffec 	andhi	r2,r2,65535
    a2e0:	1005003a 	cmpeq	r2,r2,zero
    a2e4:	10000b1e 	bne	r2,zero,a314 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    a2e8:	e13ffb17 	ldw	r4,-20(fp)
    a2ec:	e0bffd17 	ldw	r2,-12(fp)
    a2f0:	10800003 	ldbu	r2,0(r2)
    a2f4:	10c03fcc 	andi	r3,r2,255
    a2f8:	18c0201c 	xori	r3,r3,128
    a2fc:	18ffe004 	addi	r3,r3,-128
    a300:	e0bffd17 	ldw	r2,-12(fp)
    a304:	10800044 	addi	r2,r2,1
    a308:	e0bffd15 	stw	r2,-12(fp)
    a30c:	2005883a 	mov	r2,r4
    a310:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    a314:	e0fffd17 	ldw	r3,-12(fp)
    a318:	e0bffa17 	ldw	r2,-24(fp)
    a31c:	18bfec36 	bltu	r3,r2,a2d0 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    a320:	e0bffe17 	ldw	r2,-8(fp)
}
    a324:	e037883a 	mov	sp,fp
    a328:	df000017 	ldw	fp,0(sp)
    a32c:	dec00104 	addi	sp,sp,4
    a330:	f800283a 	ret

0000a334 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a334:	defff804 	addi	sp,sp,-32
    a338:	dfc00715 	stw	ra,28(sp)
    a33c:	df000615 	stw	fp,24(sp)
    a340:	df000604 	addi	fp,sp,24
    a344:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a348:	e0bffc17 	ldw	r2,-16(fp)
    a34c:	1004803a 	cmplt	r2,r2,zero
    a350:	1000091e 	bne	r2,zero,a378 <close+0x44>
    a354:	e13ffc17 	ldw	r4,-16(fp)
    a358:	01400304 	movi	r5,12
    a35c:	0008d8c0 	call	8d8c <__mulsi3>
    a360:	1007883a 	mov	r3,r2
    a364:	00800074 	movhi	r2,1
    a368:	10ad8504 	addi	r2,r2,-18924
    a36c:	1887883a 	add	r3,r3,r2
    a370:	e0ffff15 	stw	r3,-4(fp)
    a374:	00000106 	br	a37c <close+0x48>
    a378:	e03fff15 	stw	zero,-4(fp)
    a37c:	e0bfff17 	ldw	r2,-4(fp)
    a380:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    a384:	e0bffb17 	ldw	r2,-20(fp)
    a388:	1005003a 	cmpeq	r2,r2,zero
    a38c:	10001d1e 	bne	r2,zero,a404 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a390:	e0bffb17 	ldw	r2,-20(fp)
    a394:	10800017 	ldw	r2,0(r2)
    a398:	10800417 	ldw	r2,16(r2)
    a39c:	1005003a 	cmpeq	r2,r2,zero
    a3a0:	1000071e 	bne	r2,zero,a3c0 <close+0x8c>
    a3a4:	e0bffb17 	ldw	r2,-20(fp)
    a3a8:	10800017 	ldw	r2,0(r2)
    a3ac:	10800417 	ldw	r2,16(r2)
    a3b0:	e13ffb17 	ldw	r4,-20(fp)
    a3b4:	103ee83a 	callr	r2
    a3b8:	e0bffe15 	stw	r2,-8(fp)
    a3bc:	00000106 	br	a3c4 <close+0x90>
    a3c0:	e03ffe15 	stw	zero,-8(fp)
    a3c4:	e0bffe17 	ldw	r2,-8(fp)
    a3c8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a3cc:	e13ffc17 	ldw	r4,-16(fp)
    a3d0:	000ad0c0 	call	ad0c <alt_release_fd>
    if (rval < 0)
    a3d4:	e0bffa17 	ldw	r2,-24(fp)
    a3d8:	1004403a 	cmpge	r2,r2,zero
    a3dc:	1000071e 	bne	r2,zero,a3fc <close+0xc8>
    {
      ALT_ERRNO = -rval;
    a3e0:	000a4340 	call	a434 <alt_get_errno>
    a3e4:	e0fffa17 	ldw	r3,-24(fp)
    a3e8:	00c7c83a 	sub	r3,zero,r3
    a3ec:	10c00015 	stw	r3,0(r2)
      return -1;
    a3f0:	00bfffc4 	movi	r2,-1
    a3f4:	e0bffd15 	stw	r2,-12(fp)
    a3f8:	00000806 	br	a41c <close+0xe8>
    }
    return 0;
    a3fc:	e03ffd15 	stw	zero,-12(fp)
    a400:	00000606 	br	a41c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a404:	000a4340 	call	a434 <alt_get_errno>
    a408:	1007883a 	mov	r3,r2
    a40c:	00801444 	movi	r2,81
    a410:	18800015 	stw	r2,0(r3)
    return -1;
    a414:	00bfffc4 	movi	r2,-1
    a418:	e0bffd15 	stw	r2,-12(fp)
    a41c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    a420:	e037883a 	mov	sp,fp
    a424:	dfc00117 	ldw	ra,4(sp)
    a428:	df000017 	ldw	fp,0(sp)
    a42c:	dec00204 	addi	sp,sp,8
    a430:	f800283a 	ret

0000a434 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a434:	defffd04 	addi	sp,sp,-12
    a438:	dfc00215 	stw	ra,8(sp)
    a43c:	df000115 	stw	fp,4(sp)
    a440:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a444:	00800074 	movhi	r2,1
    a448:	10adf204 	addi	r2,r2,-18488
    a44c:	10800017 	ldw	r2,0(r2)
    a450:	1005003a 	cmpeq	r2,r2,zero
    a454:	1000061e 	bne	r2,zero,a470 <alt_get_errno+0x3c>
    a458:	00800074 	movhi	r2,1
    a45c:	10adf204 	addi	r2,r2,-18488
    a460:	10800017 	ldw	r2,0(r2)
    a464:	103ee83a 	callr	r2
    a468:	e0bfff15 	stw	r2,-4(fp)
    a46c:	00000306 	br	a47c <alt_get_errno+0x48>
    a470:	00800074 	movhi	r2,1
    a474:	10aeed04 	addi	r2,r2,-17484
    a478:	e0bfff15 	stw	r2,-4(fp)
    a47c:	e0bfff17 	ldw	r2,-4(fp)
}
    a480:	e037883a 	mov	sp,fp
    a484:	dfc00117 	ldw	ra,4(sp)
    a488:	df000017 	ldw	fp,0(sp)
    a48c:	dec00204 	addi	sp,sp,8
    a490:	f800283a 	ret

0000a494 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    a494:	deffff04 	addi	sp,sp,-4
    a498:	df000015 	stw	fp,0(sp)
    a49c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    a4a0:	e037883a 	mov	sp,fp
    a4a4:	df000017 	ldw	fp,0(sp)
    a4a8:	dec00104 	addi	sp,sp,4
    a4ac:	f800283a 	ret

0000a4b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a4b0:	defffc04 	addi	sp,sp,-16
    a4b4:	df000315 	stw	fp,12(sp)
    a4b8:	df000304 	addi	fp,sp,12
    a4bc:	e13ffd15 	stw	r4,-12(fp)
    a4c0:	e17ffe15 	stw	r5,-8(fp)
    a4c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a4c8:	e0bfff17 	ldw	r2,-4(fp)
}
    a4cc:	e037883a 	mov	sp,fp
    a4d0:	df000017 	ldw	fp,0(sp)
    a4d4:	dec00104 	addi	sp,sp,4
    a4d8:	f800283a 	ret

0000a4dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    a4dc:	defff904 	addi	sp,sp,-28
    a4e0:	dfc00615 	stw	ra,24(sp)
    a4e4:	df000515 	stw	fp,20(sp)
    a4e8:	df000504 	addi	fp,sp,20
    a4ec:	e13ffd15 	stw	r4,-12(fp)
    a4f0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    a4f4:	e0bffd17 	ldw	r2,-12(fp)
    a4f8:	1005003a 	cmpeq	r2,r2,zero
    a4fc:	1000041e 	bne	r2,zero,a510 <alt_dev_llist_insert+0x34>
    a500:	e0bffd17 	ldw	r2,-12(fp)
    a504:	10800217 	ldw	r2,8(r2)
    a508:	1004c03a 	cmpne	r2,r2,zero
    a50c:	1000071e 	bne	r2,zero,a52c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    a510:	000a5900 	call	a590 <alt_get_errno>
    a514:	1007883a 	mov	r3,r2
    a518:	00800584 	movi	r2,22
    a51c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    a520:	00bffa84 	movi	r2,-22
    a524:	e0bfff15 	stw	r2,-4(fp)
    a528:	00001306 	br	a578 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    a52c:	e0fffd17 	ldw	r3,-12(fp)
    a530:	e0bffe17 	ldw	r2,-8(fp)
    a534:	e0bffb15 	stw	r2,-20(fp)
    a538:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a53c:	e0fffc17 	ldw	r3,-16(fp)
    a540:	e0bffb17 	ldw	r2,-20(fp)
    a544:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    a548:	e0bffb17 	ldw	r2,-20(fp)
    a54c:	10c00017 	ldw	r3,0(r2)
    a550:	e0bffc17 	ldw	r2,-16(fp)
    a554:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a558:	e0bffb17 	ldw	r2,-20(fp)
    a55c:	10c00017 	ldw	r3,0(r2)
    a560:	e0bffc17 	ldw	r2,-16(fp)
    a564:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    a568:	e0fffb17 	ldw	r3,-20(fp)
    a56c:	e0bffc17 	ldw	r2,-16(fp)
    a570:	18800015 	stw	r2,0(r3)

  return 0;  
    a574:	e03fff15 	stw	zero,-4(fp)
    a578:	e0bfff17 	ldw	r2,-4(fp)
}
    a57c:	e037883a 	mov	sp,fp
    a580:	dfc00117 	ldw	ra,4(sp)
    a584:	df000017 	ldw	fp,0(sp)
    a588:	dec00204 	addi	sp,sp,8
    a58c:	f800283a 	ret

0000a590 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a590:	defffd04 	addi	sp,sp,-12
    a594:	dfc00215 	stw	ra,8(sp)
    a598:	df000115 	stw	fp,4(sp)
    a59c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a5a0:	00800074 	movhi	r2,1
    a5a4:	10adf204 	addi	r2,r2,-18488
    a5a8:	10800017 	ldw	r2,0(r2)
    a5ac:	1005003a 	cmpeq	r2,r2,zero
    a5b0:	1000061e 	bne	r2,zero,a5cc <alt_get_errno+0x3c>
    a5b4:	00800074 	movhi	r2,1
    a5b8:	10adf204 	addi	r2,r2,-18488
    a5bc:	10800017 	ldw	r2,0(r2)
    a5c0:	103ee83a 	callr	r2
    a5c4:	e0bfff15 	stw	r2,-4(fp)
    a5c8:	00000306 	br	a5d8 <alt_get_errno+0x48>
    a5cc:	00800074 	movhi	r2,1
    a5d0:	10aeed04 	addi	r2,r2,-17484
    a5d4:	e0bfff15 	stw	r2,-4(fp)
    a5d8:	e0bfff17 	ldw	r2,-4(fp)
}
    a5dc:	e037883a 	mov	sp,fp
    a5e0:	dfc00117 	ldw	ra,4(sp)
    a5e4:	df000017 	ldw	fp,0(sp)
    a5e8:	dec00204 	addi	sp,sp,8
    a5ec:	f800283a 	ret

0000a5f0 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
    a5f0:	defffc04 	addi	sp,sp,-16
    a5f4:	dfc00315 	stw	ra,12(sp)
    a5f8:	df000215 	stw	fp,8(sp)
    a5fc:	df000204 	addi	fp,sp,8
    a600:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
    a604:	e13fff17 	ldw	r4,-4(fp)
    a608:	d1600904 	addi	r5,gp,-32732
    a60c:	000a8280 	call	a828 <alt_find_dev>
    a610:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
    a614:	e0bffe17 	ldw	r2,-8(fp)
    a618:	1004c03a 	cmpne	r2,r2,zero
    a61c:	1000041e 	bne	r2,zero,a630 <alt_dma_rxchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
    a620:	000a6480 	call	a648 <alt_get_errno>
    a624:	1007883a 	mov	r3,r2
    a628:	008004c4 	movi	r2,19
    a62c:	18800015 	stw	r2,0(r3)
  }

  return dev;
    a630:	e0bffe17 	ldw	r2,-8(fp)
}
    a634:	e037883a 	mov	sp,fp
    a638:	dfc00117 	ldw	ra,4(sp)
    a63c:	df000017 	ldw	fp,0(sp)
    a640:	dec00204 	addi	sp,sp,8
    a644:	f800283a 	ret

0000a648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a648:	defffd04 	addi	sp,sp,-12
    a64c:	dfc00215 	stw	ra,8(sp)
    a650:	df000115 	stw	fp,4(sp)
    a654:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a658:	00800074 	movhi	r2,1
    a65c:	10adf204 	addi	r2,r2,-18488
    a660:	10800017 	ldw	r2,0(r2)
    a664:	1005003a 	cmpeq	r2,r2,zero
    a668:	1000061e 	bne	r2,zero,a684 <alt_get_errno+0x3c>
    a66c:	00800074 	movhi	r2,1
    a670:	10adf204 	addi	r2,r2,-18488
    a674:	10800017 	ldw	r2,0(r2)
    a678:	103ee83a 	callr	r2
    a67c:	e0bfff15 	stw	r2,-4(fp)
    a680:	00000306 	br	a690 <alt_get_errno+0x48>
    a684:	00800074 	movhi	r2,1
    a688:	10aeed04 	addi	r2,r2,-17484
    a68c:	e0bfff15 	stw	r2,-4(fp)
    a690:	e0bfff17 	ldw	r2,-4(fp)
}
    a694:	e037883a 	mov	sp,fp
    a698:	dfc00117 	ldw	ra,4(sp)
    a69c:	df000017 	ldw	fp,0(sp)
    a6a0:	dec00204 	addi	sp,sp,8
    a6a4:	f800283a 	ret

0000a6a8 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
    a6a8:	defffc04 	addi	sp,sp,-16
    a6ac:	dfc00315 	stw	ra,12(sp)
    a6b0:	df000215 	stw	fp,8(sp)
    a6b4:	df000204 	addi	fp,sp,8
    a6b8:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
    a6bc:	e13fff17 	ldw	r4,-4(fp)
    a6c0:	d1600b04 	addi	r5,gp,-32724
    a6c4:	000a8280 	call	a828 <alt_find_dev>
    a6c8:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
    a6cc:	e0bffe17 	ldw	r2,-8(fp)
    a6d0:	1004c03a 	cmpne	r2,r2,zero
    a6d4:	1000041e 	bne	r2,zero,a6e8 <alt_dma_txchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
    a6d8:	000a7000 	call	a700 <alt_get_errno>
    a6dc:	1007883a 	mov	r3,r2
    a6e0:	008004c4 	movi	r2,19
    a6e4:	18800015 	stw	r2,0(r3)
  }

  return dev;
    a6e8:	e0bffe17 	ldw	r2,-8(fp)
}
    a6ec:	e037883a 	mov	sp,fp
    a6f0:	dfc00117 	ldw	ra,4(sp)
    a6f4:	df000017 	ldw	fp,0(sp)
    a6f8:	dec00204 	addi	sp,sp,8
    a6fc:	f800283a 	ret

0000a700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a700:	defffd04 	addi	sp,sp,-12
    a704:	dfc00215 	stw	ra,8(sp)
    a708:	df000115 	stw	fp,4(sp)
    a70c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a710:	00800074 	movhi	r2,1
    a714:	10adf204 	addi	r2,r2,-18488
    a718:	10800017 	ldw	r2,0(r2)
    a71c:	1005003a 	cmpeq	r2,r2,zero
    a720:	1000061e 	bne	r2,zero,a73c <alt_get_errno+0x3c>
    a724:	00800074 	movhi	r2,1
    a728:	10adf204 	addi	r2,r2,-18488
    a72c:	10800017 	ldw	r2,0(r2)
    a730:	103ee83a 	callr	r2
    a734:	e0bfff15 	stw	r2,-4(fp)
    a738:	00000306 	br	a748 <alt_get_errno+0x48>
    a73c:	00800074 	movhi	r2,1
    a740:	10aeed04 	addi	r2,r2,-17484
    a744:	e0bfff15 	stw	r2,-4(fp)
    a748:	e0bfff17 	ldw	r2,-4(fp)
}
    a74c:	e037883a 	mov	sp,fp
    a750:	dfc00117 	ldw	ra,4(sp)
    a754:	df000017 	ldw	fp,0(sp)
    a758:	dec00204 	addi	sp,sp,8
    a75c:	f800283a 	ret

0000a760 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    a760:	defffd04 	addi	sp,sp,-12
    a764:	dfc00215 	stw	ra,8(sp)
    a768:	df000115 	stw	fp,4(sp)
    a76c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    a770:	00bfff04 	movi	r2,-4
    a774:	00c00074 	movhi	r3,1
    a778:	18ece504 	addi	r3,r3,-19564
    a77c:	1885883a 	add	r2,r3,r2
    a780:	e0bfff15 	stw	r2,-4(fp)
    a784:	00000606 	br	a7a0 <_do_ctors+0x40>
        (*ctor) (); 
    a788:	e0bfff17 	ldw	r2,-4(fp)
    a78c:	10800017 	ldw	r2,0(r2)
    a790:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    a794:	e0bfff17 	ldw	r2,-4(fp)
    a798:	10bfff04 	addi	r2,r2,-4
    a79c:	e0bfff15 	stw	r2,-4(fp)
    a7a0:	e0ffff17 	ldw	r3,-4(fp)
    a7a4:	00800074 	movhi	r2,1
    a7a8:	10ace404 	addi	r2,r2,-19568
    a7ac:	18bff62e 	bgeu	r3,r2,a788 <_do_ctors+0x28>
        (*ctor) (); 
}
    a7b0:	e037883a 	mov	sp,fp
    a7b4:	dfc00117 	ldw	ra,4(sp)
    a7b8:	df000017 	ldw	fp,0(sp)
    a7bc:	dec00204 	addi	sp,sp,8
    a7c0:	f800283a 	ret

0000a7c4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    a7c4:	defffd04 	addi	sp,sp,-12
    a7c8:	dfc00215 	stw	ra,8(sp)
    a7cc:	df000115 	stw	fp,4(sp)
    a7d0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a7d4:	00bfff04 	movi	r2,-4
    a7d8:	00c00074 	movhi	r3,1
    a7dc:	18ece504 	addi	r3,r3,-19564
    a7e0:	1885883a 	add	r2,r3,r2
    a7e4:	e0bfff15 	stw	r2,-4(fp)
    a7e8:	00000606 	br	a804 <_do_dtors+0x40>
        (*dtor) (); 
    a7ec:	e0bfff17 	ldw	r2,-4(fp)
    a7f0:	10800017 	ldw	r2,0(r2)
    a7f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a7f8:	e0bfff17 	ldw	r2,-4(fp)
    a7fc:	10bfff04 	addi	r2,r2,-4
    a800:	e0bfff15 	stw	r2,-4(fp)
    a804:	e0ffff17 	ldw	r3,-4(fp)
    a808:	00800074 	movhi	r2,1
    a80c:	10ace504 	addi	r2,r2,-19564
    a810:	18bff62e 	bgeu	r3,r2,a7ec <_do_dtors+0x28>
        (*dtor) (); 
}
    a814:	e037883a 	mov	sp,fp
    a818:	dfc00117 	ldw	ra,4(sp)
    a81c:	df000017 	ldw	fp,0(sp)
    a820:	dec00204 	addi	sp,sp,8
    a824:	f800283a 	ret

0000a828 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a828:	defff904 	addi	sp,sp,-28
    a82c:	dfc00615 	stw	ra,24(sp)
    a830:	df000515 	stw	fp,20(sp)
    a834:	df000504 	addi	fp,sp,20
    a838:	e13ffd15 	stw	r4,-12(fp)
    a83c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a840:	e0bffe17 	ldw	r2,-8(fp)
    a844:	10800017 	ldw	r2,0(r2)
    a848:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a84c:	e13ffd17 	ldw	r4,-12(fp)
    a850:	0008ba80 	call	8ba8 <strlen>
    a854:	10800044 	addi	r2,r2,1
    a858:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a85c:	00000d06 	br	a894 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a860:	e0bffc17 	ldw	r2,-16(fp)
    a864:	11000217 	ldw	r4,8(r2)
    a868:	e1bffb17 	ldw	r6,-20(fp)
    a86c:	e17ffd17 	ldw	r5,-12(fp)
    a870:	000afc80 	call	afc8 <memcmp>
    a874:	1004c03a 	cmpne	r2,r2,zero
    a878:	1000031e 	bne	r2,zero,a888 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a87c:	e0bffc17 	ldw	r2,-16(fp)
    a880:	e0bfff15 	stw	r2,-4(fp)
    a884:	00000706 	br	a8a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a888:	e0bffc17 	ldw	r2,-16(fp)
    a88c:	10800017 	ldw	r2,0(r2)
    a890:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a894:	e0fffe17 	ldw	r3,-8(fp)
    a898:	e0bffc17 	ldw	r2,-16(fp)
    a89c:	10fff01e 	bne	r2,r3,a860 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a8a0:	e03fff15 	stw	zero,-4(fp)
    a8a4:	e0bfff17 	ldw	r2,-4(fp)
}
    a8a8:	e037883a 	mov	sp,fp
    a8ac:	dfc00117 	ldw	ra,4(sp)
    a8b0:	df000017 	ldw	fp,0(sp)
    a8b4:	dec00204 	addi	sp,sp,8
    a8b8:	f800283a 	ret

0000a8bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a8bc:	deffff04 	addi	sp,sp,-4
    a8c0:	df000015 	stw	fp,0(sp)
    a8c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    a8c8:	e037883a 	mov	sp,fp
    a8cc:	df000017 	ldw	fp,0(sp)
    a8d0:	dec00104 	addi	sp,sp,4
    a8d4:	f800283a 	ret

0000a8d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a8d8:	defff804 	addi	sp,sp,-32
    a8dc:	dfc00715 	stw	ra,28(sp)
    a8e0:	df000615 	stw	fp,24(sp)
    a8e4:	dc000515 	stw	r16,20(sp)
    a8e8:	df000504 	addi	fp,sp,20
    a8ec:	e13ffc15 	stw	r4,-16(fp)
    a8f0:	e17ffd15 	stw	r5,-12(fp)
    a8f4:	e1bffe15 	stw	r6,-8(fp)
    a8f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    a8fc:	e13ffd17 	ldw	r4,-12(fp)
    a900:	e17ffe17 	ldw	r5,-8(fp)
    a904:	e1bfff17 	ldw	r6,-4(fp)
    a908:	000ab200 	call	ab20 <open>
    a90c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    a910:	e0bffb17 	ldw	r2,-20(fp)
    a914:	1004803a 	cmplt	r2,r2,zero
    a918:	10001f1e 	bne	r2,zero,a998 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    a91c:	e13ffb17 	ldw	r4,-20(fp)
    a920:	04000074 	movhi	r16,1
    a924:	842d8504 	addi	r16,r16,-18924
    a928:	01400304 	movi	r5,12
    a92c:	0008d8c0 	call	8d8c <__mulsi3>
    a930:	1405883a 	add	r2,r2,r16
    a934:	10c00017 	ldw	r3,0(r2)
    a938:	e0bffc17 	ldw	r2,-16(fp)
    a93c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a940:	e13ffb17 	ldw	r4,-20(fp)
    a944:	04000074 	movhi	r16,1
    a948:	842d8504 	addi	r16,r16,-18924
    a94c:	01400304 	movi	r5,12
    a950:	0008d8c0 	call	8d8c <__mulsi3>
    a954:	1405883a 	add	r2,r2,r16
    a958:	10800104 	addi	r2,r2,4
    a95c:	10c00017 	ldw	r3,0(r2)
    a960:	e0bffc17 	ldw	r2,-16(fp)
    a964:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a968:	e13ffb17 	ldw	r4,-20(fp)
    a96c:	04000074 	movhi	r16,1
    a970:	842d8504 	addi	r16,r16,-18924
    a974:	01400304 	movi	r5,12
    a978:	0008d8c0 	call	8d8c <__mulsi3>
    a97c:	1405883a 	add	r2,r2,r16
    a980:	10800204 	addi	r2,r2,8
    a984:	10c00017 	ldw	r3,0(r2)
    a988:	e0bffc17 	ldw	r2,-16(fp)
    a98c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a990:	e13ffb17 	ldw	r4,-20(fp)
    a994:	000ad0c0 	call	ad0c <alt_release_fd>
  }
} 
    a998:	e037883a 	mov	sp,fp
    a99c:	dfc00217 	ldw	ra,8(sp)
    a9a0:	df000117 	ldw	fp,4(sp)
    a9a4:	dc000017 	ldw	r16,0(sp)
    a9a8:	dec00304 	addi	sp,sp,12
    a9ac:	f800283a 	ret

0000a9b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a9b0:	defffb04 	addi	sp,sp,-20
    a9b4:	dfc00415 	stw	ra,16(sp)
    a9b8:	df000315 	stw	fp,12(sp)
    a9bc:	df000304 	addi	fp,sp,12
    a9c0:	e13ffd15 	stw	r4,-12(fp)
    a9c4:	e17ffe15 	stw	r5,-8(fp)
    a9c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a9cc:	01000074 	movhi	r4,1
    a9d0:	212d8804 	addi	r4,r4,-18912
    a9d4:	e17ffd17 	ldw	r5,-12(fp)
    a9d8:	01800044 	movi	r6,1
    a9dc:	01c07fc4 	movi	r7,511
    a9e0:	000a8d80 	call	a8d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a9e4:	01000074 	movhi	r4,1
    a9e8:	212d8504 	addi	r4,r4,-18924
    a9ec:	e17ffe17 	ldw	r5,-8(fp)
    a9f0:	000d883a 	mov	r6,zero
    a9f4:	01c07fc4 	movi	r7,511
    a9f8:	000a8d80 	call	a8d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a9fc:	01000074 	movhi	r4,1
    aa00:	212d8b04 	addi	r4,r4,-18900
    aa04:	e17fff17 	ldw	r5,-4(fp)
    aa08:	01800044 	movi	r6,1
    aa0c:	01c07fc4 	movi	r7,511
    aa10:	000a8d80 	call	a8d8 <alt_open_fd>
}  
    aa14:	e037883a 	mov	sp,fp
    aa18:	dfc00117 	ldw	ra,4(sp)
    aa1c:	df000017 	ldw	fp,0(sp)
    aa20:	dec00204 	addi	sp,sp,8
    aa24:	f800283a 	ret

0000aa28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    aa28:	defffa04 	addi	sp,sp,-24
    aa2c:	dfc00515 	stw	ra,20(sp)
    aa30:	df000415 	stw	fp,16(sp)
    aa34:	dc000315 	stw	r16,12(sp)
    aa38:	df000304 	addi	fp,sp,12
    aa3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    aa40:	e0bffe17 	ldw	r2,-8(fp)
    aa44:	10800217 	ldw	r2,8(r2)
    aa48:	10d00034 	orhi	r3,r2,16384
    aa4c:	e0bffe17 	ldw	r2,-8(fp)
    aa50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    aa54:	e03ffd15 	stw	zero,-12(fp)
    aa58:	00002306 	br	aae8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    aa5c:	e13ffd17 	ldw	r4,-12(fp)
    aa60:	04000074 	movhi	r16,1
    aa64:	842d8504 	addi	r16,r16,-18924
    aa68:	01400304 	movi	r5,12
    aa6c:	0008d8c0 	call	8d8c <__mulsi3>
    aa70:	1405883a 	add	r2,r2,r16
    aa74:	10c00017 	ldw	r3,0(r2)
    aa78:	e0bffe17 	ldw	r2,-8(fp)
    aa7c:	10800017 	ldw	r2,0(r2)
    aa80:	1880161e 	bne	r3,r2,aadc <alt_file_locked+0xb4>
    aa84:	e13ffd17 	ldw	r4,-12(fp)
    aa88:	04000074 	movhi	r16,1
    aa8c:	842d8504 	addi	r16,r16,-18924
    aa90:	01400304 	movi	r5,12
    aa94:	0008d8c0 	call	8d8c <__mulsi3>
    aa98:	1405883a 	add	r2,r2,r16
    aa9c:	10800204 	addi	r2,r2,8
    aaa0:	10800017 	ldw	r2,0(r2)
    aaa4:	1004403a 	cmpge	r2,r2,zero
    aaa8:	10000c1e 	bne	r2,zero,aadc <alt_file_locked+0xb4>
    aaac:	e13ffd17 	ldw	r4,-12(fp)
    aab0:	01400304 	movi	r5,12
    aab4:	0008d8c0 	call	8d8c <__mulsi3>
    aab8:	1007883a 	mov	r3,r2
    aabc:	00800074 	movhi	r2,1
    aac0:	10ad8504 	addi	r2,r2,-18924
    aac4:	1887883a 	add	r3,r3,r2
    aac8:	e0bffe17 	ldw	r2,-8(fp)
    aacc:	18800326 	beq	r3,r2,aadc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    aad0:	00bffcc4 	movi	r2,-13
    aad4:	e0bfff15 	stw	r2,-4(fp)
    aad8:	00000a06 	br	ab04 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    aadc:	e0bffd17 	ldw	r2,-12(fp)
    aae0:	10800044 	addi	r2,r2,1
    aae4:	e0bffd15 	stw	r2,-12(fp)
    aae8:	00800074 	movhi	r2,1
    aaec:	10aded04 	addi	r2,r2,-18508
    aaf0:	10800017 	ldw	r2,0(r2)
    aaf4:	1007883a 	mov	r3,r2
    aaf8:	e0bffd17 	ldw	r2,-12(fp)
    aafc:	18bfd72e 	bgeu	r3,r2,aa5c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ab00:	e03fff15 	stw	zero,-4(fp)
    ab04:	e0bfff17 	ldw	r2,-4(fp)
}
    ab08:	e037883a 	mov	sp,fp
    ab0c:	dfc00217 	ldw	ra,8(sp)
    ab10:	df000117 	ldw	fp,4(sp)
    ab14:	dc000017 	ldw	r16,0(sp)
    ab18:	dec00304 	addi	sp,sp,12
    ab1c:	f800283a 	ret

0000ab20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ab20:	defff404 	addi	sp,sp,-48
    ab24:	dfc00b15 	stw	ra,44(sp)
    ab28:	df000a15 	stw	fp,40(sp)
    ab2c:	df000a04 	addi	fp,sp,40
    ab30:	e13ffb15 	stw	r4,-20(fp)
    ab34:	e17ffc15 	stw	r5,-16(fp)
    ab38:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ab3c:	00bfffc4 	movi	r2,-1
    ab40:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    ab44:	00bffb44 	movi	r2,-19
    ab48:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    ab4c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ab50:	e13ffb17 	ldw	r4,-20(fp)
    ab54:	01400074 	movhi	r5,1
    ab58:	296deb04 	addi	r5,r5,-18516
    ab5c:	000a8280 	call	a828 <alt_find_dev>
    ab60:	e0bffa15 	stw	r2,-24(fp)
    ab64:	e0bffa17 	ldw	r2,-24(fp)
    ab68:	1004c03a 	cmpne	r2,r2,zero
    ab6c:	1000051e 	bne	r2,zero,ab84 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ab70:	e13ffb17 	ldw	r4,-20(fp)
    ab74:	000ada40 	call	ada4 <alt_find_file>
    ab78:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    ab7c:	00800044 	movi	r2,1
    ab80:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ab84:	e0bffa17 	ldw	r2,-24(fp)
    ab88:	1005003a 	cmpeq	r2,r2,zero
    ab8c:	1000311e 	bne	r2,zero,ac54 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ab90:	e13ffa17 	ldw	r4,-24(fp)
    ab94:	000aec40 	call	aec4 <alt_get_fd>
    ab98:	e0bff815 	stw	r2,-32(fp)
    ab9c:	e0bff817 	ldw	r2,-32(fp)
    aba0:	1004403a 	cmpge	r2,r2,zero
    aba4:	1000031e 	bne	r2,zero,abb4 <open+0x94>
    {
      status = index;
    aba8:	e0bff817 	ldw	r2,-32(fp)
    abac:	e0bff715 	stw	r2,-36(fp)
    abb0:	00002a06 	br	ac5c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    abb4:	e13ff817 	ldw	r4,-32(fp)
    abb8:	01400304 	movi	r5,12
    abbc:	0008d8c0 	call	8d8c <__mulsi3>
    abc0:	1007883a 	mov	r3,r2
    abc4:	00800074 	movhi	r2,1
    abc8:	10ad8504 	addi	r2,r2,-18924
    abcc:	1885883a 	add	r2,r3,r2
    abd0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    abd4:	e0fffc17 	ldw	r3,-16(fp)
    abd8:	00900034 	movhi	r2,16384
    abdc:	10bfffc4 	addi	r2,r2,-1
    abe0:	1886703a 	and	r3,r3,r2
    abe4:	e0bff917 	ldw	r2,-28(fp)
    abe8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    abec:	e0bff617 	ldw	r2,-40(fp)
    abf0:	1004c03a 	cmpne	r2,r2,zero
    abf4:	1000061e 	bne	r2,zero,ac10 <open+0xf0>
    abf8:	e13ff917 	ldw	r4,-28(fp)
    abfc:	000aa280 	call	aa28 <alt_file_locked>
    ac00:	e0bff715 	stw	r2,-36(fp)
    ac04:	e0bff717 	ldw	r2,-36(fp)
    ac08:	1004803a 	cmplt	r2,r2,zero
    ac0c:	1000131e 	bne	r2,zero,ac5c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    ac10:	e0bffa17 	ldw	r2,-24(fp)
    ac14:	10800317 	ldw	r2,12(r2)
    ac18:	1005003a 	cmpeq	r2,r2,zero
    ac1c:	1000091e 	bne	r2,zero,ac44 <open+0x124>
    ac20:	e0bffa17 	ldw	r2,-24(fp)
    ac24:	10800317 	ldw	r2,12(r2)
    ac28:	e13ff917 	ldw	r4,-28(fp)
    ac2c:	e17ffb17 	ldw	r5,-20(fp)
    ac30:	e1bffc17 	ldw	r6,-16(fp)
    ac34:	e1fffd17 	ldw	r7,-12(fp)
    ac38:	103ee83a 	callr	r2
    ac3c:	e0bfff15 	stw	r2,-4(fp)
    ac40:	00000106 	br	ac48 <open+0x128>
    ac44:	e03fff15 	stw	zero,-4(fp)
    ac48:	e0bfff17 	ldw	r2,-4(fp)
    ac4c:	e0bff715 	stw	r2,-36(fp)
    ac50:	00000206 	br	ac5c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ac54:	00bffb44 	movi	r2,-19
    ac58:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ac5c:	e0bff717 	ldw	r2,-36(fp)
    ac60:	1004403a 	cmpge	r2,r2,zero
    ac64:	1000091e 	bne	r2,zero,ac8c <open+0x16c>
  {
    alt_release_fd (index);  
    ac68:	e13ff817 	ldw	r4,-32(fp)
    ac6c:	000ad0c0 	call	ad0c <alt_release_fd>
    ALT_ERRNO = -status;
    ac70:	000acac0 	call	acac <alt_get_errno>
    ac74:	e0fff717 	ldw	r3,-36(fp)
    ac78:	00c7c83a 	sub	r3,zero,r3
    ac7c:	10c00015 	stw	r3,0(r2)
    return -1;
    ac80:	00bfffc4 	movi	r2,-1
    ac84:	e0bffe15 	stw	r2,-8(fp)
    ac88:	00000206 	br	ac94 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    ac8c:	e0bff817 	ldw	r2,-32(fp)
    ac90:	e0bffe15 	stw	r2,-8(fp)
    ac94:	e0bffe17 	ldw	r2,-8(fp)
}
    ac98:	e037883a 	mov	sp,fp
    ac9c:	dfc00117 	ldw	ra,4(sp)
    aca0:	df000017 	ldw	fp,0(sp)
    aca4:	dec00204 	addi	sp,sp,8
    aca8:	f800283a 	ret

0000acac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    acac:	defffd04 	addi	sp,sp,-12
    acb0:	dfc00215 	stw	ra,8(sp)
    acb4:	df000115 	stw	fp,4(sp)
    acb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    acbc:	00800074 	movhi	r2,1
    acc0:	10adf204 	addi	r2,r2,-18488
    acc4:	10800017 	ldw	r2,0(r2)
    acc8:	1005003a 	cmpeq	r2,r2,zero
    accc:	1000061e 	bne	r2,zero,ace8 <alt_get_errno+0x3c>
    acd0:	00800074 	movhi	r2,1
    acd4:	10adf204 	addi	r2,r2,-18488
    acd8:	10800017 	ldw	r2,0(r2)
    acdc:	103ee83a 	callr	r2
    ace0:	e0bfff15 	stw	r2,-4(fp)
    ace4:	00000306 	br	acf4 <alt_get_errno+0x48>
    ace8:	00800074 	movhi	r2,1
    acec:	10aeed04 	addi	r2,r2,-17484
    acf0:	e0bfff15 	stw	r2,-4(fp)
    acf4:	e0bfff17 	ldw	r2,-4(fp)
}
    acf8:	e037883a 	mov	sp,fp
    acfc:	dfc00117 	ldw	ra,4(sp)
    ad00:	df000017 	ldw	fp,0(sp)
    ad04:	dec00204 	addi	sp,sp,8
    ad08:	f800283a 	ret

0000ad0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ad0c:	defffc04 	addi	sp,sp,-16
    ad10:	dfc00315 	stw	ra,12(sp)
    ad14:	df000215 	stw	fp,8(sp)
    ad18:	dc000115 	stw	r16,4(sp)
    ad1c:	df000104 	addi	fp,sp,4
    ad20:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ad24:	e0bfff17 	ldw	r2,-4(fp)
    ad28:	108000d0 	cmplti	r2,r2,3
    ad2c:	10000f1e 	bne	r2,zero,ad6c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    ad30:	e13fff17 	ldw	r4,-4(fp)
    ad34:	04000074 	movhi	r16,1
    ad38:	842d8504 	addi	r16,r16,-18924
    ad3c:	01400304 	movi	r5,12
    ad40:	0008d8c0 	call	8d8c <__mulsi3>
    ad44:	1405883a 	add	r2,r2,r16
    ad48:	10800204 	addi	r2,r2,8
    ad4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ad50:	e13fff17 	ldw	r4,-4(fp)
    ad54:	04000074 	movhi	r16,1
    ad58:	842d8504 	addi	r16,r16,-18924
    ad5c:	01400304 	movi	r5,12
    ad60:	0008d8c0 	call	8d8c <__mulsi3>
    ad64:	1405883a 	add	r2,r2,r16
    ad68:	10000015 	stw	zero,0(r2)
  }
}
    ad6c:	e037883a 	mov	sp,fp
    ad70:	dfc00217 	ldw	ra,8(sp)
    ad74:	df000117 	ldw	fp,4(sp)
    ad78:	dc000017 	ldw	r16,0(sp)
    ad7c:	dec00304 	addi	sp,sp,12
    ad80:	f800283a 	ret

0000ad84 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    ad84:	deffff04 	addi	sp,sp,-4
    ad88:	df000015 	stw	fp,0(sp)
    ad8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    ad90:	000170fa 	wrctl	ienable,zero
}
    ad94:	e037883a 	mov	sp,fp
    ad98:	df000017 	ldw	fp,0(sp)
    ad9c:	dec00104 	addi	sp,sp,4
    ada0:	f800283a 	ret

0000ada4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    ada4:	defffa04 	addi	sp,sp,-24
    ada8:	dfc00515 	stw	ra,20(sp)
    adac:	df000415 	stw	fp,16(sp)
    adb0:	df000404 	addi	fp,sp,16
    adb4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    adb8:	00800074 	movhi	r2,1
    adbc:	10ade904 	addi	r2,r2,-18524
    adc0:	10800017 	ldw	r2,0(r2)
    adc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    adc8:	00003306 	br	ae98 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    adcc:	e0bffd17 	ldw	r2,-12(fp)
    add0:	11000217 	ldw	r4,8(r2)
    add4:	0008ba80 	call	8ba8 <strlen>
    add8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    addc:	e0bffd17 	ldw	r2,-12(fp)
    ade0:	10c00217 	ldw	r3,8(r2)
    ade4:	e0bffc17 	ldw	r2,-16(fp)
    ade8:	1885883a 	add	r2,r3,r2
    adec:	10bfffc4 	addi	r2,r2,-1
    adf0:	10800003 	ldbu	r2,0(r2)
    adf4:	10803fcc 	andi	r2,r2,255
    adf8:	1080201c 	xori	r2,r2,128
    adfc:	10bfe004 	addi	r2,r2,-128
    ae00:	10800bd8 	cmpnei	r2,r2,47
    ae04:	1000031e 	bne	r2,zero,ae14 <alt_find_file+0x70>
    {
      len -= 1;
    ae08:	e0bffc17 	ldw	r2,-16(fp)
    ae0c:	10bfffc4 	addi	r2,r2,-1
    ae10:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ae14:	e0bffc17 	ldw	r2,-16(fp)
    ae18:	1007883a 	mov	r3,r2
    ae1c:	e0bffe17 	ldw	r2,-8(fp)
    ae20:	1885883a 	add	r2,r3,r2
    ae24:	10800003 	ldbu	r2,0(r2)
    ae28:	10803fcc 	andi	r2,r2,255
    ae2c:	1080201c 	xori	r2,r2,128
    ae30:	10bfe004 	addi	r2,r2,-128
    ae34:	10800be0 	cmpeqi	r2,r2,47
    ae38:	10000a1e 	bne	r2,zero,ae64 <alt_find_file+0xc0>
    ae3c:	e0bffc17 	ldw	r2,-16(fp)
    ae40:	1007883a 	mov	r3,r2
    ae44:	e0bffe17 	ldw	r2,-8(fp)
    ae48:	1885883a 	add	r2,r3,r2
    ae4c:	10800003 	ldbu	r2,0(r2)
    ae50:	10803fcc 	andi	r2,r2,255
    ae54:	1080201c 	xori	r2,r2,128
    ae58:	10bfe004 	addi	r2,r2,-128
    ae5c:	1004c03a 	cmpne	r2,r2,zero
    ae60:	10000a1e 	bne	r2,zero,ae8c <alt_find_file+0xe8>
    ae64:	e0bffd17 	ldw	r2,-12(fp)
    ae68:	11000217 	ldw	r4,8(r2)
    ae6c:	e1bffc17 	ldw	r6,-16(fp)
    ae70:	e17ffe17 	ldw	r5,-8(fp)
    ae74:	000afc80 	call	afc8 <memcmp>
    ae78:	1004c03a 	cmpne	r2,r2,zero
    ae7c:	1000031e 	bne	r2,zero,ae8c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ae80:	e0bffd17 	ldw	r2,-12(fp)
    ae84:	e0bfff15 	stw	r2,-4(fp)
    ae88:	00000806 	br	aeac <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    ae8c:	e0bffd17 	ldw	r2,-12(fp)
    ae90:	10800017 	ldw	r2,0(r2)
    ae94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ae98:	00c00074 	movhi	r3,1
    ae9c:	18ede904 	addi	r3,r3,-18524
    aea0:	e0bffd17 	ldw	r2,-12(fp)
    aea4:	10ffc91e 	bne	r2,r3,adcc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    aea8:	e03fff15 	stw	zero,-4(fp)
    aeac:	e0bfff17 	ldw	r2,-4(fp)
}
    aeb0:	e037883a 	mov	sp,fp
    aeb4:	dfc00117 	ldw	ra,4(sp)
    aeb8:	df000017 	ldw	fp,0(sp)
    aebc:	dec00204 	addi	sp,sp,8
    aec0:	f800283a 	ret

0000aec4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    aec4:	defffa04 	addi	sp,sp,-24
    aec8:	dfc00515 	stw	ra,20(sp)
    aecc:	df000415 	stw	fp,16(sp)
    aed0:	dc000315 	stw	r16,12(sp)
    aed4:	df000304 	addi	fp,sp,12
    aed8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    aedc:	00bffa04 	movi	r2,-24
    aee0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    aee4:	e03ffe15 	stw	zero,-8(fp)
    aee8:	00002006 	br	af6c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    aeec:	e13ffe17 	ldw	r4,-8(fp)
    aef0:	04000074 	movhi	r16,1
    aef4:	842d8504 	addi	r16,r16,-18924
    aef8:	01400304 	movi	r5,12
    aefc:	0008d8c0 	call	8d8c <__mulsi3>
    af00:	1405883a 	add	r2,r2,r16
    af04:	10800017 	ldw	r2,0(r2)
    af08:	1004c03a 	cmpne	r2,r2,zero
    af0c:	1000141e 	bne	r2,zero,af60 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    af10:	e13ffe17 	ldw	r4,-8(fp)
    af14:	04000074 	movhi	r16,1
    af18:	842d8504 	addi	r16,r16,-18924
    af1c:	01400304 	movi	r5,12
    af20:	0008d8c0 	call	8d8c <__mulsi3>
    af24:	1407883a 	add	r3,r2,r16
    af28:	e0bfff17 	ldw	r2,-4(fp)
    af2c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    af30:	00800074 	movhi	r2,1
    af34:	10aded04 	addi	r2,r2,-18508
    af38:	10c00017 	ldw	r3,0(r2)
    af3c:	e0bffe17 	ldw	r2,-8(fp)
    af40:	1880040e 	bge	r3,r2,af54 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    af44:	00c00074 	movhi	r3,1
    af48:	18eded04 	addi	r3,r3,-18508
    af4c:	e0bffe17 	ldw	r2,-8(fp)
    af50:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    af54:	e0bffe17 	ldw	r2,-8(fp)
    af58:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    af5c:	00000606 	br	af78 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    af60:	e0bffe17 	ldw	r2,-8(fp)
    af64:	10800044 	addi	r2,r2,1
    af68:	e0bffe15 	stw	r2,-8(fp)
    af6c:	e0bffe17 	ldw	r2,-8(fp)
    af70:	10800810 	cmplti	r2,r2,32
    af74:	103fdd1e 	bne	r2,zero,aeec <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    af78:	e0bffd17 	ldw	r2,-12(fp)
}
    af7c:	e037883a 	mov	sp,fp
    af80:	dfc00217 	ldw	ra,8(sp)
    af84:	df000117 	ldw	fp,4(sp)
    af88:	dc000017 	ldw	r16,0(sp)
    af8c:	dec00304 	addi	sp,sp,12
    af90:	f800283a 	ret

0000af94 <atexit>:
    af94:	200b883a 	mov	r5,r4
    af98:	000d883a 	mov	r6,zero
    af9c:	0009883a 	mov	r4,zero
    afa0:	000f883a 	mov	r7,zero
    afa4:	000b0041 	jmpi	b004 <__register_exitproc>

0000afa8 <exit>:
    afa8:	defffe04 	addi	sp,sp,-8
    afac:	dc400015 	stw	r17,0(sp)
    afb0:	000b883a 	mov	r5,zero
    afb4:	2023883a 	mov	r17,r4
    afb8:	dfc00115 	stw	ra,4(sp)
    afbc:	000b1740 	call	b174 <__call_exitprocs>
    afc0:	8809883a 	mov	r4,r17
    afc4:	000b3700 	call	b370 <_exit>

0000afc8 <memcmp>:
    afc8:	31ffffc4 	addi	r7,r6,-1
    afcc:	3000061e 	bne	r6,zero,afe8 <memcmp+0x20>
    afd0:	00000a06 	br	affc <memcmp+0x34>
    afd4:	39ffffc4 	addi	r7,r7,-1
    afd8:	00bfffc4 	movi	r2,-1
    afdc:	21000044 	addi	r4,r4,1
    afe0:	29400044 	addi	r5,r5,1
    afe4:	38800526 	beq	r7,r2,affc <memcmp+0x34>
    afe8:	20c00003 	ldbu	r3,0(r4)
    afec:	28800003 	ldbu	r2,0(r5)
    aff0:	18bff826 	beq	r3,r2,afd4 <memcmp+0xc>
    aff4:	1885c83a 	sub	r2,r3,r2
    aff8:	f800283a 	ret
    affc:	0005883a 	mov	r2,zero
    b000:	f800283a 	ret

0000b004 <__register_exitproc>:
    b004:	defff904 	addi	sp,sp,-28
    b008:	00800074 	movhi	r2,1
    b00c:	10ade704 	addi	r2,r2,-18532
    b010:	dc400115 	stw	r17,4(sp)
    b014:	14400017 	ldw	r17,0(r2)
    b018:	dc000015 	stw	r16,0(sp)
    b01c:	dd400515 	stw	r21,20(sp)
    b020:	8c000c17 	ldw	r16,48(r17)
    b024:	dd000415 	stw	r20,16(sp)
    b028:	dcc00315 	stw	r19,12(sp)
    b02c:	dc800215 	stw	r18,8(sp)
    b030:	dfc00615 	stw	ra,24(sp)
    b034:	2025883a 	mov	r18,r4
    b038:	282b883a 	mov	r21,r5
    b03c:	3029883a 	mov	r20,r6
    b040:	3827883a 	mov	r19,r7
    b044:	80002626 	beq	r16,zero,b0e0 <__register_exitproc+0xdc>
    b048:	81400117 	ldw	r5,4(r16)
    b04c:	008007c4 	movi	r2,31
    b050:	11403716 	blt	r2,r5,b130 <__register_exitproc+0x12c>
    b054:	90002026 	beq	r18,zero,b0d8 <__register_exitproc+0xd4>
    b058:	81802217 	ldw	r6,136(r16)
    b05c:	30002926 	beq	r6,zero,b104 <__register_exitproc+0x100>
    b060:	81400117 	ldw	r5,4(r16)
    b064:	00c00044 	movi	r3,1
    b068:	31004017 	ldw	r4,256(r6)
    b06c:	1946983a 	sll	r3,r3,r5
    b070:	2945883a 	add	r2,r5,r5
    b074:	1085883a 	add	r2,r2,r2
    b078:	1185883a 	add	r2,r2,r6
    b07c:	20c8b03a 	or	r4,r4,r3
    b080:	14c02015 	stw	r19,128(r2)
    b084:	15000015 	stw	r20,0(r2)
    b088:	00800084 	movi	r2,2
    b08c:	31004015 	stw	r4,256(r6)
    b090:	90801826 	beq	r18,r2,b0f4 <__register_exitproc+0xf0>
    b094:	2945883a 	add	r2,r5,r5
    b098:	1085883a 	add	r2,r2,r2
    b09c:	1405883a 	add	r2,r2,r16
    b0a0:	28c00044 	addi	r3,r5,1
    b0a4:	0009883a 	mov	r4,zero
    b0a8:	15400215 	stw	r21,8(r2)
    b0ac:	80c00115 	stw	r3,4(r16)
    b0b0:	2005883a 	mov	r2,r4
    b0b4:	dfc00617 	ldw	ra,24(sp)
    b0b8:	dd400517 	ldw	r21,20(sp)
    b0bc:	dd000417 	ldw	r20,16(sp)
    b0c0:	dcc00317 	ldw	r19,12(sp)
    b0c4:	dc800217 	ldw	r18,8(sp)
    b0c8:	dc400117 	ldw	r17,4(sp)
    b0cc:	dc000017 	ldw	r16,0(sp)
    b0d0:	dec00704 	addi	sp,sp,28
    b0d4:	f800283a 	ret
    b0d8:	81400117 	ldw	r5,4(r16)
    b0dc:	003fed06 	br	b094 <__register_exitproc+0x90>
    b0e0:	00800074 	movhi	r2,1
    b0e4:	10af3204 	addi	r2,r2,-17208
    b0e8:	1021883a 	mov	r16,r2
    b0ec:	88800c15 	stw	r2,48(r17)
    b0f0:	003fd506 	br	b048 <__register_exitproc+0x44>
    b0f4:	30804117 	ldw	r2,260(r6)
    b0f8:	10c4b03a 	or	r2,r2,r3
    b0fc:	30804115 	stw	r2,260(r6)
    b100:	003fe406 	br	b094 <__register_exitproc+0x90>
    b104:	00800034 	movhi	r2,0
    b108:	10800004 	addi	r2,r2,0
    b10c:	10000b26 	beq	r2,zero,b13c <__register_exitproc+0x138>
    b110:	01004204 	movi	r4,264
    b114:	103ee83a 	callr	r2
    b118:	10000826 	beq	r2,zero,b13c <__register_exitproc+0x138>
    b11c:	100d883a 	mov	r6,r2
    b120:	10004015 	stw	zero,256(r2)
    b124:	10004115 	stw	zero,260(r2)
    b128:	80802215 	stw	r2,136(r16)
    b12c:	003fcc06 	br	b060 <__register_exitproc+0x5c>
    b130:	00800034 	movhi	r2,0
    b134:	10800004 	addi	r2,r2,0
    b138:	1000021e 	bne	r2,zero,b144 <__register_exitproc+0x140>
    b13c:	013fffc4 	movi	r4,-1
    b140:	003fdb06 	br	b0b0 <__register_exitproc+0xac>
    b144:	01002304 	movi	r4,140
    b148:	103ee83a 	callr	r2
    b14c:	1007883a 	mov	r3,r2
    b150:	103ffa26 	beq	r2,zero,b13c <__register_exitproc+0x138>
    b154:	88800c17 	ldw	r2,48(r17)
    b158:	1821883a 	mov	r16,r3
    b15c:	18000115 	stw	zero,4(r3)
    b160:	18800015 	stw	r2,0(r3)
    b164:	88c00c15 	stw	r3,48(r17)
    b168:	903fdb26 	beq	r18,zero,b0d8 <__register_exitproc+0xd4>
    b16c:	003fba06 	br	b058 <__register_exitproc+0x54>

0000b170 <register_fini>:
    b170:	f800283a 	ret

0000b174 <__call_exitprocs>:
    b174:	defff304 	addi	sp,sp,-52
    b178:	00800074 	movhi	r2,1
    b17c:	10ade704 	addi	r2,r2,-18532
    b180:	df000b15 	stw	fp,44(sp)
    b184:	17000017 	ldw	fp,0(r2)
    b188:	00800034 	movhi	r2,0
    b18c:	10800004 	addi	r2,r2,0
    b190:	1005003a 	cmpeq	r2,r2,zero
    b194:	d8800215 	stw	r2,8(sp)
    b198:	e0800c04 	addi	r2,fp,48
    b19c:	dd800915 	stw	r22,36(sp)
    b1a0:	dd400815 	stw	r21,32(sp)
    b1a4:	dfc00c15 	stw	ra,48(sp)
    b1a8:	ddc00a15 	stw	r23,40(sp)
    b1ac:	dd000715 	stw	r20,28(sp)
    b1b0:	dcc00615 	stw	r19,24(sp)
    b1b4:	dc800515 	stw	r18,20(sp)
    b1b8:	dc400415 	stw	r17,16(sp)
    b1bc:	dc000315 	stw	r16,12(sp)
    b1c0:	282d883a 	mov	r22,r5
    b1c4:	d9000115 	stw	r4,4(sp)
    b1c8:	d8800015 	stw	r2,0(sp)
    b1cc:	282b003a 	cmpeq	r21,r5,zero
    b1d0:	e4400c17 	ldw	r17,48(fp)
    b1d4:	88001226 	beq	r17,zero,b220 <__call_exitprocs+0xac>
    b1d8:	ddc00017 	ldw	r23,0(sp)
    b1dc:	88800117 	ldw	r2,4(r17)
    b1e0:	8c802217 	ldw	r18,136(r17)
    b1e4:	143fffc4 	addi	r16,r2,-1
    b1e8:	80000b16 	blt	r16,zero,b218 <__call_exitprocs+0xa4>
    b1ec:	9027003a 	cmpeq	r19,r18,zero
    b1f0:	a800171e 	bne	r21,zero,b250 <__call_exitprocs+0xdc>
    b1f4:	9800051e 	bne	r19,zero,b20c <__call_exitprocs+0x98>
    b1f8:	8409883a 	add	r4,r16,r16
    b1fc:	2105883a 	add	r2,r4,r4
    b200:	1485883a 	add	r2,r2,r18
    b204:	10c02017 	ldw	r3,128(r2)
    b208:	b0c01226 	beq	r22,r3,b254 <__call_exitprocs+0xe0>
    b20c:	843fffc4 	addi	r16,r16,-1
    b210:	00bfffc4 	movi	r2,-1
    b214:	80bff61e 	bne	r16,r2,b1f0 <__call_exitprocs+0x7c>
    b218:	d8800217 	ldw	r2,8(sp)
    b21c:	10003226 	beq	r2,zero,b2e8 <__call_exitprocs+0x174>
    b220:	dfc00c17 	ldw	ra,48(sp)
    b224:	df000b17 	ldw	fp,44(sp)
    b228:	ddc00a17 	ldw	r23,40(sp)
    b22c:	dd800917 	ldw	r22,36(sp)
    b230:	dd400817 	ldw	r21,32(sp)
    b234:	dd000717 	ldw	r20,28(sp)
    b238:	dcc00617 	ldw	r19,24(sp)
    b23c:	dc800517 	ldw	r18,20(sp)
    b240:	dc400417 	ldw	r17,16(sp)
    b244:	dc000317 	ldw	r16,12(sp)
    b248:	dec00d04 	addi	sp,sp,52
    b24c:	f800283a 	ret
    b250:	8409883a 	add	r4,r16,r16
    b254:	88c00117 	ldw	r3,4(r17)
    b258:	2105883a 	add	r2,r4,r4
    b25c:	1445883a 	add	r2,r2,r17
    b260:	18ffffc4 	addi	r3,r3,-1
    b264:	11800217 	ldw	r6,8(r2)
    b268:	1c001826 	beq	r3,r16,b2cc <__call_exitprocs+0x158>
    b26c:	10000215 	stw	zero,8(r2)
    b270:	303fe626 	beq	r6,zero,b20c <__call_exitprocs+0x98>
    b274:	8d000117 	ldw	r20,4(r17)
    b278:	9800121e 	bne	r19,zero,b2c4 <__call_exitprocs+0x150>
    b27c:	00c00044 	movi	r3,1
    b280:	1c06983a 	sll	r3,r3,r16
    b284:	90804017 	ldw	r2,256(r18)
    b288:	1884703a 	and	r2,r3,r2
    b28c:	10000d26 	beq	r2,zero,b2c4 <__call_exitprocs+0x150>
    b290:	90804117 	ldw	r2,260(r18)
    b294:	1884703a 	and	r2,r3,r2
    b298:	10000e1e 	bne	r2,zero,b2d4 <__call_exitprocs+0x160>
    b29c:	2105883a 	add	r2,r4,r4
    b2a0:	1485883a 	add	r2,r2,r18
    b2a4:	11400017 	ldw	r5,0(r2)
    b2a8:	d9000117 	ldw	r4,4(sp)
    b2ac:	303ee83a 	callr	r6
    b2b0:	88800117 	ldw	r2,4(r17)
    b2b4:	a0bfc61e 	bne	r20,r2,b1d0 <__call_exitprocs+0x5c>
    b2b8:	b8800017 	ldw	r2,0(r23)
    b2bc:	147fd326 	beq	r2,r17,b20c <__call_exitprocs+0x98>
    b2c0:	003fc306 	br	b1d0 <__call_exitprocs+0x5c>
    b2c4:	303ee83a 	callr	r6
    b2c8:	003ff906 	br	b2b0 <__call_exitprocs+0x13c>
    b2cc:	8c000115 	stw	r16,4(r17)
    b2d0:	003fe706 	br	b270 <__call_exitprocs+0xfc>
    b2d4:	2105883a 	add	r2,r4,r4
    b2d8:	1485883a 	add	r2,r2,r18
    b2dc:	11000017 	ldw	r4,0(r2)
    b2e0:	303ee83a 	callr	r6
    b2e4:	003ff206 	br	b2b0 <__call_exitprocs+0x13c>
    b2e8:	88800117 	ldw	r2,4(r17)
    b2ec:	10000b1e 	bne	r2,zero,b31c <__call_exitprocs+0x1a8>
    b2f0:	89000017 	ldw	r4,0(r17)
    b2f4:	20000a26 	beq	r4,zero,b320 <__call_exitprocs+0x1ac>
    b2f8:	b9000015 	stw	r4,0(r23)
    b2fc:	90000226 	beq	r18,zero,b308 <__call_exitprocs+0x194>
    b300:	9009883a 	mov	r4,r18
    b304:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    b308:	8809883a 	mov	r4,r17
    b30c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    b310:	bc400017 	ldw	r17,0(r23)
    b314:	883fb11e 	bne	r17,zero,b1dc <__call_exitprocs+0x68>
    b318:	003fc106 	br	b220 <__call_exitprocs+0xac>
    b31c:	89000017 	ldw	r4,0(r17)
    b320:	882f883a 	mov	r23,r17
    b324:	2023883a 	mov	r17,r4
    b328:	883fac1e 	bne	r17,zero,b1dc <__call_exitprocs+0x68>
    b32c:	003fbc06 	br	b220 <__call_exitprocs+0xac>

0000b330 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    b330:	defffd04 	addi	sp,sp,-12
    b334:	df000215 	stw	fp,8(sp)
    b338:	df000204 	addi	fp,sp,8
    b33c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    b340:	e0bfff17 	ldw	r2,-4(fp)
    b344:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b348:	e0bffe17 	ldw	r2,-8(fp)
    b34c:	1005003a 	cmpeq	r2,r2,zero
    b350:	1000021e 	bne	r2,zero,b35c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    b354:	002af070 	cmpltui	zero,zero,43969
    b358:	00000106 	br	b360 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    b35c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    b360:	e037883a 	mov	sp,fp
    b364:	df000017 	ldw	fp,0(sp)
    b368:	dec00104 	addi	sp,sp,4
    b36c:	f800283a 	ret

0000b370 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b370:	defffd04 	addi	sp,sp,-12
    b374:	dfc00215 	stw	ra,8(sp)
    b378:	df000115 	stw	fp,4(sp)
    b37c:	df000104 	addi	fp,sp,4
    b380:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    b384:	e13fff17 	ldw	r4,-4(fp)
    b388:	000b3300 	call	b330 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b38c:	003fff06 	br	b38c <_exit+0x1c>
    b390:	0000b170 	cmpltui	zero,zero,709
