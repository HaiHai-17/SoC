
vd1.elf:     file format elf32-littlenios2
vd1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800020

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000017ac memsz 0x000017ac flags r-x
    LOAD off    0x000027cc vaddr 0x008017cc paddr 0x00801aa0 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002d74 vaddr 0x00801d74 paddr 0x00801d74 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001760  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  00801780  00801780  00002780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  008017cc  00801aa0  000027cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  00801d74  00801d74  00002d74  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000448  00000000  00000000  00002ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000005c2  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000079ca  00000000  00000000  000034d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001c33  00000000  00000000  0000ae9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000050ab  00000000  00000000  0000cacf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000006fc  00000000  00000000  00011b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000b3b  00000000  00000000  00012278  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000c8b  00000000  00000000  00012db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00013a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00013a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00015030  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00015033  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001503f  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00015040  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00015041  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0001504c  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00015057  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  00015062  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000010  00000000  00000000  00015068  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000250b7  00000000  00000000  00015078  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .text	00000000 .text
00801780 l    d  .rodata	00000000 .rodata
008017cc l    d  .rwdata	00000000 .rwdata
00801d74 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
008017cc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00800308 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00800504 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008018ac l     O .rwdata	0000002c jtag_uart_0
008005c8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00800958 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
008009d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00800ab4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00800bf8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00800d48 l     F .text	000000f8 alt_file_locked
00800fcc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00801524 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080171c l     F .text	00000040 alt_sim_halt
00800374 g     F .text	0000006c alt_main
00800090 g     F .text	00000090 _puts_r
00801aa0 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000000c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00801d74 g     O .bss	00000004 errno
00801d7c g     O .bss	00000004 alt_argv
00809a80 g       *ABS*	00000000 _gp
00801900 g     O .rwdata	00000180 alt_fd_list
008010c4 g     F .text	00000094 alt_find_dev
00800cd0 g     F .text	00000078 alt_io_redirect
00801780 g       *ABS*	00000000 __DTOR_END__
00800120 g     F .text	00000014 puts
008006b0 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00801a98 g     O .rwdata	00000004 alt_max_fd
00801a84 g     O .rwdata	00000004 _global_impure_ptr
00801e10 g       *ABS*	00000000 __bss_end
008018d8 g     O .rwdata	00000028 alt_dev_null
008009b8 g     F .text	0000001c alt_dcache_flush_all
00801aa0 g       *ABS*	00000000 __ram_rwdata_end
00801a90 g     O .rwdata	00000008 alt_dev_list
008003e0 g     F .text	00000124 write
008017cc g       *ABS*	00000000 __ram_rodata_end
00801e10 g       *ABS*	00000000 end
0080177c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008007b4 g     F .text	000000a4 altera_avalon_jtag_uart_write
00801528 g     F .text	000001bc __call_exitprocs
00800020 g     F .text	0000003c _start
00800598 g     F .text	00000030 alt_sys_init
008013b8 g     F .text	0000016c __register_exitproc
008016e4 g     F .text	00000038 __mulsi3
008017cc g       *ABS*	00000000 __ram_rwdata_start
00801780 g       *ABS*	00000000 __ram_rodata_start
00800600 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00801278 g     F .text	000000d0 alt_get_fd
0080137c g     F .text	0000003c memcmp
00801e10 g       *ABS*	00000000 __alt_stack_base
00801158 g     F .text	00000120 alt_find_file
00800a00 g     F .text	000000b4 alt_dev_llist_insert
00800154 g     F .text	000000bc __sfvwrite_small_dev
00801d74 g       *ABS*	00000000 __bss_start
0080005c g     F .text	00000034 main
00801d80 g     O .bss	00000004 alt_envp
00800658 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00801d84 g     O .bss	0000008c _atexit0
00801a9c g     O .rwdata	00000004 alt_errno
00801780 g       *ABS*	00000000 __CTOR_END__
00801780 g       *ABS*	00000000 __flash_rodata_start
00801780 g       *ABS*	00000000 __DTOR_LIST__
00800564 g     F .text	00000034 alt_irq_init
0080102c g     F .text	00000078 alt_release_fd
00801348 g     F .text	00000014 atexit
00800210 g     F .text	00000078 _write_r
00801a80 g     O .rwdata	00000004 _impure_ptr
00801d78 g     O .bss	00000004 alt_argc
00800b78 g     F .text	00000064 _do_dtors
00801a88 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00801aa0 g       *ABS*	00000000 _edata
00801e10 g       *ABS*	00000000 _end
00800020 g       *ABS*	00000000 __ram_exceptions_end
008010a4 g     F .text	00000020 altera_nios2_qsys_irq_init
0080135c g     F .text	00000020 exit
01000000 g       *ABS*	00000000 __alt_data_end
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080175c g     F .text	00000020 _exit
00800134 g     F .text	00000020 strlen
00800e40 g     F .text	0000018c open
00800bdc g     F .text	0000001c alt_icache_flush_all
00800b14 g     F .text	00000064 _do_ctors
00800858 g     F .text	00000100 close
00800288 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08400814 	ori	at,at,32
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00800020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800020:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800028:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80002c:	d6a6a014 	ori	gp,gp,39552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800030:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800034:	10875d14 	ori	r2,r2,7540

    movhi r3, %hi(__bss_end)
  800038:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80003c:	18c78414 	ori	r3,r3,7696

    beq r2, r3, 1f
  800040:	10c00326 	beq	r2,r3,800050 <_start+0x30>

0:
    stw zero, (r2)
  800044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80004c:	10fffd36 	bltu	r2,r3,800044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800050:	08002880 	call	800288 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800054:	08003740 	call	800374 <alt_main>

00800058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800058:	003fff06 	br	800058 <alt_after_alt_main>

0080005c <main>:
 */

#include <stdio.h>

int main()
{
  80005c:	defffe04 	addi	sp,sp,-8
  800060:	dfc00115 	stw	ra,4(sp)
  800064:	df000015 	stw	fp,0(sp)
  800068:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
  80006c:	01002034 	movhi	r4,128
  800070:	2105e004 	addi	r4,r4,6016
  800074:	08001200 	call	800120 <puts>

  return 0;
  800078:	0005883a 	mov	r2,zero
}
  80007c:	e037883a 	mov	sp,fp
  800080:	dfc00117 	ldw	ra,4(sp)
  800084:	df000017 	ldw	fp,0(sp)
  800088:	dec00204 	addi	sp,sp,8
  80008c:	f800283a 	ret

00800090 <_puts_r>:
  800090:	defffd04 	addi	sp,sp,-12
  800094:	dc000015 	stw	r16,0(sp)
  800098:	2021883a 	mov	r16,r4
  80009c:	2809883a 	mov	r4,r5
  8000a0:	dfc00215 	stw	ra,8(sp)
  8000a4:	dc400115 	stw	r17,4(sp)
  8000a8:	2823883a 	mov	r17,r5
  8000ac:	08001340 	call	800134 <strlen>
  8000b0:	80c00217 	ldw	r3,8(r16)
  8000b4:	02002034 	movhi	r8,128
  8000b8:	42005504 	addi	r8,r8,340
  8000bc:	880d883a 	mov	r6,r17
  8000c0:	100f883a 	mov	r7,r2
  8000c4:	8009883a 	mov	r4,r16
  8000c8:	180b883a 	mov	r5,r3
  8000cc:	1a000115 	stw	r8,4(r3)
  8000d0:	403ee83a 	callr	r8
  8000d4:	047fffc4 	movi	r17,-1
  8000d8:	8009883a 	mov	r4,r16
  8000dc:	01802034 	movhi	r6,128
  8000e0:	3185e504 	addi	r6,r6,6036
  8000e4:	01c00044 	movi	r7,1
  8000e8:	1440071e 	bne	r2,r17,800108 <_puts_r+0x78>
  8000ec:	00ffffc4 	movi	r3,-1
  8000f0:	1805883a 	mov	r2,r3
  8000f4:	dfc00217 	ldw	ra,8(sp)
  8000f8:	dc400117 	ldw	r17,4(sp)
  8000fc:	dc000017 	ldw	r16,0(sp)
  800100:	dec00304 	addi	sp,sp,12
  800104:	f800283a 	ret
  800108:	81400217 	ldw	r5,8(r16)
  80010c:	28c00117 	ldw	r3,4(r5)
  800110:	183ee83a 	callr	r3
  800114:	0007883a 	mov	r3,zero
  800118:	147ff51e 	bne	r2,r17,8000f0 <_puts_r+0x60>
  80011c:	003ff306 	br	8000ec <_puts_r+0x5c>

00800120 <puts>:
  800120:	00802034 	movhi	r2,128
  800124:	1086a004 	addi	r2,r2,6784
  800128:	200b883a 	mov	r5,r4
  80012c:	11000017 	ldw	r4,0(r2)
  800130:	08000901 	jmpi	800090 <_puts_r>

00800134 <strlen>:
  800134:	20800007 	ldb	r2,0(r4)
  800138:	10000526 	beq	r2,zero,800150 <strlen+0x1c>
  80013c:	2007883a 	mov	r3,r4
  800140:	18c00044 	addi	r3,r3,1
  800144:	18800007 	ldb	r2,0(r3)
  800148:	103ffd1e 	bne	r2,zero,800140 <strlen+0xc>
  80014c:	1905c83a 	sub	r2,r3,r4
  800150:	f800283a 	ret

00800154 <__sfvwrite_small_dev>:
  800154:	2880000b 	ldhu	r2,0(r5)
  800158:	defffa04 	addi	sp,sp,-24
  80015c:	dcc00315 	stw	r19,12(sp)
  800160:	1080020c 	andi	r2,r2,8
  800164:	dc800215 	stw	r18,8(sp)
  800168:	dc400115 	stw	r17,4(sp)
  80016c:	dfc00515 	stw	ra,20(sp)
  800170:	dd000415 	stw	r20,16(sp)
  800174:	dc000015 	stw	r16,0(sp)
  800178:	2825883a 	mov	r18,r5
  80017c:	2027883a 	mov	r19,r4
  800180:	3023883a 	mov	r17,r6
  800184:	10002026 	beq	r2,zero,800208 <__sfvwrite_small_dev+0xb4>
  800188:	2940008f 	ldh	r5,2(r5)
  80018c:	28000f16 	blt	r5,zero,8001cc <__sfvwrite_small_dev+0x78>
  800190:	01c01b0e 	bge	zero,r7,800200 <__sfvwrite_small_dev+0xac>
  800194:	3821883a 	mov	r16,r7
  800198:	05010004 	movi	r20,1024
  80019c:	00000206 	br	8001a8 <__sfvwrite_small_dev+0x54>
  8001a0:	0400170e 	bge	zero,r16,800200 <__sfvwrite_small_dev+0xac>
  8001a4:	9140008f 	ldh	r5,2(r18)
  8001a8:	880d883a 	mov	r6,r17
  8001ac:	9809883a 	mov	r4,r19
  8001b0:	800f883a 	mov	r7,r16
  8001b4:	a400010e 	bge	r20,r16,8001bc <__sfvwrite_small_dev+0x68>
  8001b8:	01c10004 	movi	r7,1024
  8001bc:	08002100 	call	800210 <_write_r>
  8001c0:	88a3883a 	add	r17,r17,r2
  8001c4:	80a1c83a 	sub	r16,r16,r2
  8001c8:	00bff516 	blt	zero,r2,8001a0 <__sfvwrite_small_dev+0x4c>
  8001cc:	9080000b 	ldhu	r2,0(r18)
  8001d0:	00ffffc4 	movi	r3,-1
  8001d4:	10801014 	ori	r2,r2,64
  8001d8:	9080000d 	sth	r2,0(r18)
  8001dc:	1805883a 	mov	r2,r3
  8001e0:	dfc00517 	ldw	ra,20(sp)
  8001e4:	dd000417 	ldw	r20,16(sp)
  8001e8:	dcc00317 	ldw	r19,12(sp)
  8001ec:	dc800217 	ldw	r18,8(sp)
  8001f0:	dc400117 	ldw	r17,4(sp)
  8001f4:	dc000017 	ldw	r16,0(sp)
  8001f8:	dec00604 	addi	sp,sp,24
  8001fc:	f800283a 	ret
  800200:	0007883a 	mov	r3,zero
  800204:	003ff506 	br	8001dc <__sfvwrite_small_dev+0x88>
  800208:	00ffffc4 	movi	r3,-1
  80020c:	003ff306 	br	8001dc <__sfvwrite_small_dev+0x88>

00800210 <_write_r>:
  800210:	defffd04 	addi	sp,sp,-12
  800214:	dc000015 	stw	r16,0(sp)
  800218:	04002034 	movhi	r16,128
  80021c:	84075d04 	addi	r16,r16,7540
  800220:	dc400115 	stw	r17,4(sp)
  800224:	80000015 	stw	zero,0(r16)
  800228:	2023883a 	mov	r17,r4
  80022c:	2809883a 	mov	r4,r5
  800230:	300b883a 	mov	r5,r6
  800234:	380d883a 	mov	r6,r7
  800238:	dfc00215 	stw	ra,8(sp)
  80023c:	08003e00 	call	8003e0 <write>
  800240:	1007883a 	mov	r3,r2
  800244:	00bfffc4 	movi	r2,-1
  800248:	18800626 	beq	r3,r2,800264 <_write_r+0x54>
  80024c:	1805883a 	mov	r2,r3
  800250:	dfc00217 	ldw	ra,8(sp)
  800254:	dc400117 	ldw	r17,4(sp)
  800258:	dc000017 	ldw	r16,0(sp)
  80025c:	dec00304 	addi	sp,sp,12
  800260:	f800283a 	ret
  800264:	80800017 	ldw	r2,0(r16)
  800268:	103ff826 	beq	r2,zero,80024c <_write_r+0x3c>
  80026c:	88800015 	stw	r2,0(r17)
  800270:	1805883a 	mov	r2,r3
  800274:	dfc00217 	ldw	ra,8(sp)
  800278:	dc400117 	ldw	r17,4(sp)
  80027c:	dc000017 	ldw	r16,0(sp)
  800280:	dec00304 	addi	sp,sp,12
  800284:	f800283a 	ret

00800288 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800288:	defffe04 	addi	sp,sp,-8
  80028c:	dfc00115 	stw	ra,4(sp)
  800290:	df000015 	stw	fp,0(sp)
  800294:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800298:	01002034 	movhi	r4,128
  80029c:	2106a804 	addi	r4,r4,6816
  8002a0:	01402034 	movhi	r5,128
  8002a4:	2945f304 	addi	r5,r5,6092
  8002a8:	01802034 	movhi	r6,128
  8002ac:	3186a804 	addi	r6,r6,6816
  8002b0:	08003080 	call	800308 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8002b4:	01002034 	movhi	r4,128
  8002b8:	21000804 	addi	r4,r4,32
  8002bc:	01402034 	movhi	r5,128
  8002c0:	29400804 	addi	r5,r5,32
  8002c4:	01802034 	movhi	r6,128
  8002c8:	31800804 	addi	r6,r6,32
  8002cc:	08003080 	call	800308 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8002d0:	01002034 	movhi	r4,128
  8002d4:	2105e004 	addi	r4,r4,6016
  8002d8:	01402034 	movhi	r5,128
  8002dc:	2945e004 	addi	r5,r5,6016
  8002e0:	01802034 	movhi	r6,128
  8002e4:	3185f304 	addi	r6,r6,6092
  8002e8:	08003080 	call	800308 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8002ec:	08009b80 	call	8009b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8002f0:	0800bdc0 	call	800bdc <alt_icache_flush_all>
}
  8002f4:	e037883a 	mov	sp,fp
  8002f8:	dfc00117 	ldw	ra,4(sp)
  8002fc:	df000017 	ldw	fp,0(sp)
  800300:	dec00204 	addi	sp,sp,8
  800304:	f800283a 	ret

00800308 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800308:	defffc04 	addi	sp,sp,-16
  80030c:	df000315 	stw	fp,12(sp)
  800310:	df000304 	addi	fp,sp,12
  800314:	e13ffd15 	stw	r4,-12(fp)
  800318:	e17ffe15 	stw	r5,-8(fp)
  80031c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  800320:	e0fffe17 	ldw	r3,-8(fp)
  800324:	e0bffd17 	ldw	r2,-12(fp)
  800328:	18800e26 	beq	r3,r2,800364 <alt_load_section+0x5c>
  {
    while( to != end )
  80032c:	00000a06 	br	800358 <alt_load_section+0x50>
    {
      *to++ = *from++;
  800330:	e0bffd17 	ldw	r2,-12(fp)
  800334:	10c00017 	ldw	r3,0(r2)
  800338:	e0bffe17 	ldw	r2,-8(fp)
  80033c:	10c00015 	stw	r3,0(r2)
  800340:	e0bffe17 	ldw	r2,-8(fp)
  800344:	10800104 	addi	r2,r2,4
  800348:	e0bffe15 	stw	r2,-8(fp)
  80034c:	e0bffd17 	ldw	r2,-12(fp)
  800350:	10800104 	addi	r2,r2,4
  800354:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  800358:	e0fffe17 	ldw	r3,-8(fp)
  80035c:	e0bfff17 	ldw	r2,-4(fp)
  800360:	18bff31e 	bne	r3,r2,800330 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  800364:	e037883a 	mov	sp,fp
  800368:	df000017 	ldw	fp,0(sp)
  80036c:	dec00104 	addi	sp,sp,4
  800370:	f800283a 	ret

00800374 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800374:	defffd04 	addi	sp,sp,-12
  800378:	dfc00215 	stw	ra,8(sp)
  80037c:	df000115 	stw	fp,4(sp)
  800380:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800384:	0009883a 	mov	r4,zero
  800388:	08005640 	call	800564 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80038c:	08005980 	call	800598 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800390:	01002034 	movhi	r4,128
  800394:	2105e604 	addi	r4,r4,6040
  800398:	01402034 	movhi	r5,128
  80039c:	2945e604 	addi	r5,r5,6040
  8003a0:	01802034 	movhi	r6,128
  8003a4:	3185e604 	addi	r6,r6,6040
  8003a8:	0800cd00 	call	800cd0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8003ac:	0800b140 	call	800b14 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8003b0:	01002034 	movhi	r4,128
  8003b4:	2102de04 	addi	r4,r4,2936
  8003b8:	08013480 	call	801348 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8003bc:	d120be17 	ldw	r4,-32008(gp)
  8003c0:	d160bf17 	ldw	r5,-32004(gp)
  8003c4:	d1a0c017 	ldw	r6,-32000(gp)
  8003c8:	080005c0 	call	80005c <main>
  8003cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8003d0:	01000044 	movi	r4,1
  8003d4:	08008580 	call	800858 <close>
  exit (result);
  8003d8:	e13fff17 	ldw	r4,-4(fp)
  8003dc:	080135c0 	call	80135c <exit>

008003e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8003e0:	defff704 	addi	sp,sp,-36
  8003e4:	dfc00815 	stw	ra,32(sp)
  8003e8:	df000715 	stw	fp,28(sp)
  8003ec:	df000704 	addi	fp,sp,28
  8003f0:	e13ffb15 	stw	r4,-20(fp)
  8003f4:	e17ffc15 	stw	r5,-16(fp)
  8003f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8003fc:	e0bffb17 	ldw	r2,-20(fp)
  800400:	1004803a 	cmplt	r2,r2,zero
  800404:	1000091e 	bne	r2,zero,80042c <write+0x4c>
  800408:	e13ffb17 	ldw	r4,-20(fp)
  80040c:	01400304 	movi	r5,12
  800410:	08016e40 	call	8016e4 <__mulsi3>
  800414:	1007883a 	mov	r3,r2
  800418:	00802034 	movhi	r2,128
  80041c:	10864004 	addi	r2,r2,6400
  800420:	1887883a 	add	r3,r3,r2
  800424:	e0ffff15 	stw	r3,-4(fp)
  800428:	00000106 	br	800430 <write+0x50>
  80042c:	e03fff15 	stw	zero,-4(fp)
  800430:	e0bfff17 	ldw	r2,-4(fp)
  800434:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  800438:	e0bffa17 	ldw	r2,-24(fp)
  80043c:	1005003a 	cmpeq	r2,r2,zero
  800440:	1000241e 	bne	r2,zero,8004d4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  800444:	e0bffa17 	ldw	r2,-24(fp)
  800448:	10800217 	ldw	r2,8(r2)
  80044c:	108000cc 	andi	r2,r2,3
  800450:	1005003a 	cmpeq	r2,r2,zero
  800454:	10001a1e 	bne	r2,zero,8004c0 <write+0xe0>
  800458:	e0bffa17 	ldw	r2,-24(fp)
  80045c:	10800017 	ldw	r2,0(r2)
  800460:	10800617 	ldw	r2,24(r2)
  800464:	1005003a 	cmpeq	r2,r2,zero
  800468:	1000151e 	bne	r2,zero,8004c0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80046c:	e0bffa17 	ldw	r2,-24(fp)
  800470:	10800017 	ldw	r2,0(r2)
  800474:	10800617 	ldw	r2,24(r2)
  800478:	e17ffc17 	ldw	r5,-16(fp)
  80047c:	e1bffd17 	ldw	r6,-12(fp)
  800480:	e13ffa17 	ldw	r4,-24(fp)
  800484:	103ee83a 	callr	r2
  800488:	e0bff915 	stw	r2,-28(fp)
  80048c:	e0bff917 	ldw	r2,-28(fp)
  800490:	1004403a 	cmpge	r2,r2,zero
  800494:	1000071e 	bne	r2,zero,8004b4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  800498:	08005040 	call	800504 <alt_get_errno>
  80049c:	e0fff917 	ldw	r3,-28(fp)
  8004a0:	00c7c83a 	sub	r3,zero,r3
  8004a4:	10c00015 	stw	r3,0(r2)
        return -1;
  8004a8:	00bfffc4 	movi	r2,-1
  8004ac:	e0bffe15 	stw	r2,-8(fp)
  8004b0:	00000e06 	br	8004ec <write+0x10c>
      }
      return rval;
  8004b4:	e0bff917 	ldw	r2,-28(fp)
  8004b8:	e0bffe15 	stw	r2,-8(fp)
  8004bc:	00000b06 	br	8004ec <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8004c0:	08005040 	call	800504 <alt_get_errno>
  8004c4:	1007883a 	mov	r3,r2
  8004c8:	00800344 	movi	r2,13
  8004cc:	18800015 	stw	r2,0(r3)
  8004d0:	00000406 	br	8004e4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8004d4:	08005040 	call	800504 <alt_get_errno>
  8004d8:	1007883a 	mov	r3,r2
  8004dc:	00801444 	movi	r2,81
  8004e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8004e4:	00bfffc4 	movi	r2,-1
  8004e8:	e0bffe15 	stw	r2,-8(fp)
  8004ec:	e0bffe17 	ldw	r2,-8(fp)
}
  8004f0:	e037883a 	mov	sp,fp
  8004f4:	dfc00117 	ldw	ra,4(sp)
  8004f8:	df000017 	ldw	fp,0(sp)
  8004fc:	dec00204 	addi	sp,sp,8
  800500:	f800283a 	ret

00800504 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  800504:	defffd04 	addi	sp,sp,-12
  800508:	dfc00215 	stw	ra,8(sp)
  80050c:	df000115 	stw	fp,4(sp)
  800510:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  800514:	00802034 	movhi	r2,128
  800518:	1086a704 	addi	r2,r2,6812
  80051c:	10800017 	ldw	r2,0(r2)
  800520:	1005003a 	cmpeq	r2,r2,zero
  800524:	1000061e 	bne	r2,zero,800540 <alt_get_errno+0x3c>
  800528:	00802034 	movhi	r2,128
  80052c:	1086a704 	addi	r2,r2,6812
  800530:	10800017 	ldw	r2,0(r2)
  800534:	103ee83a 	callr	r2
  800538:	e0bfff15 	stw	r2,-4(fp)
  80053c:	00000306 	br	80054c <alt_get_errno+0x48>
  800540:	00802034 	movhi	r2,128
  800544:	10875d04 	addi	r2,r2,7540
  800548:	e0bfff15 	stw	r2,-4(fp)
  80054c:	e0bfff17 	ldw	r2,-4(fp)
}
  800550:	e037883a 	mov	sp,fp
  800554:	dfc00117 	ldw	ra,4(sp)
  800558:	df000017 	ldw	fp,0(sp)
  80055c:	dec00204 	addi	sp,sp,8
  800560:	f800283a 	ret

00800564 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800564:	defffd04 	addi	sp,sp,-12
  800568:	dfc00215 	stw	ra,8(sp)
  80056c:	df000115 	stw	fp,4(sp)
  800570:	df000104 	addi	fp,sp,4
  800574:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  800578:	08010a40 	call	8010a4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80057c:	00800044 	movi	r2,1
  800580:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800584:	e037883a 	mov	sp,fp
  800588:	dfc00117 	ldw	ra,4(sp)
  80058c:	df000017 	ldw	fp,0(sp)
  800590:	dec00204 	addi	sp,sp,8
  800594:	f800283a 	ret

00800598 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  800598:	defffe04 	addi	sp,sp,-8
  80059c:	dfc00115 	stw	ra,4(sp)
  8005a0:	df000015 	stw	fp,0(sp)
  8005a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8005a8:	01002034 	movhi	r4,128
  8005ac:	21062b04 	addi	r4,r4,6316
  8005b0:	08005c80 	call	8005c8 <alt_dev_reg>
}
  8005b4:	e037883a 	mov	sp,fp
  8005b8:	dfc00117 	ldw	ra,4(sp)
  8005bc:	df000017 	ldw	fp,0(sp)
  8005c0:	dec00204 	addi	sp,sp,8
  8005c4:	f800283a 	ret

008005c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8005c8:	defffd04 	addi	sp,sp,-12
  8005cc:	dfc00215 	stw	ra,8(sp)
  8005d0:	df000115 	stw	fp,4(sp)
  8005d4:	df000104 	addi	fp,sp,4
  8005d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8005dc:	e13fff17 	ldw	r4,-4(fp)
  8005e0:	01402034 	movhi	r5,128
  8005e4:	2946a404 	addi	r5,r5,6800
  8005e8:	0800a000 	call	800a00 <alt_dev_llist_insert>
}
  8005ec:	e037883a 	mov	sp,fp
  8005f0:	dfc00117 	ldw	ra,4(sp)
  8005f4:	df000017 	ldw	fp,0(sp)
  8005f8:	dec00204 	addi	sp,sp,8
  8005fc:	f800283a 	ret

00800600 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800600:	defffa04 	addi	sp,sp,-24
  800604:	dfc00515 	stw	ra,20(sp)
  800608:	df000415 	stw	fp,16(sp)
  80060c:	df000404 	addi	fp,sp,16
  800610:	e13ffd15 	stw	r4,-12(fp)
  800614:	e17ffe15 	stw	r5,-8(fp)
  800618:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80061c:	e0bffd17 	ldw	r2,-12(fp)
  800620:	10800017 	ldw	r2,0(r2)
  800624:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  800628:	e0bffc17 	ldw	r2,-16(fp)
  80062c:	11000a04 	addi	r4,r2,40
  800630:	e0bffd17 	ldw	r2,-12(fp)
  800634:	11c00217 	ldw	r7,8(r2)
  800638:	e17ffe17 	ldw	r5,-8(fp)
  80063c:	e1bfff17 	ldw	r6,-4(fp)
  800640:	08006b00 	call	8006b0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  800644:	e037883a 	mov	sp,fp
  800648:	dfc00117 	ldw	ra,4(sp)
  80064c:	df000017 	ldw	fp,0(sp)
  800650:	dec00204 	addi	sp,sp,8
  800654:	f800283a 	ret

00800658 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  800658:	defffa04 	addi	sp,sp,-24
  80065c:	dfc00515 	stw	ra,20(sp)
  800660:	df000415 	stw	fp,16(sp)
  800664:	df000404 	addi	fp,sp,16
  800668:	e13ffd15 	stw	r4,-12(fp)
  80066c:	e17ffe15 	stw	r5,-8(fp)
  800670:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800674:	e0bffd17 	ldw	r2,-12(fp)
  800678:	10800017 	ldw	r2,0(r2)
  80067c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  800680:	e0bffc17 	ldw	r2,-16(fp)
  800684:	11000a04 	addi	r4,r2,40
  800688:	e0bffd17 	ldw	r2,-12(fp)
  80068c:	11c00217 	ldw	r7,8(r2)
  800690:	e17ffe17 	ldw	r5,-8(fp)
  800694:	e1bfff17 	ldw	r6,-4(fp)
  800698:	08007b40 	call	8007b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80069c:	e037883a 	mov	sp,fp
  8006a0:	dfc00117 	ldw	ra,4(sp)
  8006a4:	df000017 	ldw	fp,0(sp)
  8006a8:	dec00204 	addi	sp,sp,8
  8006ac:	f800283a 	ret

008006b0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  8006b0:	defff604 	addi	sp,sp,-40
  8006b4:	df000915 	stw	fp,36(sp)
  8006b8:	df000904 	addi	fp,sp,36
  8006bc:	e13ffb15 	stw	r4,-20(fp)
  8006c0:	e17ffc15 	stw	r5,-16(fp)
  8006c4:	e1bffd15 	stw	r6,-12(fp)
  8006c8:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
  8006cc:	e0bffb17 	ldw	r2,-20(fp)
  8006d0:	10800017 	ldw	r2,0(r2)
  8006d4:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
  8006d8:	e0bffc17 	ldw	r2,-16(fp)
  8006dc:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
  8006e0:	e0bffd17 	ldw	r2,-12(fp)
  8006e4:	1007883a 	mov	r3,r2
  8006e8:	e0bffc17 	ldw	r2,-16(fp)
  8006ec:	10c5883a 	add	r2,r2,r3
  8006f0:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
  8006f4:	00001606 	br	800750 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8006f8:	e0bffa17 	ldw	r2,-24(fp)
  8006fc:	10800037 	ldwio	r2,0(r2)
  800700:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  800704:	e0bff717 	ldw	r2,-36(fp)
  800708:	10a0000c 	andi	r2,r2,32768
  80070c:	1005003a 	cmpeq	r2,r2,zero
  800710:	1000081e 	bne	r2,zero,800734 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  800714:	e0bff717 	ldw	r2,-36(fp)
  800718:	1007883a 	mov	r3,r2
  80071c:	e0bff917 	ldw	r2,-28(fp)
  800720:	10c00005 	stb	r3,0(r2)
  800724:	e0bff917 	ldw	r2,-28(fp)
  800728:	10800044 	addi	r2,r2,1
  80072c:	e0bff915 	stw	r2,-28(fp)
  800730:	00000706 	br	800750 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
  800734:	e0fff917 	ldw	r3,-28(fp)
  800738:	e0bffc17 	ldw	r2,-16(fp)
  80073c:	1880071e 	bne	r3,r2,80075c <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
  800740:	e0bffe17 	ldw	r2,-8(fp)
  800744:	1090000c 	andi	r2,r2,16384
  800748:	1004c03a 	cmpne	r2,r2,zero
  80074c:	1000031e 	bne	r2,zero,80075c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  800750:	e0fff917 	ldw	r3,-28(fp)
  800754:	e0bff817 	ldw	r2,-32(fp)
  800758:	18bfe736 	bltu	r3,r2,8006f8 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
  80075c:	e0fff917 	ldw	r3,-28(fp)
  800760:	e0bffc17 	ldw	r2,-16(fp)
  800764:	18800526 	beq	r3,r2,80077c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
  800768:	e0fff917 	ldw	r3,-28(fp)
  80076c:	e0bffc17 	ldw	r2,-16(fp)
  800770:	1887c83a 	sub	r3,r3,r2
  800774:	e0ffff15 	stw	r3,-4(fp)
  800778:	00000906 	br	8007a0 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
  80077c:	e0bffe17 	ldw	r2,-8(fp)
  800780:	1090000c 	andi	r2,r2,16384
  800784:	1005003a 	cmpeq	r2,r2,zero
  800788:	1000031e 	bne	r2,zero,800798 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
  80078c:	00bffd44 	movi	r2,-11
  800790:	e0bfff15 	stw	r2,-4(fp)
  800794:	00000206 	br	8007a0 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
  800798:	00bffec4 	movi	r2,-5
  80079c:	e0bfff15 	stw	r2,-4(fp)
  8007a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8007a4:	e037883a 	mov	sp,fp
  8007a8:	df000017 	ldw	fp,0(sp)
  8007ac:	dec00104 	addi	sp,sp,4
  8007b0:	f800283a 	ret

008007b4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8007b4:	defff904 	addi	sp,sp,-28
  8007b8:	df000615 	stw	fp,24(sp)
  8007bc:	df000604 	addi	fp,sp,24
  8007c0:	e13ffc15 	stw	r4,-16(fp)
  8007c4:	e17ffd15 	stw	r5,-12(fp)
  8007c8:	e1bffe15 	stw	r6,-8(fp)
  8007cc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  8007d0:	e0bffc17 	ldw	r2,-16(fp)
  8007d4:	10800017 	ldw	r2,0(r2)
  8007d8:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
  8007dc:	e0bffe17 	ldw	r2,-8(fp)
  8007e0:	1007883a 	mov	r3,r2
  8007e4:	e0bffd17 	ldw	r2,-12(fp)
  8007e8:	10c5883a 	add	r2,r2,r3
  8007ec:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  8007f0:	00001106 	br	800838 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8007f4:	e0bffb17 	ldw	r2,-20(fp)
  8007f8:	10800104 	addi	r2,r2,4
  8007fc:	10800037 	ldwio	r2,0(r2)
  800800:	10bfffec 	andhi	r2,r2,65535
  800804:	1005003a 	cmpeq	r2,r2,zero
  800808:	10000b1e 	bne	r2,zero,800838 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  80080c:	e13ffb17 	ldw	r4,-20(fp)
  800810:	e0bffd17 	ldw	r2,-12(fp)
  800814:	10800003 	ldbu	r2,0(r2)
  800818:	10c03fcc 	andi	r3,r2,255
  80081c:	18c0201c 	xori	r3,r3,128
  800820:	18ffe004 	addi	r3,r3,-128
  800824:	e0bffd17 	ldw	r2,-12(fp)
  800828:	10800044 	addi	r2,r2,1
  80082c:	e0bffd15 	stw	r2,-12(fp)
  800830:	2005883a 	mov	r2,r4
  800834:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  800838:	e0fffd17 	ldw	r3,-12(fp)
  80083c:	e0bffa17 	ldw	r2,-24(fp)
  800840:	18bfec36 	bltu	r3,r2,8007f4 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  800844:	e0bffe17 	ldw	r2,-8(fp)
}
  800848:	e037883a 	mov	sp,fp
  80084c:	df000017 	ldw	fp,0(sp)
  800850:	dec00104 	addi	sp,sp,4
  800854:	f800283a 	ret

00800858 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  800858:	defff804 	addi	sp,sp,-32
  80085c:	dfc00715 	stw	ra,28(sp)
  800860:	df000615 	stw	fp,24(sp)
  800864:	df000604 	addi	fp,sp,24
  800868:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80086c:	e0bffc17 	ldw	r2,-16(fp)
  800870:	1004803a 	cmplt	r2,r2,zero
  800874:	1000091e 	bne	r2,zero,80089c <close+0x44>
  800878:	e13ffc17 	ldw	r4,-16(fp)
  80087c:	01400304 	movi	r5,12
  800880:	08016e40 	call	8016e4 <__mulsi3>
  800884:	1007883a 	mov	r3,r2
  800888:	00802034 	movhi	r2,128
  80088c:	10864004 	addi	r2,r2,6400
  800890:	1887883a 	add	r3,r3,r2
  800894:	e0ffff15 	stw	r3,-4(fp)
  800898:	00000106 	br	8008a0 <close+0x48>
  80089c:	e03fff15 	stw	zero,-4(fp)
  8008a0:	e0bfff17 	ldw	r2,-4(fp)
  8008a4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  8008a8:	e0bffb17 	ldw	r2,-20(fp)
  8008ac:	1005003a 	cmpeq	r2,r2,zero
  8008b0:	10001d1e 	bne	r2,zero,800928 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8008b4:	e0bffb17 	ldw	r2,-20(fp)
  8008b8:	10800017 	ldw	r2,0(r2)
  8008bc:	10800417 	ldw	r2,16(r2)
  8008c0:	1005003a 	cmpeq	r2,r2,zero
  8008c4:	1000071e 	bne	r2,zero,8008e4 <close+0x8c>
  8008c8:	e0bffb17 	ldw	r2,-20(fp)
  8008cc:	10800017 	ldw	r2,0(r2)
  8008d0:	10800417 	ldw	r2,16(r2)
  8008d4:	e13ffb17 	ldw	r4,-20(fp)
  8008d8:	103ee83a 	callr	r2
  8008dc:	e0bffe15 	stw	r2,-8(fp)
  8008e0:	00000106 	br	8008e8 <close+0x90>
  8008e4:	e03ffe15 	stw	zero,-8(fp)
  8008e8:	e0bffe17 	ldw	r2,-8(fp)
  8008ec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8008f0:	e13ffc17 	ldw	r4,-16(fp)
  8008f4:	080102c0 	call	80102c <alt_release_fd>
    if (rval < 0)
  8008f8:	e0bffa17 	ldw	r2,-24(fp)
  8008fc:	1004403a 	cmpge	r2,r2,zero
  800900:	1000071e 	bne	r2,zero,800920 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  800904:	08009580 	call	800958 <alt_get_errno>
  800908:	e0fffa17 	ldw	r3,-24(fp)
  80090c:	00c7c83a 	sub	r3,zero,r3
  800910:	10c00015 	stw	r3,0(r2)
      return -1;
  800914:	00bfffc4 	movi	r2,-1
  800918:	e0bffd15 	stw	r2,-12(fp)
  80091c:	00000806 	br	800940 <close+0xe8>
    }
    return 0;
  800920:	e03ffd15 	stw	zero,-12(fp)
  800924:	00000606 	br	800940 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  800928:	08009580 	call	800958 <alt_get_errno>
  80092c:	1007883a 	mov	r3,r2
  800930:	00801444 	movi	r2,81
  800934:	18800015 	stw	r2,0(r3)
    return -1;
  800938:	00bfffc4 	movi	r2,-1
  80093c:	e0bffd15 	stw	r2,-12(fp)
  800940:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  800944:	e037883a 	mov	sp,fp
  800948:	dfc00117 	ldw	ra,4(sp)
  80094c:	df000017 	ldw	fp,0(sp)
  800950:	dec00204 	addi	sp,sp,8
  800954:	f800283a 	ret

00800958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  800958:	defffd04 	addi	sp,sp,-12
  80095c:	dfc00215 	stw	ra,8(sp)
  800960:	df000115 	stw	fp,4(sp)
  800964:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  800968:	00802034 	movhi	r2,128
  80096c:	1086a704 	addi	r2,r2,6812
  800970:	10800017 	ldw	r2,0(r2)
  800974:	1005003a 	cmpeq	r2,r2,zero
  800978:	1000061e 	bne	r2,zero,800994 <alt_get_errno+0x3c>
  80097c:	00802034 	movhi	r2,128
  800980:	1086a704 	addi	r2,r2,6812
  800984:	10800017 	ldw	r2,0(r2)
  800988:	103ee83a 	callr	r2
  80098c:	e0bfff15 	stw	r2,-4(fp)
  800990:	00000306 	br	8009a0 <alt_get_errno+0x48>
  800994:	00802034 	movhi	r2,128
  800998:	10875d04 	addi	r2,r2,7540
  80099c:	e0bfff15 	stw	r2,-4(fp)
  8009a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8009a4:	e037883a 	mov	sp,fp
  8009a8:	dfc00117 	ldw	ra,4(sp)
  8009ac:	df000017 	ldw	fp,0(sp)
  8009b0:	dec00204 	addi	sp,sp,8
  8009b4:	f800283a 	ret

008009b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8009b8:	deffff04 	addi	sp,sp,-4
  8009bc:	df000015 	stw	fp,0(sp)
  8009c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8009c4:	e037883a 	mov	sp,fp
  8009c8:	df000017 	ldw	fp,0(sp)
  8009cc:	dec00104 	addi	sp,sp,4
  8009d0:	f800283a 	ret

008009d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8009d4:	defffc04 	addi	sp,sp,-16
  8009d8:	df000315 	stw	fp,12(sp)
  8009dc:	df000304 	addi	fp,sp,12
  8009e0:	e13ffd15 	stw	r4,-12(fp)
  8009e4:	e17ffe15 	stw	r5,-8(fp)
  8009e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8009ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8009f0:	e037883a 	mov	sp,fp
  8009f4:	df000017 	ldw	fp,0(sp)
  8009f8:	dec00104 	addi	sp,sp,4
  8009fc:	f800283a 	ret

00800a00 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  800a00:	defff904 	addi	sp,sp,-28
  800a04:	dfc00615 	stw	ra,24(sp)
  800a08:	df000515 	stw	fp,20(sp)
  800a0c:	df000504 	addi	fp,sp,20
  800a10:	e13ffd15 	stw	r4,-12(fp)
  800a14:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  800a18:	e0bffd17 	ldw	r2,-12(fp)
  800a1c:	1005003a 	cmpeq	r2,r2,zero
  800a20:	1000041e 	bne	r2,zero,800a34 <alt_dev_llist_insert+0x34>
  800a24:	e0bffd17 	ldw	r2,-12(fp)
  800a28:	10800217 	ldw	r2,8(r2)
  800a2c:	1004c03a 	cmpne	r2,r2,zero
  800a30:	1000071e 	bne	r2,zero,800a50 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  800a34:	0800ab40 	call	800ab4 <alt_get_errno>
  800a38:	1007883a 	mov	r3,r2
  800a3c:	00800584 	movi	r2,22
  800a40:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  800a44:	00bffa84 	movi	r2,-22
  800a48:	e0bfff15 	stw	r2,-4(fp)
  800a4c:	00001306 	br	800a9c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  800a50:	e0fffd17 	ldw	r3,-12(fp)
  800a54:	e0bffe17 	ldw	r2,-8(fp)
  800a58:	e0bffb15 	stw	r2,-20(fp)
  800a5c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  800a60:	e0fffc17 	ldw	r3,-16(fp)
  800a64:	e0bffb17 	ldw	r2,-20(fp)
  800a68:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  800a6c:	e0bffb17 	ldw	r2,-20(fp)
  800a70:	10c00017 	ldw	r3,0(r2)
  800a74:	e0bffc17 	ldw	r2,-16(fp)
  800a78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  800a7c:	e0bffb17 	ldw	r2,-20(fp)
  800a80:	10c00017 	ldw	r3,0(r2)
  800a84:	e0bffc17 	ldw	r2,-16(fp)
  800a88:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  800a8c:	e0fffb17 	ldw	r3,-20(fp)
  800a90:	e0bffc17 	ldw	r2,-16(fp)
  800a94:	18800015 	stw	r2,0(r3)

  return 0;  
  800a98:	e03fff15 	stw	zero,-4(fp)
  800a9c:	e0bfff17 	ldw	r2,-4(fp)
}
  800aa0:	e037883a 	mov	sp,fp
  800aa4:	dfc00117 	ldw	ra,4(sp)
  800aa8:	df000017 	ldw	fp,0(sp)
  800aac:	dec00204 	addi	sp,sp,8
  800ab0:	f800283a 	ret

00800ab4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  800ab4:	defffd04 	addi	sp,sp,-12
  800ab8:	dfc00215 	stw	ra,8(sp)
  800abc:	df000115 	stw	fp,4(sp)
  800ac0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  800ac4:	00802034 	movhi	r2,128
  800ac8:	1086a704 	addi	r2,r2,6812
  800acc:	10800017 	ldw	r2,0(r2)
  800ad0:	1005003a 	cmpeq	r2,r2,zero
  800ad4:	1000061e 	bne	r2,zero,800af0 <alt_get_errno+0x3c>
  800ad8:	00802034 	movhi	r2,128
  800adc:	1086a704 	addi	r2,r2,6812
  800ae0:	10800017 	ldw	r2,0(r2)
  800ae4:	103ee83a 	callr	r2
  800ae8:	e0bfff15 	stw	r2,-4(fp)
  800aec:	00000306 	br	800afc <alt_get_errno+0x48>
  800af0:	00802034 	movhi	r2,128
  800af4:	10875d04 	addi	r2,r2,7540
  800af8:	e0bfff15 	stw	r2,-4(fp)
  800afc:	e0bfff17 	ldw	r2,-4(fp)
}
  800b00:	e037883a 	mov	sp,fp
  800b04:	dfc00117 	ldw	ra,4(sp)
  800b08:	df000017 	ldw	fp,0(sp)
  800b0c:	dec00204 	addi	sp,sp,8
  800b10:	f800283a 	ret

00800b14 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  800b14:	defffd04 	addi	sp,sp,-12
  800b18:	dfc00215 	stw	ra,8(sp)
  800b1c:	df000115 	stw	fp,4(sp)
  800b20:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  800b24:	00bfff04 	movi	r2,-4
  800b28:	00c02034 	movhi	r3,128
  800b2c:	18c5e004 	addi	r3,r3,6016
  800b30:	1885883a 	add	r2,r3,r2
  800b34:	e0bfff15 	stw	r2,-4(fp)
  800b38:	00000606 	br	800b54 <_do_ctors+0x40>
        (*ctor) (); 
  800b3c:	e0bfff17 	ldw	r2,-4(fp)
  800b40:	10800017 	ldw	r2,0(r2)
  800b44:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  800b48:	e0bfff17 	ldw	r2,-4(fp)
  800b4c:	10bfff04 	addi	r2,r2,-4
  800b50:	e0bfff15 	stw	r2,-4(fp)
  800b54:	e0ffff17 	ldw	r3,-4(fp)
  800b58:	00802034 	movhi	r2,128
  800b5c:	1085df04 	addi	r2,r2,6012
  800b60:	18bff62e 	bgeu	r3,r2,800b3c <_do_ctors+0x28>
        (*ctor) (); 
}
  800b64:	e037883a 	mov	sp,fp
  800b68:	dfc00117 	ldw	ra,4(sp)
  800b6c:	df000017 	ldw	fp,0(sp)
  800b70:	dec00204 	addi	sp,sp,8
  800b74:	f800283a 	ret

00800b78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  800b78:	defffd04 	addi	sp,sp,-12
  800b7c:	dfc00215 	stw	ra,8(sp)
  800b80:	df000115 	stw	fp,4(sp)
  800b84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  800b88:	00bfff04 	movi	r2,-4
  800b8c:	00c02034 	movhi	r3,128
  800b90:	18c5e004 	addi	r3,r3,6016
  800b94:	1885883a 	add	r2,r3,r2
  800b98:	e0bfff15 	stw	r2,-4(fp)
  800b9c:	00000606 	br	800bb8 <_do_dtors+0x40>
        (*dtor) (); 
  800ba0:	e0bfff17 	ldw	r2,-4(fp)
  800ba4:	10800017 	ldw	r2,0(r2)
  800ba8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  800bac:	e0bfff17 	ldw	r2,-4(fp)
  800bb0:	10bfff04 	addi	r2,r2,-4
  800bb4:	e0bfff15 	stw	r2,-4(fp)
  800bb8:	e0ffff17 	ldw	r3,-4(fp)
  800bbc:	00802034 	movhi	r2,128
  800bc0:	1085e004 	addi	r2,r2,6016
  800bc4:	18bff62e 	bgeu	r3,r2,800ba0 <_do_dtors+0x28>
        (*dtor) (); 
}
  800bc8:	e037883a 	mov	sp,fp
  800bcc:	dfc00117 	ldw	ra,4(sp)
  800bd0:	df000017 	ldw	fp,0(sp)
  800bd4:	dec00204 	addi	sp,sp,8
  800bd8:	f800283a 	ret

00800bdc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  800bdc:	deffff04 	addi	sp,sp,-4
  800be0:	df000015 	stw	fp,0(sp)
  800be4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  800be8:	e037883a 	mov	sp,fp
  800bec:	df000017 	ldw	fp,0(sp)
  800bf0:	dec00104 	addi	sp,sp,4
  800bf4:	f800283a 	ret

00800bf8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  800bf8:	defff804 	addi	sp,sp,-32
  800bfc:	dfc00715 	stw	ra,28(sp)
  800c00:	df000615 	stw	fp,24(sp)
  800c04:	dc000515 	stw	r16,20(sp)
  800c08:	df000504 	addi	fp,sp,20
  800c0c:	e13ffc15 	stw	r4,-16(fp)
  800c10:	e17ffd15 	stw	r5,-12(fp)
  800c14:	e1bffe15 	stw	r6,-8(fp)
  800c18:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  800c1c:	e13ffd17 	ldw	r4,-12(fp)
  800c20:	e17ffe17 	ldw	r5,-8(fp)
  800c24:	e1bfff17 	ldw	r6,-4(fp)
  800c28:	0800e400 	call	800e40 <open>
  800c2c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  800c30:	e0bffb17 	ldw	r2,-20(fp)
  800c34:	1004803a 	cmplt	r2,r2,zero
  800c38:	10001f1e 	bne	r2,zero,800cb8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  800c3c:	e13ffb17 	ldw	r4,-20(fp)
  800c40:	04002034 	movhi	r16,128
  800c44:	84064004 	addi	r16,r16,6400
  800c48:	01400304 	movi	r5,12
  800c4c:	08016e40 	call	8016e4 <__mulsi3>
  800c50:	1405883a 	add	r2,r2,r16
  800c54:	10c00017 	ldw	r3,0(r2)
  800c58:	e0bffc17 	ldw	r2,-16(fp)
  800c5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  800c60:	e13ffb17 	ldw	r4,-20(fp)
  800c64:	04002034 	movhi	r16,128
  800c68:	84064004 	addi	r16,r16,6400
  800c6c:	01400304 	movi	r5,12
  800c70:	08016e40 	call	8016e4 <__mulsi3>
  800c74:	1405883a 	add	r2,r2,r16
  800c78:	10800104 	addi	r2,r2,4
  800c7c:	10c00017 	ldw	r3,0(r2)
  800c80:	e0bffc17 	ldw	r2,-16(fp)
  800c84:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  800c88:	e13ffb17 	ldw	r4,-20(fp)
  800c8c:	04002034 	movhi	r16,128
  800c90:	84064004 	addi	r16,r16,6400
  800c94:	01400304 	movi	r5,12
  800c98:	08016e40 	call	8016e4 <__mulsi3>
  800c9c:	1405883a 	add	r2,r2,r16
  800ca0:	10800204 	addi	r2,r2,8
  800ca4:	10c00017 	ldw	r3,0(r2)
  800ca8:	e0bffc17 	ldw	r2,-16(fp)
  800cac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  800cb0:	e13ffb17 	ldw	r4,-20(fp)
  800cb4:	080102c0 	call	80102c <alt_release_fd>
  }
} 
  800cb8:	e037883a 	mov	sp,fp
  800cbc:	dfc00217 	ldw	ra,8(sp)
  800cc0:	df000117 	ldw	fp,4(sp)
  800cc4:	dc000017 	ldw	r16,0(sp)
  800cc8:	dec00304 	addi	sp,sp,12
  800ccc:	f800283a 	ret

00800cd0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  800cd0:	defffb04 	addi	sp,sp,-20
  800cd4:	dfc00415 	stw	ra,16(sp)
  800cd8:	df000315 	stw	fp,12(sp)
  800cdc:	df000304 	addi	fp,sp,12
  800ce0:	e13ffd15 	stw	r4,-12(fp)
  800ce4:	e17ffe15 	stw	r5,-8(fp)
  800ce8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  800cec:	01002034 	movhi	r4,128
  800cf0:	21064304 	addi	r4,r4,6412
  800cf4:	e17ffd17 	ldw	r5,-12(fp)
  800cf8:	01800044 	movi	r6,1
  800cfc:	01c07fc4 	movi	r7,511
  800d00:	0800bf80 	call	800bf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  800d04:	01002034 	movhi	r4,128
  800d08:	21064004 	addi	r4,r4,6400
  800d0c:	e17ffe17 	ldw	r5,-8(fp)
  800d10:	000d883a 	mov	r6,zero
  800d14:	01c07fc4 	movi	r7,511
  800d18:	0800bf80 	call	800bf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  800d1c:	01002034 	movhi	r4,128
  800d20:	21064604 	addi	r4,r4,6424
  800d24:	e17fff17 	ldw	r5,-4(fp)
  800d28:	01800044 	movi	r6,1
  800d2c:	01c07fc4 	movi	r7,511
  800d30:	0800bf80 	call	800bf8 <alt_open_fd>
}  
  800d34:	e037883a 	mov	sp,fp
  800d38:	dfc00117 	ldw	ra,4(sp)
  800d3c:	df000017 	ldw	fp,0(sp)
  800d40:	dec00204 	addi	sp,sp,8
  800d44:	f800283a 	ret

00800d48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  800d48:	defffa04 	addi	sp,sp,-24
  800d4c:	dfc00515 	stw	ra,20(sp)
  800d50:	df000415 	stw	fp,16(sp)
  800d54:	dc000315 	stw	r16,12(sp)
  800d58:	df000304 	addi	fp,sp,12
  800d5c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  800d60:	e0bffe17 	ldw	r2,-8(fp)
  800d64:	10800217 	ldw	r2,8(r2)
  800d68:	10d00034 	orhi	r3,r2,16384
  800d6c:	e0bffe17 	ldw	r2,-8(fp)
  800d70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  800d74:	e03ffd15 	stw	zero,-12(fp)
  800d78:	00002306 	br	800e08 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  800d7c:	e13ffd17 	ldw	r4,-12(fp)
  800d80:	04002034 	movhi	r16,128
  800d84:	84064004 	addi	r16,r16,6400
  800d88:	01400304 	movi	r5,12
  800d8c:	08016e40 	call	8016e4 <__mulsi3>
  800d90:	1405883a 	add	r2,r2,r16
  800d94:	10c00017 	ldw	r3,0(r2)
  800d98:	e0bffe17 	ldw	r2,-8(fp)
  800d9c:	10800017 	ldw	r2,0(r2)
  800da0:	1880161e 	bne	r3,r2,800dfc <alt_file_locked+0xb4>
  800da4:	e13ffd17 	ldw	r4,-12(fp)
  800da8:	04002034 	movhi	r16,128
  800dac:	84064004 	addi	r16,r16,6400
  800db0:	01400304 	movi	r5,12
  800db4:	08016e40 	call	8016e4 <__mulsi3>
  800db8:	1405883a 	add	r2,r2,r16
  800dbc:	10800204 	addi	r2,r2,8
  800dc0:	10800017 	ldw	r2,0(r2)
  800dc4:	1004403a 	cmpge	r2,r2,zero
  800dc8:	10000c1e 	bne	r2,zero,800dfc <alt_file_locked+0xb4>
  800dcc:	e13ffd17 	ldw	r4,-12(fp)
  800dd0:	01400304 	movi	r5,12
  800dd4:	08016e40 	call	8016e4 <__mulsi3>
  800dd8:	1007883a 	mov	r3,r2
  800ddc:	00802034 	movhi	r2,128
  800de0:	10864004 	addi	r2,r2,6400
  800de4:	1887883a 	add	r3,r3,r2
  800de8:	e0bffe17 	ldw	r2,-8(fp)
  800dec:	18800326 	beq	r3,r2,800dfc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  800df0:	00bffcc4 	movi	r2,-13
  800df4:	e0bfff15 	stw	r2,-4(fp)
  800df8:	00000a06 	br	800e24 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  800dfc:	e0bffd17 	ldw	r2,-12(fp)
  800e00:	10800044 	addi	r2,r2,1
  800e04:	e0bffd15 	stw	r2,-12(fp)
  800e08:	00802034 	movhi	r2,128
  800e0c:	1086a604 	addi	r2,r2,6808
  800e10:	10800017 	ldw	r2,0(r2)
  800e14:	1007883a 	mov	r3,r2
  800e18:	e0bffd17 	ldw	r2,-12(fp)
  800e1c:	18bfd72e 	bgeu	r3,r2,800d7c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  800e20:	e03fff15 	stw	zero,-4(fp)
  800e24:	e0bfff17 	ldw	r2,-4(fp)
}
  800e28:	e037883a 	mov	sp,fp
  800e2c:	dfc00217 	ldw	ra,8(sp)
  800e30:	df000117 	ldw	fp,4(sp)
  800e34:	dc000017 	ldw	r16,0(sp)
  800e38:	dec00304 	addi	sp,sp,12
  800e3c:	f800283a 	ret

00800e40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  800e40:	defff404 	addi	sp,sp,-48
  800e44:	dfc00b15 	stw	ra,44(sp)
  800e48:	df000a15 	stw	fp,40(sp)
  800e4c:	df000a04 	addi	fp,sp,40
  800e50:	e13ffb15 	stw	r4,-20(fp)
  800e54:	e17ffc15 	stw	r5,-16(fp)
  800e58:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  800e5c:	00bfffc4 	movi	r2,-1
  800e60:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  800e64:	00bffb44 	movi	r2,-19
  800e68:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  800e6c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  800e70:	e13ffb17 	ldw	r4,-20(fp)
  800e74:	01402034 	movhi	r5,128
  800e78:	2946a404 	addi	r5,r5,6800
  800e7c:	08010c40 	call	8010c4 <alt_find_dev>
  800e80:	e0bffa15 	stw	r2,-24(fp)
  800e84:	e0bffa17 	ldw	r2,-24(fp)
  800e88:	1004c03a 	cmpne	r2,r2,zero
  800e8c:	1000051e 	bne	r2,zero,800ea4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  800e90:	e13ffb17 	ldw	r4,-20(fp)
  800e94:	08011580 	call	801158 <alt_find_file>
  800e98:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  800e9c:	00800044 	movi	r2,1
  800ea0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  800ea4:	e0bffa17 	ldw	r2,-24(fp)
  800ea8:	1005003a 	cmpeq	r2,r2,zero
  800eac:	1000311e 	bne	r2,zero,800f74 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  800eb0:	e13ffa17 	ldw	r4,-24(fp)
  800eb4:	08012780 	call	801278 <alt_get_fd>
  800eb8:	e0bff815 	stw	r2,-32(fp)
  800ebc:	e0bff817 	ldw	r2,-32(fp)
  800ec0:	1004403a 	cmpge	r2,r2,zero
  800ec4:	1000031e 	bne	r2,zero,800ed4 <open+0x94>
    {
      status = index;
  800ec8:	e0bff817 	ldw	r2,-32(fp)
  800ecc:	e0bff715 	stw	r2,-36(fp)
  800ed0:	00002a06 	br	800f7c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  800ed4:	e13ff817 	ldw	r4,-32(fp)
  800ed8:	01400304 	movi	r5,12
  800edc:	08016e40 	call	8016e4 <__mulsi3>
  800ee0:	1007883a 	mov	r3,r2
  800ee4:	00802034 	movhi	r2,128
  800ee8:	10864004 	addi	r2,r2,6400
  800eec:	1885883a 	add	r2,r3,r2
  800ef0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  800ef4:	e0fffc17 	ldw	r3,-16(fp)
  800ef8:	00900034 	movhi	r2,16384
  800efc:	10bfffc4 	addi	r2,r2,-1
  800f00:	1886703a 	and	r3,r3,r2
  800f04:	e0bff917 	ldw	r2,-28(fp)
  800f08:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  800f0c:	e0bff617 	ldw	r2,-40(fp)
  800f10:	1004c03a 	cmpne	r2,r2,zero
  800f14:	1000061e 	bne	r2,zero,800f30 <open+0xf0>
  800f18:	e13ff917 	ldw	r4,-28(fp)
  800f1c:	0800d480 	call	800d48 <alt_file_locked>
  800f20:	e0bff715 	stw	r2,-36(fp)
  800f24:	e0bff717 	ldw	r2,-36(fp)
  800f28:	1004803a 	cmplt	r2,r2,zero
  800f2c:	1000131e 	bne	r2,zero,800f7c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  800f30:	e0bffa17 	ldw	r2,-24(fp)
  800f34:	10800317 	ldw	r2,12(r2)
  800f38:	1005003a 	cmpeq	r2,r2,zero
  800f3c:	1000091e 	bne	r2,zero,800f64 <open+0x124>
  800f40:	e0bffa17 	ldw	r2,-24(fp)
  800f44:	10800317 	ldw	r2,12(r2)
  800f48:	e13ff917 	ldw	r4,-28(fp)
  800f4c:	e17ffb17 	ldw	r5,-20(fp)
  800f50:	e1bffc17 	ldw	r6,-16(fp)
  800f54:	e1fffd17 	ldw	r7,-12(fp)
  800f58:	103ee83a 	callr	r2
  800f5c:	e0bfff15 	stw	r2,-4(fp)
  800f60:	00000106 	br	800f68 <open+0x128>
  800f64:	e03fff15 	stw	zero,-4(fp)
  800f68:	e0bfff17 	ldw	r2,-4(fp)
  800f6c:	e0bff715 	stw	r2,-36(fp)
  800f70:	00000206 	br	800f7c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  800f74:	00bffb44 	movi	r2,-19
  800f78:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  800f7c:	e0bff717 	ldw	r2,-36(fp)
  800f80:	1004403a 	cmpge	r2,r2,zero
  800f84:	1000091e 	bne	r2,zero,800fac <open+0x16c>
  {
    alt_release_fd (index);  
  800f88:	e13ff817 	ldw	r4,-32(fp)
  800f8c:	080102c0 	call	80102c <alt_release_fd>
    ALT_ERRNO = -status;
  800f90:	0800fcc0 	call	800fcc <alt_get_errno>
  800f94:	e0fff717 	ldw	r3,-36(fp)
  800f98:	00c7c83a 	sub	r3,zero,r3
  800f9c:	10c00015 	stw	r3,0(r2)
    return -1;
  800fa0:	00bfffc4 	movi	r2,-1
  800fa4:	e0bffe15 	stw	r2,-8(fp)
  800fa8:	00000206 	br	800fb4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  800fac:	e0bff817 	ldw	r2,-32(fp)
  800fb0:	e0bffe15 	stw	r2,-8(fp)
  800fb4:	e0bffe17 	ldw	r2,-8(fp)
}
  800fb8:	e037883a 	mov	sp,fp
  800fbc:	dfc00117 	ldw	ra,4(sp)
  800fc0:	df000017 	ldw	fp,0(sp)
  800fc4:	dec00204 	addi	sp,sp,8
  800fc8:	f800283a 	ret

00800fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  800fcc:	defffd04 	addi	sp,sp,-12
  800fd0:	dfc00215 	stw	ra,8(sp)
  800fd4:	df000115 	stw	fp,4(sp)
  800fd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  800fdc:	00802034 	movhi	r2,128
  800fe0:	1086a704 	addi	r2,r2,6812
  800fe4:	10800017 	ldw	r2,0(r2)
  800fe8:	1005003a 	cmpeq	r2,r2,zero
  800fec:	1000061e 	bne	r2,zero,801008 <alt_get_errno+0x3c>
  800ff0:	00802034 	movhi	r2,128
  800ff4:	1086a704 	addi	r2,r2,6812
  800ff8:	10800017 	ldw	r2,0(r2)
  800ffc:	103ee83a 	callr	r2
  801000:	e0bfff15 	stw	r2,-4(fp)
  801004:	00000306 	br	801014 <alt_get_errno+0x48>
  801008:	00802034 	movhi	r2,128
  80100c:	10875d04 	addi	r2,r2,7540
  801010:	e0bfff15 	stw	r2,-4(fp)
  801014:	e0bfff17 	ldw	r2,-4(fp)
}
  801018:	e037883a 	mov	sp,fp
  80101c:	dfc00117 	ldw	ra,4(sp)
  801020:	df000017 	ldw	fp,0(sp)
  801024:	dec00204 	addi	sp,sp,8
  801028:	f800283a 	ret

0080102c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80102c:	defffc04 	addi	sp,sp,-16
  801030:	dfc00315 	stw	ra,12(sp)
  801034:	df000215 	stw	fp,8(sp)
  801038:	dc000115 	stw	r16,4(sp)
  80103c:	df000104 	addi	fp,sp,4
  801040:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  801044:	e0bfff17 	ldw	r2,-4(fp)
  801048:	108000d0 	cmplti	r2,r2,3
  80104c:	10000f1e 	bne	r2,zero,80108c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  801050:	e13fff17 	ldw	r4,-4(fp)
  801054:	04002034 	movhi	r16,128
  801058:	84064004 	addi	r16,r16,6400
  80105c:	01400304 	movi	r5,12
  801060:	08016e40 	call	8016e4 <__mulsi3>
  801064:	1405883a 	add	r2,r2,r16
  801068:	10800204 	addi	r2,r2,8
  80106c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  801070:	e13fff17 	ldw	r4,-4(fp)
  801074:	04002034 	movhi	r16,128
  801078:	84064004 	addi	r16,r16,6400
  80107c:	01400304 	movi	r5,12
  801080:	08016e40 	call	8016e4 <__mulsi3>
  801084:	1405883a 	add	r2,r2,r16
  801088:	10000015 	stw	zero,0(r2)
  }
}
  80108c:	e037883a 	mov	sp,fp
  801090:	dfc00217 	ldw	ra,8(sp)
  801094:	df000117 	ldw	fp,4(sp)
  801098:	dc000017 	ldw	r16,0(sp)
  80109c:	dec00304 	addi	sp,sp,12
  8010a0:	f800283a 	ret

008010a4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8010a4:	deffff04 	addi	sp,sp,-4
  8010a8:	df000015 	stw	fp,0(sp)
  8010ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8010b0:	000170fa 	wrctl	ienable,zero
}
  8010b4:	e037883a 	mov	sp,fp
  8010b8:	df000017 	ldw	fp,0(sp)
  8010bc:	dec00104 	addi	sp,sp,4
  8010c0:	f800283a 	ret

008010c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8010c4:	defff904 	addi	sp,sp,-28
  8010c8:	dfc00615 	stw	ra,24(sp)
  8010cc:	df000515 	stw	fp,20(sp)
  8010d0:	df000504 	addi	fp,sp,20
  8010d4:	e13ffd15 	stw	r4,-12(fp)
  8010d8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8010dc:	e0bffe17 	ldw	r2,-8(fp)
  8010e0:	10800017 	ldw	r2,0(r2)
  8010e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8010e8:	e13ffd17 	ldw	r4,-12(fp)
  8010ec:	08001340 	call	800134 <strlen>
  8010f0:	10800044 	addi	r2,r2,1
  8010f4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8010f8:	00000d06 	br	801130 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8010fc:	e0bffc17 	ldw	r2,-16(fp)
  801100:	11000217 	ldw	r4,8(r2)
  801104:	e1bffb17 	ldw	r6,-20(fp)
  801108:	e17ffd17 	ldw	r5,-12(fp)
  80110c:	080137c0 	call	80137c <memcmp>
  801110:	1004c03a 	cmpne	r2,r2,zero
  801114:	1000031e 	bne	r2,zero,801124 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  801118:	e0bffc17 	ldw	r2,-16(fp)
  80111c:	e0bfff15 	stw	r2,-4(fp)
  801120:	00000706 	br	801140 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  801124:	e0bffc17 	ldw	r2,-16(fp)
  801128:	10800017 	ldw	r2,0(r2)
  80112c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  801130:	e0fffe17 	ldw	r3,-8(fp)
  801134:	e0bffc17 	ldw	r2,-16(fp)
  801138:	10fff01e 	bne	r2,r3,8010fc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80113c:	e03fff15 	stw	zero,-4(fp)
  801140:	e0bfff17 	ldw	r2,-4(fp)
}
  801144:	e037883a 	mov	sp,fp
  801148:	dfc00117 	ldw	ra,4(sp)
  80114c:	df000017 	ldw	fp,0(sp)
  801150:	dec00204 	addi	sp,sp,8
  801154:	f800283a 	ret

00801158 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  801158:	defffa04 	addi	sp,sp,-24
  80115c:	dfc00515 	stw	ra,20(sp)
  801160:	df000415 	stw	fp,16(sp)
  801164:	df000404 	addi	fp,sp,16
  801168:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80116c:	00802034 	movhi	r2,128
  801170:	1086a204 	addi	r2,r2,6792
  801174:	10800017 	ldw	r2,0(r2)
  801178:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80117c:	00003306 	br	80124c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  801180:	e0bffd17 	ldw	r2,-12(fp)
  801184:	11000217 	ldw	r4,8(r2)
  801188:	08001340 	call	800134 <strlen>
  80118c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  801190:	e0bffd17 	ldw	r2,-12(fp)
  801194:	10c00217 	ldw	r3,8(r2)
  801198:	e0bffc17 	ldw	r2,-16(fp)
  80119c:	1885883a 	add	r2,r3,r2
  8011a0:	10bfffc4 	addi	r2,r2,-1
  8011a4:	10800003 	ldbu	r2,0(r2)
  8011a8:	10803fcc 	andi	r2,r2,255
  8011ac:	1080201c 	xori	r2,r2,128
  8011b0:	10bfe004 	addi	r2,r2,-128
  8011b4:	10800bd8 	cmpnei	r2,r2,47
  8011b8:	1000031e 	bne	r2,zero,8011c8 <alt_find_file+0x70>
    {
      len -= 1;
  8011bc:	e0bffc17 	ldw	r2,-16(fp)
  8011c0:	10bfffc4 	addi	r2,r2,-1
  8011c4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8011c8:	e0bffc17 	ldw	r2,-16(fp)
  8011cc:	1007883a 	mov	r3,r2
  8011d0:	e0bffe17 	ldw	r2,-8(fp)
  8011d4:	1885883a 	add	r2,r3,r2
  8011d8:	10800003 	ldbu	r2,0(r2)
  8011dc:	10803fcc 	andi	r2,r2,255
  8011e0:	1080201c 	xori	r2,r2,128
  8011e4:	10bfe004 	addi	r2,r2,-128
  8011e8:	10800be0 	cmpeqi	r2,r2,47
  8011ec:	10000a1e 	bne	r2,zero,801218 <alt_find_file+0xc0>
  8011f0:	e0bffc17 	ldw	r2,-16(fp)
  8011f4:	1007883a 	mov	r3,r2
  8011f8:	e0bffe17 	ldw	r2,-8(fp)
  8011fc:	1885883a 	add	r2,r3,r2
  801200:	10800003 	ldbu	r2,0(r2)
  801204:	10803fcc 	andi	r2,r2,255
  801208:	1080201c 	xori	r2,r2,128
  80120c:	10bfe004 	addi	r2,r2,-128
  801210:	1004c03a 	cmpne	r2,r2,zero
  801214:	10000a1e 	bne	r2,zero,801240 <alt_find_file+0xe8>
  801218:	e0bffd17 	ldw	r2,-12(fp)
  80121c:	11000217 	ldw	r4,8(r2)
  801220:	e1bffc17 	ldw	r6,-16(fp)
  801224:	e17ffe17 	ldw	r5,-8(fp)
  801228:	080137c0 	call	80137c <memcmp>
  80122c:	1004c03a 	cmpne	r2,r2,zero
  801230:	1000031e 	bne	r2,zero,801240 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  801234:	e0bffd17 	ldw	r2,-12(fp)
  801238:	e0bfff15 	stw	r2,-4(fp)
  80123c:	00000806 	br	801260 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  801240:	e0bffd17 	ldw	r2,-12(fp)
  801244:	10800017 	ldw	r2,0(r2)
  801248:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80124c:	00c02034 	movhi	r3,128
  801250:	18c6a204 	addi	r3,r3,6792
  801254:	e0bffd17 	ldw	r2,-12(fp)
  801258:	10ffc91e 	bne	r2,r3,801180 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80125c:	e03fff15 	stw	zero,-4(fp)
  801260:	e0bfff17 	ldw	r2,-4(fp)
}
  801264:	e037883a 	mov	sp,fp
  801268:	dfc00117 	ldw	ra,4(sp)
  80126c:	df000017 	ldw	fp,0(sp)
  801270:	dec00204 	addi	sp,sp,8
  801274:	f800283a 	ret

00801278 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  801278:	defffa04 	addi	sp,sp,-24
  80127c:	dfc00515 	stw	ra,20(sp)
  801280:	df000415 	stw	fp,16(sp)
  801284:	dc000315 	stw	r16,12(sp)
  801288:	df000304 	addi	fp,sp,12
  80128c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  801290:	00bffa04 	movi	r2,-24
  801294:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  801298:	e03ffe15 	stw	zero,-8(fp)
  80129c:	00002006 	br	801320 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  8012a0:	e13ffe17 	ldw	r4,-8(fp)
  8012a4:	04002034 	movhi	r16,128
  8012a8:	84064004 	addi	r16,r16,6400
  8012ac:	01400304 	movi	r5,12
  8012b0:	08016e40 	call	8016e4 <__mulsi3>
  8012b4:	1405883a 	add	r2,r2,r16
  8012b8:	10800017 	ldw	r2,0(r2)
  8012bc:	1004c03a 	cmpne	r2,r2,zero
  8012c0:	1000141e 	bne	r2,zero,801314 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  8012c4:	e13ffe17 	ldw	r4,-8(fp)
  8012c8:	04002034 	movhi	r16,128
  8012cc:	84064004 	addi	r16,r16,6400
  8012d0:	01400304 	movi	r5,12
  8012d4:	08016e40 	call	8016e4 <__mulsi3>
  8012d8:	1407883a 	add	r3,r2,r16
  8012dc:	e0bfff17 	ldw	r2,-4(fp)
  8012e0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8012e4:	00802034 	movhi	r2,128
  8012e8:	1086a604 	addi	r2,r2,6808
  8012ec:	10c00017 	ldw	r3,0(r2)
  8012f0:	e0bffe17 	ldw	r2,-8(fp)
  8012f4:	1880040e 	bge	r3,r2,801308 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  8012f8:	00c02034 	movhi	r3,128
  8012fc:	18c6a604 	addi	r3,r3,6808
  801300:	e0bffe17 	ldw	r2,-8(fp)
  801304:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  801308:	e0bffe17 	ldw	r2,-8(fp)
  80130c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  801310:	00000606 	br	80132c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  801314:	e0bffe17 	ldw	r2,-8(fp)
  801318:	10800044 	addi	r2,r2,1
  80131c:	e0bffe15 	stw	r2,-8(fp)
  801320:	e0bffe17 	ldw	r2,-8(fp)
  801324:	10800810 	cmplti	r2,r2,32
  801328:	103fdd1e 	bne	r2,zero,8012a0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80132c:	e0bffd17 	ldw	r2,-12(fp)
}
  801330:	e037883a 	mov	sp,fp
  801334:	dfc00217 	ldw	ra,8(sp)
  801338:	df000117 	ldw	fp,4(sp)
  80133c:	dc000017 	ldw	r16,0(sp)
  801340:	dec00304 	addi	sp,sp,12
  801344:	f800283a 	ret

00801348 <atexit>:
  801348:	200b883a 	mov	r5,r4
  80134c:	000d883a 	mov	r6,zero
  801350:	0009883a 	mov	r4,zero
  801354:	000f883a 	mov	r7,zero
  801358:	08013b81 	jmpi	8013b8 <__register_exitproc>

0080135c <exit>:
  80135c:	defffe04 	addi	sp,sp,-8
  801360:	dc400015 	stw	r17,0(sp)
  801364:	000b883a 	mov	r5,zero
  801368:	2023883a 	mov	r17,r4
  80136c:	dfc00115 	stw	ra,4(sp)
  801370:	08015280 	call	801528 <__call_exitprocs>
  801374:	8809883a 	mov	r4,r17
  801378:	080175c0 	call	80175c <_exit>

0080137c <memcmp>:
  80137c:	31ffffc4 	addi	r7,r6,-1
  801380:	3000061e 	bne	r6,zero,80139c <memcmp+0x20>
  801384:	00000a06 	br	8013b0 <memcmp+0x34>
  801388:	39ffffc4 	addi	r7,r7,-1
  80138c:	00bfffc4 	movi	r2,-1
  801390:	21000044 	addi	r4,r4,1
  801394:	29400044 	addi	r5,r5,1
  801398:	38800526 	beq	r7,r2,8013b0 <memcmp+0x34>
  80139c:	20c00003 	ldbu	r3,0(r4)
  8013a0:	28800003 	ldbu	r2,0(r5)
  8013a4:	18bff826 	beq	r3,r2,801388 <memcmp+0xc>
  8013a8:	1885c83a 	sub	r2,r3,r2
  8013ac:	f800283a 	ret
  8013b0:	0005883a 	mov	r2,zero
  8013b4:	f800283a 	ret

008013b8 <__register_exitproc>:
  8013b8:	defff904 	addi	sp,sp,-28
  8013bc:	00802034 	movhi	r2,128
  8013c0:	1086a104 	addi	r2,r2,6788
  8013c4:	dc400115 	stw	r17,4(sp)
  8013c8:	14400017 	ldw	r17,0(r2)
  8013cc:	dc000015 	stw	r16,0(sp)
  8013d0:	dd400515 	stw	r21,20(sp)
  8013d4:	8c000c17 	ldw	r16,48(r17)
  8013d8:	dd000415 	stw	r20,16(sp)
  8013dc:	dcc00315 	stw	r19,12(sp)
  8013e0:	dc800215 	stw	r18,8(sp)
  8013e4:	dfc00615 	stw	ra,24(sp)
  8013e8:	2025883a 	mov	r18,r4
  8013ec:	282b883a 	mov	r21,r5
  8013f0:	3029883a 	mov	r20,r6
  8013f4:	3827883a 	mov	r19,r7
  8013f8:	80002626 	beq	r16,zero,801494 <__register_exitproc+0xdc>
  8013fc:	81400117 	ldw	r5,4(r16)
  801400:	008007c4 	movi	r2,31
  801404:	11403716 	blt	r2,r5,8014e4 <__register_exitproc+0x12c>
  801408:	90002026 	beq	r18,zero,80148c <__register_exitproc+0xd4>
  80140c:	81802217 	ldw	r6,136(r16)
  801410:	30002926 	beq	r6,zero,8014b8 <__register_exitproc+0x100>
  801414:	81400117 	ldw	r5,4(r16)
  801418:	00c00044 	movi	r3,1
  80141c:	31004017 	ldw	r4,256(r6)
  801420:	1946983a 	sll	r3,r3,r5
  801424:	2945883a 	add	r2,r5,r5
  801428:	1085883a 	add	r2,r2,r2
  80142c:	1185883a 	add	r2,r2,r6
  801430:	20c8b03a 	or	r4,r4,r3
  801434:	14c02015 	stw	r19,128(r2)
  801438:	15000015 	stw	r20,0(r2)
  80143c:	00800084 	movi	r2,2
  801440:	31004015 	stw	r4,256(r6)
  801444:	90801826 	beq	r18,r2,8014a8 <__register_exitproc+0xf0>
  801448:	2945883a 	add	r2,r5,r5
  80144c:	1085883a 	add	r2,r2,r2
  801450:	1405883a 	add	r2,r2,r16
  801454:	28c00044 	addi	r3,r5,1
  801458:	0009883a 	mov	r4,zero
  80145c:	15400215 	stw	r21,8(r2)
  801460:	80c00115 	stw	r3,4(r16)
  801464:	2005883a 	mov	r2,r4
  801468:	dfc00617 	ldw	ra,24(sp)
  80146c:	dd400517 	ldw	r21,20(sp)
  801470:	dd000417 	ldw	r20,16(sp)
  801474:	dcc00317 	ldw	r19,12(sp)
  801478:	dc800217 	ldw	r18,8(sp)
  80147c:	dc400117 	ldw	r17,4(sp)
  801480:	dc000017 	ldw	r16,0(sp)
  801484:	dec00704 	addi	sp,sp,28
  801488:	f800283a 	ret
  80148c:	81400117 	ldw	r5,4(r16)
  801490:	003fed06 	br	801448 <__register_exitproc+0x90>
  801494:	00802034 	movhi	r2,128
  801498:	10876104 	addi	r2,r2,7556
  80149c:	1021883a 	mov	r16,r2
  8014a0:	88800c15 	stw	r2,48(r17)
  8014a4:	003fd506 	br	8013fc <__register_exitproc+0x44>
  8014a8:	30804117 	ldw	r2,260(r6)
  8014ac:	10c4b03a 	or	r2,r2,r3
  8014b0:	30804115 	stw	r2,260(r6)
  8014b4:	003fe406 	br	801448 <__register_exitproc+0x90>
  8014b8:	00800034 	movhi	r2,0
  8014bc:	10800004 	addi	r2,r2,0
  8014c0:	10000b26 	beq	r2,zero,8014f0 <__register_exitproc+0x138>
  8014c4:	01004204 	movi	r4,264
  8014c8:	103ee83a 	callr	r2
  8014cc:	10000826 	beq	r2,zero,8014f0 <__register_exitproc+0x138>
  8014d0:	100d883a 	mov	r6,r2
  8014d4:	10004015 	stw	zero,256(r2)
  8014d8:	10004115 	stw	zero,260(r2)
  8014dc:	80802215 	stw	r2,136(r16)
  8014e0:	003fcc06 	br	801414 <__register_exitproc+0x5c>
  8014e4:	00800034 	movhi	r2,0
  8014e8:	10800004 	addi	r2,r2,0
  8014ec:	1000021e 	bne	r2,zero,8014f8 <__register_exitproc+0x140>
  8014f0:	013fffc4 	movi	r4,-1
  8014f4:	003fdb06 	br	801464 <__register_exitproc+0xac>
  8014f8:	01002304 	movi	r4,140
  8014fc:	103ee83a 	callr	r2
  801500:	1007883a 	mov	r3,r2
  801504:	103ffa26 	beq	r2,zero,8014f0 <__register_exitproc+0x138>
  801508:	88800c17 	ldw	r2,48(r17)
  80150c:	1821883a 	mov	r16,r3
  801510:	18000115 	stw	zero,4(r3)
  801514:	18800015 	stw	r2,0(r3)
  801518:	88c00c15 	stw	r3,48(r17)
  80151c:	903fdb26 	beq	r18,zero,80148c <__register_exitproc+0xd4>
  801520:	003fba06 	br	80140c <__register_exitproc+0x54>

00801524 <register_fini>:
  801524:	f800283a 	ret

00801528 <__call_exitprocs>:
  801528:	defff304 	addi	sp,sp,-52
  80152c:	00802034 	movhi	r2,128
  801530:	1086a104 	addi	r2,r2,6788
  801534:	df000b15 	stw	fp,44(sp)
  801538:	17000017 	ldw	fp,0(r2)
  80153c:	00800034 	movhi	r2,0
  801540:	10800004 	addi	r2,r2,0
  801544:	1005003a 	cmpeq	r2,r2,zero
  801548:	d8800215 	stw	r2,8(sp)
  80154c:	e0800c04 	addi	r2,fp,48
  801550:	dd800915 	stw	r22,36(sp)
  801554:	dd400815 	stw	r21,32(sp)
  801558:	dfc00c15 	stw	ra,48(sp)
  80155c:	ddc00a15 	stw	r23,40(sp)
  801560:	dd000715 	stw	r20,28(sp)
  801564:	dcc00615 	stw	r19,24(sp)
  801568:	dc800515 	stw	r18,20(sp)
  80156c:	dc400415 	stw	r17,16(sp)
  801570:	dc000315 	stw	r16,12(sp)
  801574:	282d883a 	mov	r22,r5
  801578:	d9000115 	stw	r4,4(sp)
  80157c:	d8800015 	stw	r2,0(sp)
  801580:	282b003a 	cmpeq	r21,r5,zero
  801584:	e4400c17 	ldw	r17,48(fp)
  801588:	88001226 	beq	r17,zero,8015d4 <__call_exitprocs+0xac>
  80158c:	ddc00017 	ldw	r23,0(sp)
  801590:	88800117 	ldw	r2,4(r17)
  801594:	8c802217 	ldw	r18,136(r17)
  801598:	143fffc4 	addi	r16,r2,-1
  80159c:	80000b16 	blt	r16,zero,8015cc <__call_exitprocs+0xa4>
  8015a0:	9027003a 	cmpeq	r19,r18,zero
  8015a4:	a800171e 	bne	r21,zero,801604 <__call_exitprocs+0xdc>
  8015a8:	9800051e 	bne	r19,zero,8015c0 <__call_exitprocs+0x98>
  8015ac:	8409883a 	add	r4,r16,r16
  8015b0:	2105883a 	add	r2,r4,r4
  8015b4:	1485883a 	add	r2,r2,r18
  8015b8:	10c02017 	ldw	r3,128(r2)
  8015bc:	b0c01226 	beq	r22,r3,801608 <__call_exitprocs+0xe0>
  8015c0:	843fffc4 	addi	r16,r16,-1
  8015c4:	00bfffc4 	movi	r2,-1
  8015c8:	80bff61e 	bne	r16,r2,8015a4 <__call_exitprocs+0x7c>
  8015cc:	d8800217 	ldw	r2,8(sp)
  8015d0:	10003226 	beq	r2,zero,80169c <__call_exitprocs+0x174>
  8015d4:	dfc00c17 	ldw	ra,48(sp)
  8015d8:	df000b17 	ldw	fp,44(sp)
  8015dc:	ddc00a17 	ldw	r23,40(sp)
  8015e0:	dd800917 	ldw	r22,36(sp)
  8015e4:	dd400817 	ldw	r21,32(sp)
  8015e8:	dd000717 	ldw	r20,28(sp)
  8015ec:	dcc00617 	ldw	r19,24(sp)
  8015f0:	dc800517 	ldw	r18,20(sp)
  8015f4:	dc400417 	ldw	r17,16(sp)
  8015f8:	dc000317 	ldw	r16,12(sp)
  8015fc:	dec00d04 	addi	sp,sp,52
  801600:	f800283a 	ret
  801604:	8409883a 	add	r4,r16,r16
  801608:	88c00117 	ldw	r3,4(r17)
  80160c:	2105883a 	add	r2,r4,r4
  801610:	1445883a 	add	r2,r2,r17
  801614:	18ffffc4 	addi	r3,r3,-1
  801618:	11800217 	ldw	r6,8(r2)
  80161c:	1c001826 	beq	r3,r16,801680 <__call_exitprocs+0x158>
  801620:	10000215 	stw	zero,8(r2)
  801624:	303fe626 	beq	r6,zero,8015c0 <__call_exitprocs+0x98>
  801628:	8d000117 	ldw	r20,4(r17)
  80162c:	9800121e 	bne	r19,zero,801678 <__call_exitprocs+0x150>
  801630:	00c00044 	movi	r3,1
  801634:	1c06983a 	sll	r3,r3,r16
  801638:	90804017 	ldw	r2,256(r18)
  80163c:	1884703a 	and	r2,r3,r2
  801640:	10000d26 	beq	r2,zero,801678 <__call_exitprocs+0x150>
  801644:	90804117 	ldw	r2,260(r18)
  801648:	1884703a 	and	r2,r3,r2
  80164c:	10000e1e 	bne	r2,zero,801688 <__call_exitprocs+0x160>
  801650:	2105883a 	add	r2,r4,r4
  801654:	1485883a 	add	r2,r2,r18
  801658:	11400017 	ldw	r5,0(r2)
  80165c:	d9000117 	ldw	r4,4(sp)
  801660:	303ee83a 	callr	r6
  801664:	88800117 	ldw	r2,4(r17)
  801668:	a0bfc61e 	bne	r20,r2,801584 <__call_exitprocs+0x5c>
  80166c:	b8800017 	ldw	r2,0(r23)
  801670:	147fd326 	beq	r2,r17,8015c0 <__call_exitprocs+0x98>
  801674:	003fc306 	br	801584 <__call_exitprocs+0x5c>
  801678:	303ee83a 	callr	r6
  80167c:	003ff906 	br	801664 <__call_exitprocs+0x13c>
  801680:	8c000115 	stw	r16,4(r17)
  801684:	003fe706 	br	801624 <__call_exitprocs+0xfc>
  801688:	2105883a 	add	r2,r4,r4
  80168c:	1485883a 	add	r2,r2,r18
  801690:	11000017 	ldw	r4,0(r2)
  801694:	303ee83a 	callr	r6
  801698:	003ff206 	br	801664 <__call_exitprocs+0x13c>
  80169c:	88800117 	ldw	r2,4(r17)
  8016a0:	10000b1e 	bne	r2,zero,8016d0 <__call_exitprocs+0x1a8>
  8016a4:	89000017 	ldw	r4,0(r17)
  8016a8:	20000a26 	beq	r4,zero,8016d4 <__call_exitprocs+0x1ac>
  8016ac:	b9000015 	stw	r4,0(r23)
  8016b0:	90000226 	beq	r18,zero,8016bc <__call_exitprocs+0x194>
  8016b4:	9009883a 	mov	r4,r18
  8016b8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8016bc:	8809883a 	mov	r4,r17
  8016c0:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8016c4:	bc400017 	ldw	r17,0(r23)
  8016c8:	883fb11e 	bne	r17,zero,801590 <__call_exitprocs+0x68>
  8016cc:	003fc106 	br	8015d4 <__call_exitprocs+0xac>
  8016d0:	89000017 	ldw	r4,0(r17)
  8016d4:	882f883a 	mov	r23,r17
  8016d8:	2023883a 	mov	r17,r4
  8016dc:	883fac1e 	bne	r17,zero,801590 <__call_exitprocs+0x68>
  8016e0:	003fbc06 	br	8015d4 <__call_exitprocs+0xac>

008016e4 <__mulsi3>:
  8016e4:	20000a26 	beq	r4,zero,801710 <__mulsi3+0x2c>
  8016e8:	0007883a 	mov	r3,zero
  8016ec:	2080004c 	andi	r2,r4,1
  8016f0:	1005003a 	cmpeq	r2,r2,zero
  8016f4:	2008d07a 	srli	r4,r4,1
  8016f8:	1000011e 	bne	r2,zero,801700 <__mulsi3+0x1c>
  8016fc:	1947883a 	add	r3,r3,r5
  801700:	294b883a 	add	r5,r5,r5
  801704:	203ff91e 	bne	r4,zero,8016ec <__mulsi3+0x8>
  801708:	1805883a 	mov	r2,r3
  80170c:	f800283a 	ret
  801710:	0007883a 	mov	r3,zero
  801714:	1805883a 	mov	r2,r3
  801718:	f800283a 	ret

0080171c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80171c:	defffd04 	addi	sp,sp,-12
  801720:	df000215 	stw	fp,8(sp)
  801724:	df000204 	addi	fp,sp,8
  801728:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80172c:	e0bfff17 	ldw	r2,-4(fp)
  801730:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  801734:	e0bffe17 	ldw	r2,-8(fp)
  801738:	1005003a 	cmpeq	r2,r2,zero
  80173c:	1000021e 	bne	r2,zero,801748 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  801740:	002af070 	cmpltui	zero,zero,43969
  801744:	00000106 	br	80174c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  801748:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80174c:	e037883a 	mov	sp,fp
  801750:	df000017 	ldw	fp,0(sp)
  801754:	dec00104 	addi	sp,sp,4
  801758:	f800283a 	ret

0080175c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80175c:	defffd04 	addi	sp,sp,-12
  801760:	dfc00215 	stw	ra,8(sp)
  801764:	df000115 	stw	fp,4(sp)
  801768:	df000104 	addi	fp,sp,4
  80176c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  801770:	e13fff17 	ldw	r4,-4(fp)
  801774:	080171c0 	call	80171c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  801778:	003fff06 	br	801778 <_exit+0x1c>
  80177c:	00801524 	muli	r2,zero,84
