
cau2.elf:     file format elf32-littlenios2
cau2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002b2c memsz 0x00002b2c flags r-x
    LOAD off    0x00003b4c vaddr 0x0000ab4c paddr 0x0000ae34 align 2**12
         filesz 0x000002e8 memsz 0x000002e8 flags rw-
    LOAD off    0x0000411c vaddr 0x0000b11c paddr 0x0000b11c align 2**12
         filesz 0x00000000 memsz 0x000001b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002934  000081b4  000081b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  0000aae8  0000aae8  00003ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e8  0000ab4c  0000ae34  00003b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001b0  0000b11c  0000b11c  0000411c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00003e34  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000598  00000000  00000000  00003e60  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000086b  00000000  00000000  000043f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009aae  00000000  00000000  00004c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002665  00000000  00000000  0000e711  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000699e  00000000  00000000  00010d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009c8  00000000  00000000  00017714  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d9e  00000000  00000000  000180dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001945  00000000  00000000  00018e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001a7c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  0001a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001c4ba  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001c4bd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001c4c9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001c4ca  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001c4cb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001c4d6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001c4e1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0001c4ec  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000013  00000000  00000000  0001c4f2  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0005f3fc  00000000  00000000  0001c505  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b4 l    d  .text	00000000 .text
0000aae8 l    d  .rodata	00000000 .rodata
0000ab4c l    d  .rwdata	00000000 .rwdata
0000b11c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000081ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 cau2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000085f0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000087d4 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000ab4c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000093ec l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000095e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ac2c l     O .rwdata	0000002c jtag_uart_0
000096c4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009954 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00009b54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009bd0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009cb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009df4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00009f44 l     F .text	000000f8 alt_file_locked
0000a1c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000a8c4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000aa84 l     F .text	00000040 alt_sim_halt
00009458 g     F .text	0000006c alt_main
0000b140 g     O .bss	00000100 alt_irq
0000ae34 g       *ABS*	00000000 __flash_rwdata_start
0000873c g     F .text	00000054 printf
00008450 g     F .text	0000016c Timer_IRQ_Handler
0000ae04 g     O .rwdata	00000004 mm
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b124 g     O .bss	00000004 errno
0000b130 g     O .bss	00000004 alt_argv
00012e00 g       *ABS*	00000000 _gp
0000ac80 g     O .rwdata	00000180 alt_fd_list
0000a464 g     F .text	00000094 alt_find_dev
00009ecc g     F .text	00000078 alt_io_redirect
0000aae8 g       *ABS*	00000000 __DTOR_END__
000083c0 g     F .text	0000001c Edit_Time
000097ac g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008790 g     F .text	00000044 _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000872c g     F .text	00000008 __udivsi3
0000b120 g     O .bss	00000004 ss
000081f0 g     F .text	00000070 Time_Clock
0000ae24 g     O .rwdata	00000004 alt_max_fd
0000ae0c g     O .rwdata	00000004 _global_impure_ptr
0000b2cc g       *ABS*	00000000 __bss_end
00009274 g     F .text	000000f8 alt_iic_isr_register
0000a338 g     F .text	0000010c alt_tick
0000922c g     F .text	00000048 alt_ic_irq_enabled
0000a2a0 g     F .text	00000098 alt_alarm_stop
0000b128 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000c8 alt_irq_handler
0000ac58 g     O .rwdata	00000028 alt_dev_null
00009bb4 g     F .text	0000001c alt_dcache_flush_all
0000ae34 g       *ABS*	00000000 __ram_rwdata_end
0000ae1c g     O .rwdata	00000008 alt_dev_list
000094c4 g     F .text	00000124 write
0000ab4c g       *ABS*	00000000 __ram_rodata_end
00008734 g     F .text	00000008 __umodsi3
0000b2cc g       *ABS*	00000000 end
0000aae4 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
000099c4 g     F .text	00000090 alt_avalon_timer_sc_init
000098b0 g     F .text	000000a4 altera_avalon_jtag_uart_write
00008854 g     F .text	0000069c ___vfprintf_internal_r
0000a8c8 g     F .text	000001bc __call_exitprocs
000081b4 g     F .text	0000003c _start
0000b138 g     O .bss	00000004 _alt_tick_rate
0000b13c g     O .bss	00000004 _alt_nticks
0000967c g     F .text	00000048 alt_sys_init
0000a758 g     F .text	0000016c __register_exitproc
00009068 g     F .text	00000038 __mulsi3
0000ab4c g       *ABS*	00000000 __ram_rwdata_start
0000aae8 g       *ABS*	00000000 __ram_rodata_start
000096fc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000a618 g     F .text	000000d0 alt_get_fd
0000a71c g     F .text	0000003c memcmp
0000b2cc g       *ABS*	00000000 __alt_stack_base
0000aae8 g     O .rodata	00000011 LED_HEX
0000b11c g     O .bss	00000004 counter
0000a4f8 g     F .text	00000120 alt_find_file
00009bfc g     F .text	000000b4 alt_dev_llist_insert
00008f14 g     F .text	000000bc __sfvwrite_small_dev
0000b11c g       *ABS*	00000000 __bss_start
000085bc g     F .text	00000034 main
0000b134 g     O .bss	00000004 alt_envp
00009754 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000b240 g     O .bss	0000008c _atexit0
0000ae28 g     O .rwdata	00000004 alt_errno
0000866c g     F .text	00000060 __divsi3
0000aae8 g       *ABS*	00000000 __CTOR_END__
0000aae8 g       *ABS*	00000000 __flash_rodata_start
0000aae8 g       *ABS*	00000000 __DTOR_LIST__
00009648 g     F .text	00000034 alt_irq_init
0000a228 g     F .text	00000078 alt_release_fd
0000a6e8 g     F .text	00000014 atexit
00008ff0 g     F .text	00000078 _write_r
0000ae08 g     O .rwdata	00000004 _impure_ptr
0000b12c g     O .bss	00000004 alt_argc
00009d74 g     F .text	00000064 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000ae14 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000ae00 g     O .rwdata	00000004 hh
000090a0 g     F .text	00000050 alt_ic_isr_register
0000ae34 g       *ABS*	00000000 _edata
0000b2cc g       *ABS*	00000000 _end
000081b4 g       *ABS*	00000000 __ram_exceptions_end
0000918c g     F .text	000000a0 alt_ic_irq_disable
0000a444 g     F .text	00000020 altera_nios2_qsys_irq_init
0000a6fc g     F .text	00000020 exit
000086cc g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000aac4 g     F .text	00000020 _exit
00008fd0 g     F .text	00000020 strlen
0000a03c g     F .text	0000018c open
00009dd8 g     F .text	0000001c alt_icache_flush_all
0000ae10 g     O .rwdata	00000004 alt_priority_mask
000090f0 g     F .text	0000009c alt_ic_irq_enable
00008ef0 g     F .text	00000024 __vfprintf_internal
0000ae2c g     O .rwdata	00000008 alt_alarm_list
00009d10 g     F .text	00000064 _do_ctors
00008260 g     F .text	00000160 Display
00009a54 g     F .text	00000100 close
000083dc g     F .text	00000074 timer_Init
0000936c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606d14 	ori	at,at,33204
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    80fc:	0005313a 	rdctl	r2,ipending
    8100:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    8108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    810c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8110:	00800044 	movi	r2,1
    8114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8118:	e0ffff17 	ldw	r3,-4(fp)
    811c:	e0bffe17 	ldw	r2,-8(fp)
    8120:	1884703a 	and	r2,r3,r2
    8124:	1005003a 	cmpeq	r2,r2,zero
    8128:	1000161e 	bne	r2,zero,8184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	e0bffd17 	ldw	r2,-12(fp)
    8130:	00c00074 	movhi	r3,1
    8134:	18ec5004 	addi	r3,r3,-20160
    8138:	100490fa 	slli	r2,r2,3
    813c:	10c5883a 	add	r2,r2,r3
    8140:	11400017 	ldw	r5,0(r2)
    8144:	e0bffd17 	ldw	r2,-12(fp)
    8148:	00c00074 	movhi	r3,1
    814c:	18ec5004 	addi	r3,r3,-20160
    8150:	100490fa 	slli	r2,r2,3
    8154:	10c5883a 	add	r2,r2,r3
    8158:	10800104 	addi	r2,r2,4
    815c:	11000017 	ldw	r4,0(r2)
    8160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8164:	0005313a 	rdctl	r2,ipending
    8168:	e0bffb15 	stw	r2,-20(fp)

  return active;
    816c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    8174:	e0bfff17 	ldw	r2,-4(fp)
    8178:	1004c03a 	cmpne	r2,r2,zero
    817c:	103fe31e 	bne	r2,zero,810c <alt_irq_handler+0x20>
    8180:	00000706 	br	81a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8184:	e0bffe17 	ldw	r2,-8(fp)
    8188:	1085883a 	add	r2,r2,r2
    818c:	e0bffe15 	stw	r2,-8(fp)
      i++;
    8190:	e0bffd17 	ldw	r2,-12(fp)
    8194:	10800044 	addi	r2,r2,1
    8198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    819c:	003fde06 	br	8118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a0:	e037883a 	mov	sp,fp
    81a4:	dfc00117 	ldw	ra,4(sp)
    81a8:	df000017 	ldw	fp,0(sp)
    81ac:	dec00204 	addi	sp,sp,8
    81b0:	f800283a 	ret

Disassembly of section .text:

000081b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    81bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c0:	d68b8014 	ori	gp,gp,11776
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81c8:	10ac4714 	ori	r2,r2,45340

    movhi r3, %hi(__bss_end)
    81cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d0:	18ecb314 	ori	r3,r3,45772

    beq r2, r3, 1f
    81d4:	10c00326 	beq	r2,r3,81e4 <_start+0x30>

0:
    stw zero, (r2)
    81d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e0:	10fffd36 	bltu	r2,r3,81d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e4:	000936c0 	call	936c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81e8:	00094580 	call	9458 <alt_main>

000081ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81ec:	003fff06 	br	81ec <alt_after_alt_main>

000081f0 <Time_Clock>:
unsigned int ss = 00;

const unsigned char LED_HEX[17] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x88,0x83,0xC6,0xA1,0x86,0x8E, 0xFF};


void Time_Clock(){
    81f0:	deffff04 	addi	sp,sp,-4
    81f4:	df000015 	stw	fp,0(sp)
    81f8:	d839883a 	mov	fp,sp
	ss++;
    81fc:	d0a0c817 	ldw	r2,-31968(gp)
    8200:	10800044 	addi	r2,r2,1
    8204:	d0a0c815 	stw	r2,-31968(gp)
	if(ss==60){
    8208:	d0a0c817 	ldw	r2,-31968(gp)
    820c:	10800f18 	cmpnei	r2,r2,60
    8210:	10000f1e 	bne	r2,zero,8250 <Time_Clock+0x60>
		mm++;
    8214:	d0a00117 	ldw	r2,-32764(gp)
    8218:	10800044 	addi	r2,r2,1
    821c:	d0a00115 	stw	r2,-32764(gp)
		if(mm==60){
    8220:	d0a00117 	ldw	r2,-32764(gp)
    8224:	10800f18 	cmpnei	r2,r2,60
    8228:	1000081e 	bne	r2,zero,824c <Time_Clock+0x5c>
			hh++;
    822c:	d0a00017 	ldw	r2,-32768(gp)
    8230:	10800044 	addi	r2,r2,1
    8234:	d0a00015 	stw	r2,-32768(gp)
			if(hh==24){
    8238:	d0a00017 	ldw	r2,-32768(gp)
    823c:	10800618 	cmpnei	r2,r2,24
    8240:	1000011e 	bne	r2,zero,8248 <Time_Clock+0x58>
				hh=0;
    8244:	d0200015 	stw	zero,-32768(gp)
			}
			mm=0;
    8248:	d0200115 	stw	zero,-32764(gp)
		}
		ss=0;
    824c:	d020c815 	stw	zero,-31968(gp)
	}
}
    8250:	e037883a 	mov	sp,fp
    8254:	df000017 	ldw	fp,0(sp)
    8258:	dec00104 	addi	sp,sp,4
    825c:	f800283a 	ret

00008260 <Display>:


void Display(){
    8260:	defffe04 	addi	sp,sp,-8
    8264:	dfc00115 	stw	ra,4(sp)
    8268:	df000015 	stw	fp,0(sp)
    826c:	d839883a 	mov	fp,sp
	Time_Clock();
    8270:	00081f00 	call	81f0 <Time_Clock>
	// Hien thi ra console
	printf("\t%d : %d : %d \n", hh, mm, ss);
    8274:	d1600017 	ldw	r5,-32768(gp)
    8278:	d1a00117 	ldw	r6,-32764(gp)
    827c:	d1e0c817 	ldw	r7,-31968(gp)
    8280:	01000074 	movhi	r4,1
    8284:	212abf04 	addi	r4,r4,-21764
    8288:	000873c0 	call	873c <printf>

	// Hien thi ra cac HEX
	// Hien thi so giay
	IOWR(HEX_0_BASE,0, LED_HEX[ss%10]);
    828c:	d120c817 	ldw	r4,-31968(gp)
    8290:	01400284 	movi	r5,10
    8294:	00087340 	call	8734 <__umodsi3>
    8298:	1007883a 	mov	r3,r2
    829c:	00800074 	movhi	r2,1
    82a0:	10aaba04 	addi	r2,r2,-21784
    82a4:	10c5883a 	add	r2,r2,r3
    82a8:	10800003 	ldbu	r2,0(r2)
    82ac:	10c03fcc 	andi	r3,r2,255
    82b0:	00800074 	movhi	r2,1
    82b4:	10844c04 	addi	r2,r2,4400
    82b8:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX_1_BASE,0, LED_HEX[ss/10]);
    82bc:	d120c817 	ldw	r4,-31968(gp)
    82c0:	01400284 	movi	r5,10
    82c4:	000872c0 	call	872c <__udivsi3>
    82c8:	1007883a 	mov	r3,r2
    82cc:	00800074 	movhi	r2,1
    82d0:	10aaba04 	addi	r2,r2,-21784
    82d4:	10c5883a 	add	r2,r2,r3
    82d8:	10800003 	ldbu	r2,0(r2)
    82dc:	10c03fcc 	andi	r3,r2,255
    82e0:	00800074 	movhi	r2,1
    82e4:	10844804 	addi	r2,r2,4384
    82e8:	10c00035 	stwio	r3,0(r2)

	// Hien thi so phut
	IOWR(HEX_2_BASE,0, LED_HEX[mm%10]);
    82ec:	d1200117 	ldw	r4,-32764(gp)
    82f0:	01400284 	movi	r5,10
    82f4:	00087340 	call	8734 <__umodsi3>
    82f8:	1007883a 	mov	r3,r2
    82fc:	00800074 	movhi	r2,1
    8300:	10aaba04 	addi	r2,r2,-21784
    8304:	10c5883a 	add	r2,r2,r3
    8308:	10800003 	ldbu	r2,0(r2)
    830c:	10c03fcc 	andi	r3,r2,255
    8310:	00800074 	movhi	r2,1
    8314:	10844404 	addi	r2,r2,4368
    8318:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX_3_BASE,0, LED_HEX[mm/10]);
    831c:	d1200117 	ldw	r4,-32764(gp)
    8320:	01400284 	movi	r5,10
    8324:	000872c0 	call	872c <__udivsi3>
    8328:	1007883a 	mov	r3,r2
    832c:	00800074 	movhi	r2,1
    8330:	10aaba04 	addi	r2,r2,-21784
    8334:	10c5883a 	add	r2,r2,r3
    8338:	10800003 	ldbu	r2,0(r2)
    833c:	10c03fcc 	andi	r3,r2,255
    8340:	00800074 	movhi	r2,1
    8344:	10844004 	addi	r2,r2,4352
    8348:	10c00035 	stwio	r3,0(r2)

	// Hien thi so phut
	IOWR(HEX_4_BASE,0, LED_HEX[hh%10]);
    834c:	d1200017 	ldw	r4,-32768(gp)
    8350:	01400284 	movi	r5,10
    8354:	00087340 	call	8734 <__umodsi3>
    8358:	1007883a 	mov	r3,r2
    835c:	00800074 	movhi	r2,1
    8360:	10aaba04 	addi	r2,r2,-21784
    8364:	10c5883a 	add	r2,r2,r3
    8368:	10800003 	ldbu	r2,0(r2)
    836c:	10c03fcc 	andi	r3,r2,255
    8370:	00800074 	movhi	r2,1
    8374:	10843c04 	addi	r2,r2,4336
    8378:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX_5_BASE,0, LED_HEX[hh/10]);
    837c:	d1200017 	ldw	r4,-32768(gp)
    8380:	01400284 	movi	r5,10
    8384:	000872c0 	call	872c <__udivsi3>
    8388:	1007883a 	mov	r3,r2
    838c:	00800074 	movhi	r2,1
    8390:	10aaba04 	addi	r2,r2,-21784
    8394:	10c5883a 	add	r2,r2,r3
    8398:	10800003 	ldbu	r2,0(r2)
    839c:	10c03fcc 	andi	r3,r2,255
    83a0:	00800074 	movhi	r2,1
    83a4:	10843804 	addi	r2,r2,4320
    83a8:	10c00035 	stwio	r3,0(r2)
}
    83ac:	e037883a 	mov	sp,fp
    83b0:	dfc00117 	ldw	ra,4(sp)
    83b4:	df000017 	ldw	fp,0(sp)
    83b8:	dec00204 	addi	sp,sp,8
    83bc:	f800283a 	ret

000083c0 <Edit_Time>:

void Edit_Time(){
    83c0:	deffff04 	addi	sp,sp,-4
    83c4:	df000015 	stw	fp,0(sp)
    83c8:	d839883a 	mov	fp,sp

}
    83cc:	e037883a 	mov	sp,fp
    83d0:	df000017 	ldw	fp,0(sp)
    83d4:	dec00104 	addi	sp,sp,4
    83d8:	f800283a 	ret

000083dc <timer_Init>:



void timer_Init(){
    83dc:	defffe04 	addi	sp,sp,-8
    83e0:	df000115 	stw	fp,4(sp)
    83e4:	df000104 	addi	fp,sp,4
	unsigned int period = 0;
    83e8:	e03fff15 	stw	zero,-4(fp)
	// Stop Timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    83ec:	00c00074 	movhi	r3,1
    83f0:	18c40904 	addi	r3,r3,4132
    83f4:	00800204 	movi	r2,8
    83f8:	18800035 	stwio	r2,0(r3)
	//Configure period
	period = 50000000 - 1;
    83fc:	0080bef4 	movhi	r2,763
    8400:	10bc1fc4 	addi	r2,r2,-3969
    8404:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, period);
    8408:	e0ffff17 	ldw	r3,-4(fp)
    840c:	00800074 	movhi	r2,1
    8410:	10840a04 	addi	r2,r2,4136
    8414:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (period >> 16));
    8418:	e0bfff17 	ldw	r2,-4(fp)
    841c:	1004d43a 	srli	r2,r2,16
    8420:	1007883a 	mov	r3,r2
    8424:	00800074 	movhi	r2,1
    8428:	10840b04 	addi	r2,r2,4140
    842c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    8430:	00c00074 	movhi	r3,1
    8434:	18c40904 	addi	r3,r3,4132
    8438:	008001c4 	movi	r2,7
    843c:	18800035 	stwio	r2,0(r3)
			ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |    // Continue counting mode
			ALTERA_AVALON_TIMER_CONTROL_ITO_MSK |     // Interrupt enable
			ALTERA_AVALON_TIMER_CONTROL_START_MSK);   // Start Timer
}
    8440:	e037883a 	mov	sp,fp
    8444:	df000017 	ldw	fp,0(sp)
    8448:	dec00104 	addi	sp,sp,4
    844c:	f800283a 	ret

00008450 <Timer_IRQ_Handler>:



void Timer_IRQ_Handler(void* isr_context){
    8450:	defffd04 	addi	sp,sp,-12
    8454:	dfc00215 	stw	ra,8(sp)
    8458:	df000115 	stw	fp,4(sp)
    845c:	df000104 	addi	fp,sp,4
    8460:	e13fff15 	stw	r4,-4(fp)
counter ++;
    8464:	d0a0c717 	ldw	r2,-31972(gp)
    8468:	10800044 	addi	r2,r2,1
    846c:	d0a0c715 	stw	r2,-31972(gp)
if(counter==100) {counter=0;}
    8470:	d0a0c717 	ldw	r2,-31972(gp)
    8474:	10801918 	cmpnei	r2,r2,100
    8478:	1000011e 	bne	r2,zero,8480 <Timer_IRQ_Handler+0x30>
    847c:	d020c715 	stw	zero,-31972(gp)
printf("%d seconds\n", counter);
    8480:	d160c717 	ldw	r5,-31972(gp)
    8484:	01000074 	movhi	r4,1
    8488:	212ac304 	addi	r4,r4,-21748
    848c:	000873c0 	call	873c <printf>
IOWR(HEX_2_BASE,0, LED_HEX[16]);
    8490:	00800074 	movhi	r2,1
    8494:	10aaba04 	addi	r2,r2,-21784
    8498:	10800403 	ldbu	r2,16(r2)
    849c:	10c03fcc 	andi	r3,r2,255
    84a0:	00800074 	movhi	r2,1
    84a4:	10844404 	addi	r2,r2,4368
    84a8:	10c00035 	stwio	r3,0(r2)
IOWR(HEX_3_BASE,0, LED_HEX[16]);
    84ac:	00800074 	movhi	r2,1
    84b0:	10aaba04 	addi	r2,r2,-21784
    84b4:	10800403 	ldbu	r2,16(r2)
    84b8:	10c03fcc 	andi	r3,r2,255
    84bc:	00800074 	movhi	r2,1
    84c0:	10844004 	addi	r2,r2,4352
    84c4:	10c00035 	stwio	r3,0(r2)
IOWR(HEX_4_BASE,0, LED_HEX[16]);
    84c8:	00800074 	movhi	r2,1
    84cc:	10aaba04 	addi	r2,r2,-21784
    84d0:	10800403 	ldbu	r2,16(r2)
    84d4:	10c03fcc 	andi	r3,r2,255
    84d8:	00800074 	movhi	r2,1
    84dc:	10843c04 	addi	r2,r2,4336
    84e0:	10c00035 	stwio	r3,0(r2)
IOWR(HEX_5_BASE,0, LED_HEX[16]);
    84e4:	00800074 	movhi	r2,1
    84e8:	10aaba04 	addi	r2,r2,-21784
    84ec:	10800403 	ldbu	r2,16(r2)
    84f0:	10c03fcc 	andi	r3,r2,255
    84f4:	00800074 	movhi	r2,1
    84f8:	10843804 	addi	r2,r2,4320
    84fc:	10c00035 	stwio	r3,0(r2)
IOWR(HEX_6_BASE,0, LED_HEX[16]);
    8500:	00800074 	movhi	r2,1
    8504:	10aaba04 	addi	r2,r2,-21784
    8508:	10800403 	ldbu	r2,16(r2)
    850c:	10c03fcc 	andi	r3,r2,255
    8510:	00800074 	movhi	r2,1
    8514:	10843404 	addi	r2,r2,4304
    8518:	10c00035 	stwio	r3,0(r2)
IOWR(HEX_7_BASE,0, LED_HEX[16]);
    851c:	00800074 	movhi	r2,1
    8520:	10aaba04 	addi	r2,r2,-21784
    8524:	10800403 	ldbu	r2,16(r2)
    8528:	10c03fcc 	andi	r3,r2,255
    852c:	00800074 	movhi	r2,1
    8530:	10843004 	addi	r2,r2,4288
    8534:	10c00035 	stwio	r3,0(r2)

IOWR(HEX_0_BASE,0, LED_HEX[counter%10]);
    8538:	d120c717 	ldw	r4,-31972(gp)
    853c:	01400284 	movi	r5,10
    8540:	00087340 	call	8734 <__umodsi3>
    8544:	1007883a 	mov	r3,r2
    8548:	00800074 	movhi	r2,1
    854c:	10aaba04 	addi	r2,r2,-21784
    8550:	10c5883a 	add	r2,r2,r3
    8554:	10800003 	ldbu	r2,0(r2)
    8558:	10c03fcc 	andi	r3,r2,255
    855c:	00800074 	movhi	r2,1
    8560:	10844c04 	addi	r2,r2,4400
    8564:	10c00035 	stwio	r3,0(r2)
IOWR(HEX_1_BASE,0, LED_HEX[counter/10]);
    8568:	d120c717 	ldw	r4,-31972(gp)
    856c:	01400284 	movi	r5,10
    8570:	000872c0 	call	872c <__udivsi3>
    8574:	1007883a 	mov	r3,r2
    8578:	00800074 	movhi	r2,1
    857c:	10aaba04 	addi	r2,r2,-21784
    8580:	10c5883a 	add	r2,r2,r3
    8584:	10800003 	ldbu	r2,0(r2)
    8588:	10c03fcc 	andi	r3,r2,255
    858c:	00800074 	movhi	r2,1
    8590:	10844804 	addi	r2,r2,4384
    8594:	10c00035 	stwio	r3,0(r2)

	//Display();

// Clear Timer interrupt bit
IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,ALTERA_AVALON_TIMER_STATUS_TO_MSK);
    8598:	00c00074 	movhi	r3,1
    859c:	18c40804 	addi	r3,r3,4128
    85a0:	00800044 	movi	r2,1
    85a4:	18800035 	stwio	r2,0(r3)
}
    85a8:	e037883a 	mov	sp,fp
    85ac:	dfc00117 	ldw	ra,4(sp)
    85b0:	df000017 	ldw	fp,0(sp)
    85b4:	dec00204 	addi	sp,sp,8
    85b8:	f800283a 	ret

000085bc <main>:



void main(){
    85bc:	defffd04 	addi	sp,sp,-12
    85c0:	dfc00215 	stw	ra,8(sp)
    85c4:	df000115 	stw	fp,4(sp)
    85c8:	df000104 	addi	fp,sp,4
	timer_Init();
    85cc:	00083dc0 	call	83dc <timer_Init>
	alt_ic_isr_register(0, TIMER_0_IRQ, Timer_IRQ_Handler, (void*)0, (void*)0);
    85d0:	d8000015 	stw	zero,0(sp)
    85d4:	0009883a 	mov	r4,zero
    85d8:	01400044 	movi	r5,1
    85dc:	01800074 	movhi	r6,1
    85e0:	31a11404 	addi	r6,r6,-31664
    85e4:	000f883a 	mov	r7,zero
    85e8:	00090a00 	call	90a0 <alt_ic_isr_register>
	while(1);
    85ec:	003fff06 	br	85ec <main+0x30>

000085f0 <udivmodsi4>:
    85f0:	29001b2e 	bgeu	r5,r4,8660 <udivmodsi4+0x70>
    85f4:	28001a16 	blt	r5,zero,8660 <udivmodsi4+0x70>
    85f8:	00800044 	movi	r2,1
    85fc:	0007883a 	mov	r3,zero
    8600:	01c007c4 	movi	r7,31
    8604:	00000306 	br	8614 <udivmodsi4+0x24>
    8608:	19c01326 	beq	r3,r7,8658 <udivmodsi4+0x68>
    860c:	18c00044 	addi	r3,r3,1
    8610:	28000416 	blt	r5,zero,8624 <udivmodsi4+0x34>
    8614:	294b883a 	add	r5,r5,r5
    8618:	1085883a 	add	r2,r2,r2
    861c:	293ffa36 	bltu	r5,r4,8608 <udivmodsi4+0x18>
    8620:	10000d26 	beq	r2,zero,8658 <udivmodsi4+0x68>
    8624:	0007883a 	mov	r3,zero
    8628:	21400236 	bltu	r4,r5,8634 <udivmodsi4+0x44>
    862c:	2149c83a 	sub	r4,r4,r5
    8630:	1886b03a 	or	r3,r3,r2
    8634:	1004d07a 	srli	r2,r2,1
    8638:	280ad07a 	srli	r5,r5,1
    863c:	103ffa1e 	bne	r2,zero,8628 <udivmodsi4+0x38>
    8640:	30000226 	beq	r6,zero,864c <udivmodsi4+0x5c>
    8644:	2005883a 	mov	r2,r4
    8648:	f800283a 	ret
    864c:	1809883a 	mov	r4,r3
    8650:	2005883a 	mov	r2,r4
    8654:	f800283a 	ret
    8658:	0007883a 	mov	r3,zero
    865c:	003ff806 	br	8640 <udivmodsi4+0x50>
    8660:	00800044 	movi	r2,1
    8664:	0007883a 	mov	r3,zero
    8668:	003fef06 	br	8628 <udivmodsi4+0x38>

0000866c <__divsi3>:
    866c:	defffe04 	addi	sp,sp,-8
    8670:	dc000015 	stw	r16,0(sp)
    8674:	dfc00115 	stw	ra,4(sp)
    8678:	0021883a 	mov	r16,zero
    867c:	20000c16 	blt	r4,zero,86b0 <__divsi3+0x44>
    8680:	000d883a 	mov	r6,zero
    8684:	28000e16 	blt	r5,zero,86c0 <__divsi3+0x54>
    8688:	00085f00 	call	85f0 <udivmodsi4>
    868c:	1007883a 	mov	r3,r2
    8690:	8005003a 	cmpeq	r2,r16,zero
    8694:	1000011e 	bne	r2,zero,869c <__divsi3+0x30>
    8698:	00c7c83a 	sub	r3,zero,r3
    869c:	1805883a 	mov	r2,r3
    86a0:	dfc00117 	ldw	ra,4(sp)
    86a4:	dc000017 	ldw	r16,0(sp)
    86a8:	dec00204 	addi	sp,sp,8
    86ac:	f800283a 	ret
    86b0:	0109c83a 	sub	r4,zero,r4
    86b4:	04000044 	movi	r16,1
    86b8:	000d883a 	mov	r6,zero
    86bc:	283ff20e 	bge	r5,zero,8688 <__divsi3+0x1c>
    86c0:	014bc83a 	sub	r5,zero,r5
    86c4:	8021003a 	cmpeq	r16,r16,zero
    86c8:	003fef06 	br	8688 <__divsi3+0x1c>

000086cc <__modsi3>:
    86cc:	deffff04 	addi	sp,sp,-4
    86d0:	dfc00015 	stw	ra,0(sp)
    86d4:	01800044 	movi	r6,1
    86d8:	2807883a 	mov	r3,r5
    86dc:	20000416 	blt	r4,zero,86f0 <__modsi3+0x24>
    86e0:	28000c16 	blt	r5,zero,8714 <__modsi3+0x48>
    86e4:	dfc00017 	ldw	ra,0(sp)
    86e8:	dec00104 	addi	sp,sp,4
    86ec:	00085f01 	jmpi	85f0 <udivmodsi4>
    86f0:	0109c83a 	sub	r4,zero,r4
    86f4:	28000b16 	blt	r5,zero,8724 <__modsi3+0x58>
    86f8:	180b883a 	mov	r5,r3
    86fc:	01800044 	movi	r6,1
    8700:	00085f00 	call	85f0 <udivmodsi4>
    8704:	0085c83a 	sub	r2,zero,r2
    8708:	dfc00017 	ldw	ra,0(sp)
    870c:	dec00104 	addi	sp,sp,4
    8710:	f800283a 	ret
    8714:	014bc83a 	sub	r5,zero,r5
    8718:	dfc00017 	ldw	ra,0(sp)
    871c:	dec00104 	addi	sp,sp,4
    8720:	00085f01 	jmpi	85f0 <udivmodsi4>
    8724:	0147c83a 	sub	r3,zero,r5
    8728:	003ff306 	br	86f8 <__modsi3+0x2c>

0000872c <__udivsi3>:
    872c:	000d883a 	mov	r6,zero
    8730:	00085f01 	jmpi	85f0 <udivmodsi4>

00008734 <__umodsi3>:
    8734:	01800044 	movi	r6,1
    8738:	00085f01 	jmpi	85f0 <udivmodsi4>

0000873c <printf>:
    873c:	defffb04 	addi	sp,sp,-20
    8740:	dfc00115 	stw	ra,4(sp)
    8744:	d9400215 	stw	r5,8(sp)
    8748:	d9800315 	stw	r6,12(sp)
    874c:	d9c00415 	stw	r7,16(sp)
    8750:	00800074 	movhi	r2,1
    8754:	10ab8204 	addi	r2,r2,-20984
    8758:	11400017 	ldw	r5,0(r2)
    875c:	d8800204 	addi	r2,sp,8
    8760:	d8800015 	stw	r2,0(sp)
    8764:	29c00217 	ldw	r7,8(r5)
    8768:	100d883a 	mov	r6,r2
    876c:	00800074 	movhi	r2,1
    8770:	10a3c504 	addi	r2,r2,-28908
    8774:	200b883a 	mov	r5,r4
    8778:	38800115 	stw	r2,4(r7)
    877c:	3809883a 	mov	r4,r7
    8780:	0008ef00 	call	8ef0 <__vfprintf_internal>
    8784:	dfc00117 	ldw	ra,4(sp)
    8788:	dec00504 	addi	sp,sp,20
    878c:	f800283a 	ret

00008790 <_printf_r>:
    8790:	defffc04 	addi	sp,sp,-16
    8794:	dfc00115 	stw	ra,4(sp)
    8798:	d9800215 	stw	r6,8(sp)
    879c:	d9c00315 	stw	r7,12(sp)
    87a0:	22000217 	ldw	r8,8(r4)
    87a4:	d8800204 	addi	r2,sp,8
    87a8:	d8800015 	stw	r2,0(sp)
    87ac:	100f883a 	mov	r7,r2
    87b0:	00800074 	movhi	r2,1
    87b4:	10a3c504 	addi	r2,r2,-28908
    87b8:	280d883a 	mov	r6,r5
    87bc:	40800115 	stw	r2,4(r8)
    87c0:	400b883a 	mov	r5,r8
    87c4:	00088540 	call	8854 <___vfprintf_internal_r>
    87c8:	dfc00117 	ldw	ra,4(sp)
    87cc:	dec00404 	addi	sp,sp,16
    87d0:	f800283a 	ret

000087d4 <print_repeat>:
    87d4:	defffb04 	addi	sp,sp,-20
    87d8:	dc800315 	stw	r18,12(sp)
    87dc:	dc400215 	stw	r17,8(sp)
    87e0:	dc000115 	stw	r16,4(sp)
    87e4:	dfc00415 	stw	ra,16(sp)
    87e8:	2025883a 	mov	r18,r4
    87ec:	2823883a 	mov	r17,r5
    87f0:	3821883a 	mov	r16,r7
    87f4:	d9800005 	stb	r6,0(sp)
    87f8:	9009883a 	mov	r4,r18
    87fc:	880b883a 	mov	r5,r17
    8800:	d80d883a 	mov	r6,sp
    8804:	01c00044 	movi	r7,1
    8808:	04000b0e 	bge	zero,r16,8838 <print_repeat+0x64>
    880c:	88c00117 	ldw	r3,4(r17)
    8810:	843fffc4 	addi	r16,r16,-1
    8814:	183ee83a 	callr	r3
    8818:	103ff726 	beq	r2,zero,87f8 <print_repeat+0x24>
    881c:	00bfffc4 	movi	r2,-1
    8820:	dfc00417 	ldw	ra,16(sp)
    8824:	dc800317 	ldw	r18,12(sp)
    8828:	dc400217 	ldw	r17,8(sp)
    882c:	dc000117 	ldw	r16,4(sp)
    8830:	dec00504 	addi	sp,sp,20
    8834:	f800283a 	ret
    8838:	0005883a 	mov	r2,zero
    883c:	dfc00417 	ldw	ra,16(sp)
    8840:	dc800317 	ldw	r18,12(sp)
    8844:	dc400217 	ldw	r17,8(sp)
    8848:	dc000117 	ldw	r16,4(sp)
    884c:	dec00504 	addi	sp,sp,20
    8850:	f800283a 	ret

00008854 <___vfprintf_internal_r>:
    8854:	deffe304 	addi	sp,sp,-116
    8858:	df001b15 	stw	fp,108(sp)
    885c:	ddc01a15 	stw	r23,104(sp)
    8860:	dd001715 	stw	r20,92(sp)
    8864:	dc801515 	stw	r18,84(sp)
    8868:	dc001315 	stw	r16,76(sp)
    886c:	dfc01c15 	stw	ra,112(sp)
    8870:	dd801915 	stw	r22,100(sp)
    8874:	dd401815 	stw	r21,96(sp)
    8878:	dcc01615 	stw	r19,88(sp)
    887c:	dc401415 	stw	r17,80(sp)
    8880:	d9001015 	stw	r4,64(sp)
    8884:	2829883a 	mov	r20,r5
    8888:	d9c01115 	stw	r7,68(sp)
    888c:	3025883a 	mov	r18,r6
    8890:	0021883a 	mov	r16,zero
    8894:	d8000f15 	stw	zero,60(sp)
    8898:	d8000e15 	stw	zero,56(sp)
    889c:	0039883a 	mov	fp,zero
    88a0:	d8000915 	stw	zero,36(sp)
    88a4:	d8000d15 	stw	zero,52(sp)
    88a8:	d8000c15 	stw	zero,48(sp)
    88ac:	d8000b15 	stw	zero,44(sp)
    88b0:	002f883a 	mov	r23,zero
    88b4:	91400003 	ldbu	r5,0(r18)
    88b8:	01c00044 	movi	r7,1
    88bc:	94800044 	addi	r18,r18,1
    88c0:	29003fcc 	andi	r4,r5,255
    88c4:	2100201c 	xori	r4,r4,128
    88c8:	213fe004 	addi	r4,r4,-128
    88cc:	20001526 	beq	r4,zero,8924 <___vfprintf_internal_r+0xd0>
    88d0:	81c03526 	beq	r16,r7,89a8 <___vfprintf_internal_r+0x154>
    88d4:	3c002016 	blt	r7,r16,8958 <___vfprintf_internal_r+0x104>
    88d8:	803ff61e 	bne	r16,zero,88b4 <___vfprintf_internal_r+0x60>
    88dc:	00800944 	movi	r2,37
    88e0:	2081501e 	bne	r4,r2,8e24 <___vfprintf_internal_r+0x5d0>
    88e4:	073fffc4 	movi	fp,-1
    88e8:	00800284 	movi	r2,10
    88ec:	d9c00c15 	stw	r7,48(sp)
    88f0:	d8000f15 	stw	zero,60(sp)
    88f4:	d8000e15 	stw	zero,56(sp)
    88f8:	df000915 	stw	fp,36(sp)
    88fc:	d8800d15 	stw	r2,52(sp)
    8900:	d8000b15 	stw	zero,44(sp)
    8904:	91400003 	ldbu	r5,0(r18)
    8908:	3821883a 	mov	r16,r7
    890c:	94800044 	addi	r18,r18,1
    8910:	29003fcc 	andi	r4,r5,255
    8914:	2100201c 	xori	r4,r4,128
    8918:	213fe004 	addi	r4,r4,-128
    891c:	01c00044 	movi	r7,1
    8920:	203feb1e 	bne	r4,zero,88d0 <___vfprintf_internal_r+0x7c>
    8924:	b805883a 	mov	r2,r23
    8928:	dfc01c17 	ldw	ra,112(sp)
    892c:	df001b17 	ldw	fp,108(sp)
    8930:	ddc01a17 	ldw	r23,104(sp)
    8934:	dd801917 	ldw	r22,100(sp)
    8938:	dd401817 	ldw	r21,96(sp)
    893c:	dd001717 	ldw	r20,92(sp)
    8940:	dcc01617 	ldw	r19,88(sp)
    8944:	dc801517 	ldw	r18,84(sp)
    8948:	dc401417 	ldw	r17,80(sp)
    894c:	dc001317 	ldw	r16,76(sp)
    8950:	dec01d04 	addi	sp,sp,116
    8954:	f800283a 	ret
    8958:	00800084 	movi	r2,2
    895c:	80801726 	beq	r16,r2,89bc <___vfprintf_internal_r+0x168>
    8960:	008000c4 	movi	r2,3
    8964:	80bfd31e 	bne	r16,r2,88b4 <___vfprintf_internal_r+0x60>
    8968:	2c7ff404 	addi	r17,r5,-48
    896c:	88c03fcc 	andi	r3,r17,255
    8970:	00800244 	movi	r2,9
    8974:	10c02136 	bltu	r2,r3,89fc <___vfprintf_internal_r+0x1a8>
    8978:	d8c00917 	ldw	r3,36(sp)
    897c:	18012716 	blt	r3,zero,8e1c <___vfprintf_internal_r+0x5c8>
    8980:	d9000917 	ldw	r4,36(sp)
    8984:	01400284 	movi	r5,10
    8988:	00090680 	call	9068 <__mulsi3>
    898c:	1007883a 	mov	r3,r2
    8990:	88803fcc 	andi	r2,r17,255
    8994:	1080201c 	xori	r2,r2,128
    8998:	10bfe004 	addi	r2,r2,-128
    899c:	1887883a 	add	r3,r3,r2
    89a0:	d8c00915 	stw	r3,36(sp)
    89a4:	003fc306 	br	88b4 <___vfprintf_internal_r+0x60>
    89a8:	00800c04 	movi	r2,48
    89ac:	2080b326 	beq	r4,r2,8c7c <___vfprintf_internal_r+0x428>
    89b0:	00800944 	movi	r2,37
    89b4:	20812726 	beq	r4,r2,8e54 <___vfprintf_internal_r+0x600>
    89b8:	04000084 	movi	r16,2
    89bc:	2c7ff404 	addi	r17,r5,-48
    89c0:	88c03fcc 	andi	r3,r17,255
    89c4:	00800244 	movi	r2,9
    89c8:	10c00a36 	bltu	r2,r3,89f4 <___vfprintf_internal_r+0x1a0>
    89cc:	e000b416 	blt	fp,zero,8ca0 <___vfprintf_internal_r+0x44c>
    89d0:	e009883a 	mov	r4,fp
    89d4:	01400284 	movi	r5,10
    89d8:	00090680 	call	9068 <__mulsi3>
    89dc:	1007883a 	mov	r3,r2
    89e0:	88803fcc 	andi	r2,r17,255
    89e4:	1080201c 	xori	r2,r2,128
    89e8:	10bfe004 	addi	r2,r2,-128
    89ec:	18b9883a 	add	fp,r3,r2
    89f0:	003fb006 	br	88b4 <___vfprintf_internal_r+0x60>
    89f4:	00800b84 	movi	r2,46
    89f8:	2080a326 	beq	r4,r2,8c88 <___vfprintf_internal_r+0x434>
    89fc:	00801b04 	movi	r2,108
    8a00:	2080a326 	beq	r4,r2,8c90 <___vfprintf_internal_r+0x43c>
    8a04:	d8c00917 	ldw	r3,36(sp)
    8a08:	1800a716 	blt	r3,zero,8ca8 <___vfprintf_internal_r+0x454>
    8a0c:	d8000f15 	stw	zero,60(sp)
    8a10:	28bfea04 	addi	r2,r5,-88
    8a14:	10803fcc 	andi	r2,r2,255
    8a18:	00c00804 	movi	r3,32
    8a1c:	18802836 	bltu	r3,r2,8ac0 <___vfprintf_internal_r+0x26c>
    8a20:	1085883a 	add	r2,r2,r2
    8a24:	1085883a 	add	r2,r2,r2
    8a28:	00c00074 	movhi	r3,1
    8a2c:	18e28f04 	addi	r3,r3,-30148
    8a30:	10c5883a 	add	r2,r2,r3
    8a34:	11000017 	ldw	r4,0(r2)
    8a38:	2000683a 	jmp	r4
    8a3c:	00008ac8 	cmpgei	zero,zero,555
    8a40:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a44:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a48:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a4c:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a50:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a54:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a58:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a5c:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a60:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a64:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a68:	00008cf4 	movhi	zero,563
    8a6c:	00008adc 	xori	zero,zero,555
    8a70:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a74:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a78:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a7c:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a80:	00008adc 	xori	zero,zero,555
    8a84:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a88:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a8c:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a90:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a94:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8a98:	00008d5c 	xori	zero,zero,565
    8a9c:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8aa0:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8aa4:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8aa8:	00008d6c 	andhi	zero,zero,565
    8aac:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8ab0:	00008c40 	call	8c4 <__alt_mem_onchip_memory2_0-0x773c>
    8ab4:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8ab8:	00008ac0 	call	8ac <__alt_mem_onchip_memory2_0-0x7754>
    8abc:	00008c38 	rdprs	zero,zero,560
    8ac0:	0021883a 	mov	r16,zero
    8ac4:	003f7b06 	br	88b4 <___vfprintf_internal_r+0x60>
    8ac8:	00c00404 	movi	r3,16
    8acc:	00800044 	movi	r2,1
    8ad0:	d8c00d15 	stw	r3,52(sp)
    8ad4:	d8000c15 	stw	zero,48(sp)
    8ad8:	d8800b15 	stw	r2,44(sp)
    8adc:	d8c00e17 	ldw	r3,56(sp)
    8ae0:	1805003a 	cmpeq	r2,r3,zero
    8ae4:	10005a1e 	bne	r2,zero,8c50 <___vfprintf_internal_r+0x3fc>
    8ae8:	d8800c17 	ldw	r2,48(sp)
    8aec:	1000781e 	bne	r2,zero,8cd0 <___vfprintf_internal_r+0x47c>
    8af0:	d8801117 	ldw	r2,68(sp)
    8af4:	d8000a15 	stw	zero,40(sp)
    8af8:	14400017 	ldw	r17,0(r2)
    8afc:	11c00104 	addi	r7,r2,4
    8b00:	d9c01115 	stw	r7,68(sp)
    8b04:	88005a26 	beq	r17,zero,8c70 <___vfprintf_internal_r+0x41c>
    8b08:	d8c00b17 	ldw	r3,44(sp)
    8b0c:	dcc00044 	addi	r19,sp,1
    8b10:	05800244 	movi	r22,9
    8b14:	182b003a 	cmpeq	r21,r3,zero
    8b18:	dcc01215 	stw	r19,72(sp)
    8b1c:	00000506 	br	8b34 <___vfprintf_internal_r+0x2e0>
    8b20:	21000c04 	addi	r4,r4,48
    8b24:	99000005 	stb	r4,0(r19)
    8b28:	9cc00044 	addi	r19,r19,1
    8b2c:	80000f26 	beq	r16,zero,8b6c <___vfprintf_internal_r+0x318>
    8b30:	8023883a 	mov	r17,r16
    8b34:	d9400d17 	ldw	r5,52(sp)
    8b38:	8809883a 	mov	r4,r17
    8b3c:	000872c0 	call	872c <__udivsi3>
    8b40:	d9000d17 	ldw	r4,52(sp)
    8b44:	100b883a 	mov	r5,r2
    8b48:	1021883a 	mov	r16,r2
    8b4c:	00090680 	call	9068 <__mulsi3>
    8b50:	8889c83a 	sub	r4,r17,r2
    8b54:	b13ff20e 	bge	r22,r4,8b20 <___vfprintf_internal_r+0x2cc>
    8b58:	a8009f1e 	bne	r21,zero,8dd8 <___vfprintf_internal_r+0x584>
    8b5c:	21000dc4 	addi	r4,r4,55
    8b60:	99000005 	stb	r4,0(r19)
    8b64:	9cc00044 	addi	r19,r19,1
    8b68:	803ff11e 	bne	r16,zero,8b30 <___vfprintf_internal_r+0x2dc>
    8b6c:	d8801217 	ldw	r2,72(sp)
    8b70:	98a3c83a 	sub	r17,r19,r2
    8b74:	d8c00917 	ldw	r3,36(sp)
    8b78:	1c4bc83a 	sub	r5,r3,r17
    8b7c:	0140130e 	bge	zero,r5,8bcc <___vfprintf_internal_r+0x378>
    8b80:	d8c00044 	addi	r3,sp,1
    8b84:	18800804 	addi	r2,r3,32
    8b88:	9880102e 	bgeu	r19,r2,8bcc <___vfprintf_internal_r+0x378>
    8b8c:	00800c04 	movi	r2,48
    8b90:	28ffffc4 	addi	r3,r5,-1
    8b94:	98800005 	stb	r2,0(r19)
    8b98:	99000044 	addi	r4,r19,1
    8b9c:	00c0080e 	bge	zero,r3,8bc0 <___vfprintf_internal_r+0x36c>
    8ba0:	d8c00044 	addi	r3,sp,1
    8ba4:	18800804 	addi	r2,r3,32
    8ba8:	2080052e 	bgeu	r4,r2,8bc0 <___vfprintf_internal_r+0x36c>
    8bac:	00800c04 	movi	r2,48
    8bb0:	20800005 	stb	r2,0(r4)
    8bb4:	21000044 	addi	r4,r4,1
    8bb8:	9945883a 	add	r2,r19,r5
    8bbc:	20bff81e 	bne	r4,r2,8ba0 <___vfprintf_internal_r+0x34c>
    8bc0:	d8801217 	ldw	r2,72(sp)
    8bc4:	2027883a 	mov	r19,r4
    8bc8:	20a3c83a 	sub	r17,r4,r2
    8bcc:	d8c00a17 	ldw	r3,40(sp)
    8bd0:	1c45883a 	add	r2,r3,r17
    8bd4:	e0a1c83a 	sub	r16,fp,r2
    8bd8:	d8800f17 	ldw	r2,60(sp)
    8bdc:	10008026 	beq	r2,zero,8de0 <___vfprintf_internal_r+0x58c>
    8be0:	1805003a 	cmpeq	r2,r3,zero
    8be4:	1000ae26 	beq	r2,zero,8ea0 <___vfprintf_internal_r+0x64c>
    8be8:	0400a516 	blt	zero,r16,8e80 <___vfprintf_internal_r+0x62c>
    8bec:	b805883a 	mov	r2,r23
    8bf0:	0440950e 	bge	zero,r17,8e48 <___vfprintf_internal_r+0x5f4>
    8bf4:	102f883a 	mov	r23,r2
    8bf8:	1461883a 	add	r16,r2,r17
    8bfc:	00000206 	br	8c08 <___vfprintf_internal_r+0x3b4>
    8c00:	bdc00044 	addi	r23,r23,1
    8c04:	85ffae26 	beq	r16,r23,8ac0 <___vfprintf_internal_r+0x26c>
    8c08:	9cffffc4 	addi	r19,r19,-1
    8c0c:	98800003 	ldbu	r2,0(r19)
    8c10:	a0c00117 	ldw	r3,4(r20)
    8c14:	d9001017 	ldw	r4,64(sp)
    8c18:	d8800005 	stb	r2,0(sp)
    8c1c:	a00b883a 	mov	r5,r20
    8c20:	d80d883a 	mov	r6,sp
    8c24:	01c00044 	movi	r7,1
    8c28:	183ee83a 	callr	r3
    8c2c:	103ff426 	beq	r2,zero,8c00 <___vfprintf_internal_r+0x3ac>
    8c30:	05ffffc4 	movi	r23,-1
    8c34:	003f3b06 	br	8924 <___vfprintf_internal_r+0xd0>
    8c38:	00c00404 	movi	r3,16
    8c3c:	d8c00d15 	stw	r3,52(sp)
    8c40:	d8000c15 	stw	zero,48(sp)
    8c44:	d8c00e17 	ldw	r3,56(sp)
    8c48:	1805003a 	cmpeq	r2,r3,zero
    8c4c:	103fa626 	beq	r2,zero,8ae8 <___vfprintf_internal_r+0x294>
    8c50:	d8c00c17 	ldw	r3,48(sp)
    8c54:	1800171e 	bne	r3,zero,8cb4 <___vfprintf_internal_r+0x460>
    8c58:	d8c01117 	ldw	r3,68(sp)
    8c5c:	d8000a15 	stw	zero,40(sp)
    8c60:	1c400017 	ldw	r17,0(r3)
    8c64:	19c00104 	addi	r7,r3,4
    8c68:	d9c01115 	stw	r7,68(sp)
    8c6c:	883fa61e 	bne	r17,zero,8b08 <___vfprintf_internal_r+0x2b4>
    8c70:	dcc00044 	addi	r19,sp,1
    8c74:	dcc01215 	stw	r19,72(sp)
    8c78:	003fbe06 	br	8b74 <___vfprintf_internal_r+0x320>
    8c7c:	04000084 	movi	r16,2
    8c80:	d9c00f15 	stw	r7,60(sp)
    8c84:	003f0b06 	br	88b4 <___vfprintf_internal_r+0x60>
    8c88:	040000c4 	movi	r16,3
    8c8c:	003f0906 	br	88b4 <___vfprintf_internal_r+0x60>
    8c90:	00800044 	movi	r2,1
    8c94:	040000c4 	movi	r16,3
    8c98:	d8800e15 	stw	r2,56(sp)
    8c9c:	003f0506 	br	88b4 <___vfprintf_internal_r+0x60>
    8ca0:	0007883a 	mov	r3,zero
    8ca4:	003f4e06 	br	89e0 <___vfprintf_internal_r+0x18c>
    8ca8:	00800044 	movi	r2,1
    8cac:	d8800915 	stw	r2,36(sp)
    8cb0:	003f5706 	br	8a10 <___vfprintf_internal_r+0x1bc>
    8cb4:	d8801117 	ldw	r2,68(sp)
    8cb8:	14400017 	ldw	r17,0(r2)
    8cbc:	10800104 	addi	r2,r2,4
    8cc0:	d8801115 	stw	r2,68(sp)
    8cc4:	88000716 	blt	r17,zero,8ce4 <___vfprintf_internal_r+0x490>
    8cc8:	d8000a15 	stw	zero,40(sp)
    8ccc:	003f8d06 	br	8b04 <___vfprintf_internal_r+0x2b0>
    8cd0:	d8c01117 	ldw	r3,68(sp)
    8cd4:	1c400017 	ldw	r17,0(r3)
    8cd8:	18c00104 	addi	r3,r3,4
    8cdc:	d8c01115 	stw	r3,68(sp)
    8ce0:	883ff90e 	bge	r17,zero,8cc8 <___vfprintf_internal_r+0x474>
    8ce4:	00800044 	movi	r2,1
    8ce8:	0463c83a 	sub	r17,zero,r17
    8cec:	d8800a15 	stw	r2,40(sp)
    8cf0:	003f8406 	br	8b04 <___vfprintf_internal_r+0x2b0>
    8cf4:	04000044 	movi	r16,1
    8cf8:	8700080e 	bge	r16,fp,8d1c <___vfprintf_internal_r+0x4c8>
    8cfc:	d9001017 	ldw	r4,64(sp)
    8d00:	a00b883a 	mov	r5,r20
    8d04:	01800804 	movi	r6,32
    8d08:	e1ffffc4 	addi	r7,fp,-1
    8d0c:	00087d40 	call	87d4 <print_repeat>
    8d10:	103fc71e 	bne	r2,zero,8c30 <___vfprintf_internal_r+0x3dc>
    8d14:	e5c5883a 	add	r2,fp,r23
    8d18:	15ffffc4 	addi	r23,r2,-1
    8d1c:	d8c01117 	ldw	r3,68(sp)
    8d20:	d9001017 	ldw	r4,64(sp)
    8d24:	800f883a 	mov	r7,r16
    8d28:	18800017 	ldw	r2,0(r3)
    8d2c:	a0c00117 	ldw	r3,4(r20)
    8d30:	a00b883a 	mov	r5,r20
    8d34:	d8800005 	stb	r2,0(sp)
    8d38:	d80d883a 	mov	r6,sp
    8d3c:	183ee83a 	callr	r3
    8d40:	103fbb1e 	bne	r2,zero,8c30 <___vfprintf_internal_r+0x3dc>
    8d44:	d8801117 	ldw	r2,68(sp)
    8d48:	bdc00044 	addi	r23,r23,1
    8d4c:	0021883a 	mov	r16,zero
    8d50:	10800104 	addi	r2,r2,4
    8d54:	d8801115 	stw	r2,68(sp)
    8d58:	003ed606 	br	88b4 <___vfprintf_internal_r+0x60>
    8d5c:	00800204 	movi	r2,8
    8d60:	d8800d15 	stw	r2,52(sp)
    8d64:	d8000c15 	stw	zero,48(sp)
    8d68:	003fb606 	br	8c44 <___vfprintf_internal_r+0x3f0>
    8d6c:	d8c01117 	ldw	r3,68(sp)
    8d70:	1cc00017 	ldw	r19,0(r3)
    8d74:	9809883a 	mov	r4,r19
    8d78:	0008fd00 	call	8fd0 <strlen>
    8d7c:	e0a1c83a 	sub	r16,fp,r2
    8d80:	1023883a 	mov	r17,r2
    8d84:	0400070e 	bge	zero,r16,8da4 <___vfprintf_internal_r+0x550>
    8d88:	d9001017 	ldw	r4,64(sp)
    8d8c:	a00b883a 	mov	r5,r20
    8d90:	01800804 	movi	r6,32
    8d94:	800f883a 	mov	r7,r16
    8d98:	00087d40 	call	87d4 <print_repeat>
    8d9c:	103fa41e 	bne	r2,zero,8c30 <___vfprintf_internal_r+0x3dc>
    8da0:	bc2f883a 	add	r23,r23,r16
    8da4:	a0c00117 	ldw	r3,4(r20)
    8da8:	d9001017 	ldw	r4,64(sp)
    8dac:	980d883a 	mov	r6,r19
    8db0:	a00b883a 	mov	r5,r20
    8db4:	880f883a 	mov	r7,r17
    8db8:	183ee83a 	callr	r3
    8dbc:	103f9c1e 	bne	r2,zero,8c30 <___vfprintf_internal_r+0x3dc>
    8dc0:	d8801117 	ldw	r2,68(sp)
    8dc4:	bc6f883a 	add	r23,r23,r17
    8dc8:	0021883a 	mov	r16,zero
    8dcc:	10800104 	addi	r2,r2,4
    8dd0:	d8801115 	stw	r2,68(sp)
    8dd4:	003eb706 	br	88b4 <___vfprintf_internal_r+0x60>
    8dd8:	210015c4 	addi	r4,r4,87
    8ddc:	003f5106 	br	8b24 <___vfprintf_internal_r+0x2d0>
    8de0:	04003b16 	blt	zero,r16,8ed0 <___vfprintf_internal_r+0x67c>
    8de4:	d8c00a17 	ldw	r3,40(sp)
    8de8:	1805003a 	cmpeq	r2,r3,zero
    8dec:	103f7f1e 	bne	r2,zero,8bec <___vfprintf_internal_r+0x398>
    8df0:	a0c00117 	ldw	r3,4(r20)
    8df4:	d9001017 	ldw	r4,64(sp)
    8df8:	00800b44 	movi	r2,45
    8dfc:	d8800005 	stb	r2,0(sp)
    8e00:	a00b883a 	mov	r5,r20
    8e04:	d80d883a 	mov	r6,sp
    8e08:	01c00044 	movi	r7,1
    8e0c:	183ee83a 	callr	r3
    8e10:	103f871e 	bne	r2,zero,8c30 <___vfprintf_internal_r+0x3dc>
    8e14:	b8800044 	addi	r2,r23,1
    8e18:	003f7506 	br	8bf0 <___vfprintf_internal_r+0x39c>
    8e1c:	0007883a 	mov	r3,zero
    8e20:	003edb06 	br	8990 <___vfprintf_internal_r+0x13c>
    8e24:	a0c00117 	ldw	r3,4(r20)
    8e28:	d9001017 	ldw	r4,64(sp)
    8e2c:	d9400005 	stb	r5,0(sp)
    8e30:	d80d883a 	mov	r6,sp
    8e34:	a00b883a 	mov	r5,r20
    8e38:	183ee83a 	callr	r3
    8e3c:	103f7c1e 	bne	r2,zero,8c30 <___vfprintf_internal_r+0x3dc>
    8e40:	bdc00044 	addi	r23,r23,1
    8e44:	003e9b06 	br	88b4 <___vfprintf_internal_r+0x60>
    8e48:	102f883a 	mov	r23,r2
    8e4c:	0021883a 	mov	r16,zero
    8e50:	003e9806 	br	88b4 <___vfprintf_internal_r+0x60>
    8e54:	a0c00117 	ldw	r3,4(r20)
    8e58:	d9000005 	stb	r4,0(sp)
    8e5c:	d9001017 	ldw	r4,64(sp)
    8e60:	a00b883a 	mov	r5,r20
    8e64:	d80d883a 	mov	r6,sp
    8e68:	800f883a 	mov	r7,r16
    8e6c:	183ee83a 	callr	r3
    8e70:	103f6f1e 	bne	r2,zero,8c30 <___vfprintf_internal_r+0x3dc>
    8e74:	bc2f883a 	add	r23,r23,r16
    8e78:	0021883a 	mov	r16,zero
    8e7c:	003e8d06 	br	88b4 <___vfprintf_internal_r+0x60>
    8e80:	d9001017 	ldw	r4,64(sp)
    8e84:	a00b883a 	mov	r5,r20
    8e88:	01800c04 	movi	r6,48
    8e8c:	800f883a 	mov	r7,r16
    8e90:	00087d40 	call	87d4 <print_repeat>
    8e94:	103f661e 	bne	r2,zero,8c30 <___vfprintf_internal_r+0x3dc>
    8e98:	bc05883a 	add	r2,r23,r16
    8e9c:	003f5406 	br	8bf0 <___vfprintf_internal_r+0x39c>
    8ea0:	a0c00117 	ldw	r3,4(r20)
    8ea4:	d9001017 	ldw	r4,64(sp)
    8ea8:	00800b44 	movi	r2,45
    8eac:	d8800005 	stb	r2,0(sp)
    8eb0:	a00b883a 	mov	r5,r20
    8eb4:	d80d883a 	mov	r6,sp
    8eb8:	01c00044 	movi	r7,1
    8ebc:	183ee83a 	callr	r3
    8ec0:	103f5b1e 	bne	r2,zero,8c30 <___vfprintf_internal_r+0x3dc>
    8ec4:	bdc00044 	addi	r23,r23,1
    8ec8:	043f480e 	bge	zero,r16,8bec <___vfprintf_internal_r+0x398>
    8ecc:	003fec06 	br	8e80 <___vfprintf_internal_r+0x62c>
    8ed0:	d9001017 	ldw	r4,64(sp)
    8ed4:	a00b883a 	mov	r5,r20
    8ed8:	01800804 	movi	r6,32
    8edc:	800f883a 	mov	r7,r16
    8ee0:	00087d40 	call	87d4 <print_repeat>
    8ee4:	103f521e 	bne	r2,zero,8c30 <___vfprintf_internal_r+0x3dc>
    8ee8:	bc2f883a 	add	r23,r23,r16
    8eec:	003fbd06 	br	8de4 <___vfprintf_internal_r+0x590>

00008ef0 <__vfprintf_internal>:
    8ef0:	00800074 	movhi	r2,1
    8ef4:	10ab8204 	addi	r2,r2,-20984
    8ef8:	2013883a 	mov	r9,r4
    8efc:	11000017 	ldw	r4,0(r2)
    8f00:	2805883a 	mov	r2,r5
    8f04:	300f883a 	mov	r7,r6
    8f08:	480b883a 	mov	r5,r9
    8f0c:	100d883a 	mov	r6,r2
    8f10:	00088541 	jmpi	8854 <___vfprintf_internal_r>

00008f14 <__sfvwrite_small_dev>:
    8f14:	2880000b 	ldhu	r2,0(r5)
    8f18:	defffa04 	addi	sp,sp,-24
    8f1c:	dcc00315 	stw	r19,12(sp)
    8f20:	1080020c 	andi	r2,r2,8
    8f24:	dc800215 	stw	r18,8(sp)
    8f28:	dc400115 	stw	r17,4(sp)
    8f2c:	dfc00515 	stw	ra,20(sp)
    8f30:	dd000415 	stw	r20,16(sp)
    8f34:	dc000015 	stw	r16,0(sp)
    8f38:	2825883a 	mov	r18,r5
    8f3c:	2027883a 	mov	r19,r4
    8f40:	3023883a 	mov	r17,r6
    8f44:	10002026 	beq	r2,zero,8fc8 <__sfvwrite_small_dev+0xb4>
    8f48:	2940008f 	ldh	r5,2(r5)
    8f4c:	28000f16 	blt	r5,zero,8f8c <__sfvwrite_small_dev+0x78>
    8f50:	01c01b0e 	bge	zero,r7,8fc0 <__sfvwrite_small_dev+0xac>
    8f54:	3821883a 	mov	r16,r7
    8f58:	05010004 	movi	r20,1024
    8f5c:	00000206 	br	8f68 <__sfvwrite_small_dev+0x54>
    8f60:	0400170e 	bge	zero,r16,8fc0 <__sfvwrite_small_dev+0xac>
    8f64:	9140008f 	ldh	r5,2(r18)
    8f68:	880d883a 	mov	r6,r17
    8f6c:	9809883a 	mov	r4,r19
    8f70:	800f883a 	mov	r7,r16
    8f74:	a400010e 	bge	r20,r16,8f7c <__sfvwrite_small_dev+0x68>
    8f78:	01c10004 	movi	r7,1024
    8f7c:	0008ff00 	call	8ff0 <_write_r>
    8f80:	88a3883a 	add	r17,r17,r2
    8f84:	80a1c83a 	sub	r16,r16,r2
    8f88:	00bff516 	blt	zero,r2,8f60 <__sfvwrite_small_dev+0x4c>
    8f8c:	9080000b 	ldhu	r2,0(r18)
    8f90:	00ffffc4 	movi	r3,-1
    8f94:	10801014 	ori	r2,r2,64
    8f98:	9080000d 	sth	r2,0(r18)
    8f9c:	1805883a 	mov	r2,r3
    8fa0:	dfc00517 	ldw	ra,20(sp)
    8fa4:	dd000417 	ldw	r20,16(sp)
    8fa8:	dcc00317 	ldw	r19,12(sp)
    8fac:	dc800217 	ldw	r18,8(sp)
    8fb0:	dc400117 	ldw	r17,4(sp)
    8fb4:	dc000017 	ldw	r16,0(sp)
    8fb8:	dec00604 	addi	sp,sp,24
    8fbc:	f800283a 	ret
    8fc0:	0007883a 	mov	r3,zero
    8fc4:	003ff506 	br	8f9c <__sfvwrite_small_dev+0x88>
    8fc8:	00ffffc4 	movi	r3,-1
    8fcc:	003ff306 	br	8f9c <__sfvwrite_small_dev+0x88>

00008fd0 <strlen>:
    8fd0:	20800007 	ldb	r2,0(r4)
    8fd4:	10000526 	beq	r2,zero,8fec <strlen+0x1c>
    8fd8:	2007883a 	mov	r3,r4
    8fdc:	18c00044 	addi	r3,r3,1
    8fe0:	18800007 	ldb	r2,0(r3)
    8fe4:	103ffd1e 	bne	r2,zero,8fdc <strlen+0xc>
    8fe8:	1905c83a 	sub	r2,r3,r4
    8fec:	f800283a 	ret

00008ff0 <_write_r>:
    8ff0:	defffd04 	addi	sp,sp,-12
    8ff4:	dc000015 	stw	r16,0(sp)
    8ff8:	04000074 	movhi	r16,1
    8ffc:	842c4904 	addi	r16,r16,-20188
    9000:	dc400115 	stw	r17,4(sp)
    9004:	80000015 	stw	zero,0(r16)
    9008:	2023883a 	mov	r17,r4
    900c:	2809883a 	mov	r4,r5
    9010:	300b883a 	mov	r5,r6
    9014:	380d883a 	mov	r6,r7
    9018:	dfc00215 	stw	ra,8(sp)
    901c:	00094c40 	call	94c4 <write>
    9020:	1007883a 	mov	r3,r2
    9024:	00bfffc4 	movi	r2,-1
    9028:	18800626 	beq	r3,r2,9044 <_write_r+0x54>
    902c:	1805883a 	mov	r2,r3
    9030:	dfc00217 	ldw	ra,8(sp)
    9034:	dc400117 	ldw	r17,4(sp)
    9038:	dc000017 	ldw	r16,0(sp)
    903c:	dec00304 	addi	sp,sp,12
    9040:	f800283a 	ret
    9044:	80800017 	ldw	r2,0(r16)
    9048:	103ff826 	beq	r2,zero,902c <_write_r+0x3c>
    904c:	88800015 	stw	r2,0(r17)
    9050:	1805883a 	mov	r2,r3
    9054:	dfc00217 	ldw	ra,8(sp)
    9058:	dc400117 	ldw	r17,4(sp)
    905c:	dc000017 	ldw	r16,0(sp)
    9060:	dec00304 	addi	sp,sp,12
    9064:	f800283a 	ret

00009068 <__mulsi3>:
    9068:	20000a26 	beq	r4,zero,9094 <__mulsi3+0x2c>
    906c:	0007883a 	mov	r3,zero
    9070:	2080004c 	andi	r2,r4,1
    9074:	1005003a 	cmpeq	r2,r2,zero
    9078:	2008d07a 	srli	r4,r4,1
    907c:	1000011e 	bne	r2,zero,9084 <__mulsi3+0x1c>
    9080:	1947883a 	add	r3,r3,r5
    9084:	294b883a 	add	r5,r5,r5
    9088:	203ff91e 	bne	r4,zero,9070 <__mulsi3+0x8>
    908c:	1805883a 	mov	r2,r3
    9090:	f800283a 	ret
    9094:	0007883a 	mov	r3,zero
    9098:	1805883a 	mov	r2,r3
    909c:	f800283a 	ret

000090a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    90a0:	defff904 	addi	sp,sp,-28
    90a4:	dfc00615 	stw	ra,24(sp)
    90a8:	df000515 	stw	fp,20(sp)
    90ac:	df000504 	addi	fp,sp,20
    90b0:	e13ffc15 	stw	r4,-16(fp)
    90b4:	e17ffd15 	stw	r5,-12(fp)
    90b8:	e1bffe15 	stw	r6,-8(fp)
    90bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    90c0:	e0800217 	ldw	r2,8(fp)
    90c4:	d8800015 	stw	r2,0(sp)
    90c8:	e13ffc17 	ldw	r4,-16(fp)
    90cc:	e17ffd17 	ldw	r5,-12(fp)
    90d0:	e1bffe17 	ldw	r6,-8(fp)
    90d4:	e1ffff17 	ldw	r7,-4(fp)
    90d8:	00092740 	call	9274 <alt_iic_isr_register>
}  
    90dc:	e037883a 	mov	sp,fp
    90e0:	dfc00117 	ldw	ra,4(sp)
    90e4:	df000017 	ldw	fp,0(sp)
    90e8:	dec00204 	addi	sp,sp,8
    90ec:	f800283a 	ret

000090f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    90f0:	defff904 	addi	sp,sp,-28
    90f4:	df000615 	stw	fp,24(sp)
    90f8:	df000604 	addi	fp,sp,24
    90fc:	e13ffe15 	stw	r4,-8(fp)
    9100:	e17fff15 	stw	r5,-4(fp)
    9104:	e0bfff17 	ldw	r2,-4(fp)
    9108:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    910c:	0005303a 	rdctl	r2,status
    9110:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9114:	e0fffb17 	ldw	r3,-20(fp)
    9118:	00bfff84 	movi	r2,-2
    911c:	1884703a 	and	r2,r3,r2
    9120:	1001703a 	wrctl	status,r2
  
  return context;
    9124:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9128:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    912c:	e0fffc17 	ldw	r3,-16(fp)
    9130:	00800044 	movi	r2,1
    9134:	10c4983a 	sll	r2,r2,r3
    9138:	1007883a 	mov	r3,r2
    913c:	00800074 	movhi	r2,1
    9140:	10ac4a04 	addi	r2,r2,-20184
    9144:	10800017 	ldw	r2,0(r2)
    9148:	1886b03a 	or	r3,r3,r2
    914c:	00800074 	movhi	r2,1
    9150:	10ac4a04 	addi	r2,r2,-20184
    9154:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9158:	00800074 	movhi	r2,1
    915c:	10ac4a04 	addi	r2,r2,-20184
    9160:	10800017 	ldw	r2,0(r2)
    9164:	100170fa 	wrctl	ienable,r2
    9168:	e0bffd17 	ldw	r2,-12(fp)
    916c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9170:	e0bffa17 	ldw	r2,-24(fp)
    9174:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9178:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    917c:	e037883a 	mov	sp,fp
    9180:	df000017 	ldw	fp,0(sp)
    9184:	dec00104 	addi	sp,sp,4
    9188:	f800283a 	ret

0000918c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    918c:	defff904 	addi	sp,sp,-28
    9190:	df000615 	stw	fp,24(sp)
    9194:	df000604 	addi	fp,sp,24
    9198:	e13ffe15 	stw	r4,-8(fp)
    919c:	e17fff15 	stw	r5,-4(fp)
    91a0:	e0bfff17 	ldw	r2,-4(fp)
    91a4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    91a8:	0005303a 	rdctl	r2,status
    91ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91b0:	e0fffb17 	ldw	r3,-20(fp)
    91b4:	00bfff84 	movi	r2,-2
    91b8:	1884703a 	and	r2,r3,r2
    91bc:	1001703a 	wrctl	status,r2
  
  return context;
    91c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    91c4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    91c8:	e0fffc17 	ldw	r3,-16(fp)
    91cc:	00800044 	movi	r2,1
    91d0:	10c4983a 	sll	r2,r2,r3
    91d4:	0084303a 	nor	r2,zero,r2
    91d8:	1007883a 	mov	r3,r2
    91dc:	00800074 	movhi	r2,1
    91e0:	10ac4a04 	addi	r2,r2,-20184
    91e4:	10800017 	ldw	r2,0(r2)
    91e8:	1886703a 	and	r3,r3,r2
    91ec:	00800074 	movhi	r2,1
    91f0:	10ac4a04 	addi	r2,r2,-20184
    91f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    91f8:	00800074 	movhi	r2,1
    91fc:	10ac4a04 	addi	r2,r2,-20184
    9200:	10800017 	ldw	r2,0(r2)
    9204:	100170fa 	wrctl	ienable,r2
    9208:	e0bffd17 	ldw	r2,-12(fp)
    920c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9210:	e0bffa17 	ldw	r2,-24(fp)
    9214:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9218:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    921c:	e037883a 	mov	sp,fp
    9220:	df000017 	ldw	fp,0(sp)
    9224:	dec00104 	addi	sp,sp,4
    9228:	f800283a 	ret

0000922c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    922c:	defffc04 	addi	sp,sp,-16
    9230:	df000315 	stw	fp,12(sp)
    9234:	df000304 	addi	fp,sp,12
    9238:	e13ffe15 	stw	r4,-8(fp)
    923c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9240:	000530fa 	rdctl	r2,ienable
    9244:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9248:	e0ffff17 	ldw	r3,-4(fp)
    924c:	00800044 	movi	r2,1
    9250:	10c4983a 	sll	r2,r2,r3
    9254:	1007883a 	mov	r3,r2
    9258:	e0bffd17 	ldw	r2,-12(fp)
    925c:	1884703a 	and	r2,r3,r2
    9260:	1004c03a 	cmpne	r2,r2,zero
}
    9264:	e037883a 	mov	sp,fp
    9268:	df000017 	ldw	fp,0(sp)
    926c:	dec00104 	addi	sp,sp,4
    9270:	f800283a 	ret

00009274 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9274:	defff404 	addi	sp,sp,-48
    9278:	dfc00b15 	stw	ra,44(sp)
    927c:	df000a15 	stw	fp,40(sp)
    9280:	df000a04 	addi	fp,sp,40
    9284:	e13ffb15 	stw	r4,-20(fp)
    9288:	e17ffc15 	stw	r5,-16(fp)
    928c:	e1bffd15 	stw	r6,-12(fp)
    9290:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    9294:	00bffa84 	movi	r2,-22
    9298:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    929c:	e0bffc17 	ldw	r2,-16(fp)
    92a0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    92a4:	e0bff917 	ldw	r2,-28(fp)
    92a8:	10800808 	cmpgei	r2,r2,32
    92ac:	1000291e 	bne	r2,zero,9354 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    92b0:	0005303a 	rdctl	r2,status
    92b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92b8:	e0fff717 	ldw	r3,-36(fp)
    92bc:	00bfff84 	movi	r2,-2
    92c0:	1884703a 	and	r2,r3,r2
    92c4:	1001703a 	wrctl	status,r2
  
  return context;
    92c8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    92cc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    92d0:	e0bff917 	ldw	r2,-28(fp)
    92d4:	00c00074 	movhi	r3,1
    92d8:	18ec5004 	addi	r3,r3,-20160
    92dc:	100490fa 	slli	r2,r2,3
    92e0:	10c7883a 	add	r3,r2,r3
    92e4:	e0bffd17 	ldw	r2,-12(fp)
    92e8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    92ec:	e0bff917 	ldw	r2,-28(fp)
    92f0:	00c00074 	movhi	r3,1
    92f4:	18ec5004 	addi	r3,r3,-20160
    92f8:	100490fa 	slli	r2,r2,3
    92fc:	10c5883a 	add	r2,r2,r3
    9300:	10c00104 	addi	r3,r2,4
    9304:	e0bffe17 	ldw	r2,-8(fp)
    9308:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    930c:	e0bffd17 	ldw	r2,-12(fp)
    9310:	1005003a 	cmpeq	r2,r2,zero
    9314:	1000051e 	bne	r2,zero,932c <alt_iic_isr_register+0xb8>
    9318:	e17ff917 	ldw	r5,-28(fp)
    931c:	e13ffb17 	ldw	r4,-20(fp)
    9320:	00090f00 	call	90f0 <alt_ic_irq_enable>
    9324:	e0bfff15 	stw	r2,-4(fp)
    9328:	00000406 	br	933c <alt_iic_isr_register+0xc8>
    932c:	e17ff917 	ldw	r5,-28(fp)
    9330:	e13ffb17 	ldw	r4,-20(fp)
    9334:	000918c0 	call	918c <alt_ic_irq_disable>
    9338:	e0bfff15 	stw	r2,-4(fp)
    933c:	e0bfff17 	ldw	r2,-4(fp)
    9340:	e0bffa15 	stw	r2,-24(fp)
    9344:	e0bff817 	ldw	r2,-32(fp)
    9348:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    934c:	e0bff617 	ldw	r2,-40(fp)
    9350:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9354:	e0bffa17 	ldw	r2,-24(fp)
}
    9358:	e037883a 	mov	sp,fp
    935c:	dfc00117 	ldw	ra,4(sp)
    9360:	df000017 	ldw	fp,0(sp)
    9364:	dec00204 	addi	sp,sp,8
    9368:	f800283a 	ret

0000936c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    936c:	defffe04 	addi	sp,sp,-8
    9370:	dfc00115 	stw	ra,4(sp)
    9374:	df000015 	stw	fp,0(sp)
    9378:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    937c:	01000074 	movhi	r4,1
    9380:	212b8d04 	addi	r4,r4,-20940
    9384:	01400074 	movhi	r5,1
    9388:	296ad304 	addi	r5,r5,-21684
    938c:	01800074 	movhi	r6,1
    9390:	31ab8d04 	addi	r6,r6,-20940
    9394:	00093ec0 	call	93ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9398:	01000074 	movhi	r4,1
    939c:	21200804 	addi	r4,r4,-32736
    93a0:	01400074 	movhi	r5,1
    93a4:	29600804 	addi	r5,r5,-32736
    93a8:	01800074 	movhi	r6,1
    93ac:	31a06d04 	addi	r6,r6,-32332
    93b0:	00093ec0 	call	93ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    93b4:	01000074 	movhi	r4,1
    93b8:	212aba04 	addi	r4,r4,-21784
    93bc:	01400074 	movhi	r5,1
    93c0:	296aba04 	addi	r5,r5,-21784
    93c4:	01800074 	movhi	r6,1
    93c8:	31aad304 	addi	r6,r6,-21684
    93cc:	00093ec0 	call	93ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    93d0:	0009bb40 	call	9bb4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    93d4:	0009dd80 	call	9dd8 <alt_icache_flush_all>
}
    93d8:	e037883a 	mov	sp,fp
    93dc:	dfc00117 	ldw	ra,4(sp)
    93e0:	df000017 	ldw	fp,0(sp)
    93e4:	dec00204 	addi	sp,sp,8
    93e8:	f800283a 	ret

000093ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    93ec:	defffc04 	addi	sp,sp,-16
    93f0:	df000315 	stw	fp,12(sp)
    93f4:	df000304 	addi	fp,sp,12
    93f8:	e13ffd15 	stw	r4,-12(fp)
    93fc:	e17ffe15 	stw	r5,-8(fp)
    9400:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9404:	e0fffe17 	ldw	r3,-8(fp)
    9408:	e0bffd17 	ldw	r2,-12(fp)
    940c:	18800e26 	beq	r3,r2,9448 <alt_load_section+0x5c>
  {
    while( to != end )
    9410:	00000a06 	br	943c <alt_load_section+0x50>
    {
      *to++ = *from++;
    9414:	e0bffd17 	ldw	r2,-12(fp)
    9418:	10c00017 	ldw	r3,0(r2)
    941c:	e0bffe17 	ldw	r2,-8(fp)
    9420:	10c00015 	stw	r3,0(r2)
    9424:	e0bffe17 	ldw	r2,-8(fp)
    9428:	10800104 	addi	r2,r2,4
    942c:	e0bffe15 	stw	r2,-8(fp)
    9430:	e0bffd17 	ldw	r2,-12(fp)
    9434:	10800104 	addi	r2,r2,4
    9438:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    943c:	e0fffe17 	ldw	r3,-8(fp)
    9440:	e0bfff17 	ldw	r2,-4(fp)
    9444:	18bff31e 	bne	r3,r2,9414 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    9448:	e037883a 	mov	sp,fp
    944c:	df000017 	ldw	fp,0(sp)
    9450:	dec00104 	addi	sp,sp,4
    9454:	f800283a 	ret

00009458 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9458:	defffd04 	addi	sp,sp,-12
    945c:	dfc00215 	stw	ra,8(sp)
    9460:	df000115 	stw	fp,4(sp)
    9464:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9468:	0009883a 	mov	r4,zero
    946c:	00096480 	call	9648 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9470:	000967c0 	call	967c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9474:	01000074 	movhi	r4,1
    9478:	212ac604 	addi	r4,r4,-21736
    947c:	01400074 	movhi	r5,1
    9480:	296ac604 	addi	r5,r5,-21736
    9484:	01800074 	movhi	r6,1
    9488:	31aac604 	addi	r6,r6,-21736
    948c:	0009ecc0 	call	9ecc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    9490:	0009d100 	call	9d10 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    9494:	01000074 	movhi	r4,1
    9498:	21275d04 	addi	r4,r4,-25228
    949c:	000a6e80 	call	a6e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    94a0:	d120cb17 	ldw	r4,-31956(gp)
    94a4:	d160cc17 	ldw	r5,-31952(gp)
    94a8:	d1a0cd17 	ldw	r6,-31948(gp)
    94ac:	00085bc0 	call	85bc <main>
    94b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    94b4:	01000044 	movi	r4,1
    94b8:	0009a540 	call	9a54 <close>
  exit (result);
    94bc:	e13fff17 	ldw	r4,-4(fp)
    94c0:	000a6fc0 	call	a6fc <exit>

000094c4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    94c4:	defff704 	addi	sp,sp,-36
    94c8:	dfc00815 	stw	ra,32(sp)
    94cc:	df000715 	stw	fp,28(sp)
    94d0:	df000704 	addi	fp,sp,28
    94d4:	e13ffb15 	stw	r4,-20(fp)
    94d8:	e17ffc15 	stw	r5,-16(fp)
    94dc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    94e0:	e0bffb17 	ldw	r2,-20(fp)
    94e4:	1004803a 	cmplt	r2,r2,zero
    94e8:	1000091e 	bne	r2,zero,9510 <write+0x4c>
    94ec:	e13ffb17 	ldw	r4,-20(fp)
    94f0:	01400304 	movi	r5,12
    94f4:	00090680 	call	9068 <__mulsi3>
    94f8:	1007883a 	mov	r3,r2
    94fc:	00800074 	movhi	r2,1
    9500:	10ab2004 	addi	r2,r2,-21376
    9504:	1887883a 	add	r3,r3,r2
    9508:	e0ffff15 	stw	r3,-4(fp)
    950c:	00000106 	br	9514 <write+0x50>
    9510:	e03fff15 	stw	zero,-4(fp)
    9514:	e0bfff17 	ldw	r2,-4(fp)
    9518:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    951c:	e0bffa17 	ldw	r2,-24(fp)
    9520:	1005003a 	cmpeq	r2,r2,zero
    9524:	1000241e 	bne	r2,zero,95b8 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9528:	e0bffa17 	ldw	r2,-24(fp)
    952c:	10800217 	ldw	r2,8(r2)
    9530:	108000cc 	andi	r2,r2,3
    9534:	1005003a 	cmpeq	r2,r2,zero
    9538:	10001a1e 	bne	r2,zero,95a4 <write+0xe0>
    953c:	e0bffa17 	ldw	r2,-24(fp)
    9540:	10800017 	ldw	r2,0(r2)
    9544:	10800617 	ldw	r2,24(r2)
    9548:	1005003a 	cmpeq	r2,r2,zero
    954c:	1000151e 	bne	r2,zero,95a4 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9550:	e0bffa17 	ldw	r2,-24(fp)
    9554:	10800017 	ldw	r2,0(r2)
    9558:	10800617 	ldw	r2,24(r2)
    955c:	e17ffc17 	ldw	r5,-16(fp)
    9560:	e1bffd17 	ldw	r6,-12(fp)
    9564:	e13ffa17 	ldw	r4,-24(fp)
    9568:	103ee83a 	callr	r2
    956c:	e0bff915 	stw	r2,-28(fp)
    9570:	e0bff917 	ldw	r2,-28(fp)
    9574:	1004403a 	cmpge	r2,r2,zero
    9578:	1000071e 	bne	r2,zero,9598 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    957c:	00095e80 	call	95e8 <alt_get_errno>
    9580:	e0fff917 	ldw	r3,-28(fp)
    9584:	00c7c83a 	sub	r3,zero,r3
    9588:	10c00015 	stw	r3,0(r2)
        return -1;
    958c:	00bfffc4 	movi	r2,-1
    9590:	e0bffe15 	stw	r2,-8(fp)
    9594:	00000e06 	br	95d0 <write+0x10c>
      }
      return rval;
    9598:	e0bff917 	ldw	r2,-28(fp)
    959c:	e0bffe15 	stw	r2,-8(fp)
    95a0:	00000b06 	br	95d0 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    95a4:	00095e80 	call	95e8 <alt_get_errno>
    95a8:	1007883a 	mov	r3,r2
    95ac:	00800344 	movi	r2,13
    95b0:	18800015 	stw	r2,0(r3)
    95b4:	00000406 	br	95c8 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    95b8:	00095e80 	call	95e8 <alt_get_errno>
    95bc:	1007883a 	mov	r3,r2
    95c0:	00801444 	movi	r2,81
    95c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    95c8:	00bfffc4 	movi	r2,-1
    95cc:	e0bffe15 	stw	r2,-8(fp)
    95d0:	e0bffe17 	ldw	r2,-8(fp)
}
    95d4:	e037883a 	mov	sp,fp
    95d8:	dfc00117 	ldw	ra,4(sp)
    95dc:	df000017 	ldw	fp,0(sp)
    95e0:	dec00204 	addi	sp,sp,8
    95e4:	f800283a 	ret

000095e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    95e8:	defffd04 	addi	sp,sp,-12
    95ec:	dfc00215 	stw	ra,8(sp)
    95f0:	df000115 	stw	fp,4(sp)
    95f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    95f8:	00800074 	movhi	r2,1
    95fc:	10ab8a04 	addi	r2,r2,-20952
    9600:	10800017 	ldw	r2,0(r2)
    9604:	1005003a 	cmpeq	r2,r2,zero
    9608:	1000061e 	bne	r2,zero,9624 <alt_get_errno+0x3c>
    960c:	00800074 	movhi	r2,1
    9610:	10ab8a04 	addi	r2,r2,-20952
    9614:	10800017 	ldw	r2,0(r2)
    9618:	103ee83a 	callr	r2
    961c:	e0bfff15 	stw	r2,-4(fp)
    9620:	00000306 	br	9630 <alt_get_errno+0x48>
    9624:	00800074 	movhi	r2,1
    9628:	10ac4904 	addi	r2,r2,-20188
    962c:	e0bfff15 	stw	r2,-4(fp)
    9630:	e0bfff17 	ldw	r2,-4(fp)
}
    9634:	e037883a 	mov	sp,fp
    9638:	dfc00117 	ldw	ra,4(sp)
    963c:	df000017 	ldw	fp,0(sp)
    9640:	dec00204 	addi	sp,sp,8
    9644:	f800283a 	ret

00009648 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9648:	defffd04 	addi	sp,sp,-12
    964c:	dfc00215 	stw	ra,8(sp)
    9650:	df000115 	stw	fp,4(sp)
    9654:	df000104 	addi	fp,sp,4
    9658:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    965c:	000a4440 	call	a444 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9660:	00800044 	movi	r2,1
    9664:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9668:	e037883a 	mov	sp,fp
    966c:	dfc00117 	ldw	ra,4(sp)
    9670:	df000017 	ldw	fp,0(sp)
    9674:	dec00204 	addi	sp,sp,8
    9678:	f800283a 	ret

0000967c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    967c:	defffe04 	addi	sp,sp,-8
    9680:	dfc00115 	stw	ra,4(sp)
    9684:	df000015 	stw	fp,0(sp)
    9688:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    968c:	01000074 	movhi	r4,1
    9690:	21040804 	addi	r4,r4,4128
    9694:	000b883a 	mov	r5,zero
    9698:	01800044 	movi	r6,1
    969c:	01c0fa04 	movi	r7,1000
    96a0:	00099c40 	call	99c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    96a4:	01000074 	movhi	r4,1
    96a8:	212b0b04 	addi	r4,r4,-21460
    96ac:	00096c40 	call	96c4 <alt_dev_reg>
}
    96b0:	e037883a 	mov	sp,fp
    96b4:	dfc00117 	ldw	ra,4(sp)
    96b8:	df000017 	ldw	fp,0(sp)
    96bc:	dec00204 	addi	sp,sp,8
    96c0:	f800283a 	ret

000096c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    96c4:	defffd04 	addi	sp,sp,-12
    96c8:	dfc00215 	stw	ra,8(sp)
    96cc:	df000115 	stw	fp,4(sp)
    96d0:	df000104 	addi	fp,sp,4
    96d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    96d8:	e13fff17 	ldw	r4,-4(fp)
    96dc:	01400074 	movhi	r5,1
    96e0:	296b8704 	addi	r5,r5,-20964
    96e4:	0009bfc0 	call	9bfc <alt_dev_llist_insert>
}
    96e8:	e037883a 	mov	sp,fp
    96ec:	dfc00117 	ldw	ra,4(sp)
    96f0:	df000017 	ldw	fp,0(sp)
    96f4:	dec00204 	addi	sp,sp,8
    96f8:	f800283a 	ret

000096fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    96fc:	defffa04 	addi	sp,sp,-24
    9700:	dfc00515 	stw	ra,20(sp)
    9704:	df000415 	stw	fp,16(sp)
    9708:	df000404 	addi	fp,sp,16
    970c:	e13ffd15 	stw	r4,-12(fp)
    9710:	e17ffe15 	stw	r5,-8(fp)
    9714:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9718:	e0bffd17 	ldw	r2,-12(fp)
    971c:	10800017 	ldw	r2,0(r2)
    9720:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9724:	e0bffc17 	ldw	r2,-16(fp)
    9728:	11000a04 	addi	r4,r2,40
    972c:	e0bffd17 	ldw	r2,-12(fp)
    9730:	11c00217 	ldw	r7,8(r2)
    9734:	e17ffe17 	ldw	r5,-8(fp)
    9738:	e1bfff17 	ldw	r6,-4(fp)
    973c:	00097ac0 	call	97ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9740:	e037883a 	mov	sp,fp
    9744:	dfc00117 	ldw	ra,4(sp)
    9748:	df000017 	ldw	fp,0(sp)
    974c:	dec00204 	addi	sp,sp,8
    9750:	f800283a 	ret

00009754 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9754:	defffa04 	addi	sp,sp,-24
    9758:	dfc00515 	stw	ra,20(sp)
    975c:	df000415 	stw	fp,16(sp)
    9760:	df000404 	addi	fp,sp,16
    9764:	e13ffd15 	stw	r4,-12(fp)
    9768:	e17ffe15 	stw	r5,-8(fp)
    976c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9770:	e0bffd17 	ldw	r2,-12(fp)
    9774:	10800017 	ldw	r2,0(r2)
    9778:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    977c:	e0bffc17 	ldw	r2,-16(fp)
    9780:	11000a04 	addi	r4,r2,40
    9784:	e0bffd17 	ldw	r2,-12(fp)
    9788:	11c00217 	ldw	r7,8(r2)
    978c:	e17ffe17 	ldw	r5,-8(fp)
    9790:	e1bfff17 	ldw	r6,-4(fp)
    9794:	00098b00 	call	98b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9798:	e037883a 	mov	sp,fp
    979c:	dfc00117 	ldw	ra,4(sp)
    97a0:	df000017 	ldw	fp,0(sp)
    97a4:	dec00204 	addi	sp,sp,8
    97a8:	f800283a 	ret

000097ac <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    97ac:	defff604 	addi	sp,sp,-40
    97b0:	df000915 	stw	fp,36(sp)
    97b4:	df000904 	addi	fp,sp,36
    97b8:	e13ffb15 	stw	r4,-20(fp)
    97bc:	e17ffc15 	stw	r5,-16(fp)
    97c0:	e1bffd15 	stw	r6,-12(fp)
    97c4:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    97c8:	e0bffb17 	ldw	r2,-20(fp)
    97cc:	10800017 	ldw	r2,0(r2)
    97d0:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    97d4:	e0bffc17 	ldw	r2,-16(fp)
    97d8:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    97dc:	e0bffd17 	ldw	r2,-12(fp)
    97e0:	1007883a 	mov	r3,r2
    97e4:	e0bffc17 	ldw	r2,-16(fp)
    97e8:	10c5883a 	add	r2,r2,r3
    97ec:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    97f0:	00001606 	br	984c <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    97f4:	e0bffa17 	ldw	r2,-24(fp)
    97f8:	10800037 	ldwio	r2,0(r2)
    97fc:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9800:	e0bff717 	ldw	r2,-36(fp)
    9804:	10a0000c 	andi	r2,r2,32768
    9808:	1005003a 	cmpeq	r2,r2,zero
    980c:	1000081e 	bne	r2,zero,9830 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9810:	e0bff717 	ldw	r2,-36(fp)
    9814:	1007883a 	mov	r3,r2
    9818:	e0bff917 	ldw	r2,-28(fp)
    981c:	10c00005 	stb	r3,0(r2)
    9820:	e0bff917 	ldw	r2,-28(fp)
    9824:	10800044 	addi	r2,r2,1
    9828:	e0bff915 	stw	r2,-28(fp)
    982c:	00000706 	br	984c <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    9830:	e0fff917 	ldw	r3,-28(fp)
    9834:	e0bffc17 	ldw	r2,-16(fp)
    9838:	1880071e 	bne	r3,r2,9858 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    983c:	e0bffe17 	ldw	r2,-8(fp)
    9840:	1090000c 	andi	r2,r2,16384
    9844:	1004c03a 	cmpne	r2,r2,zero
    9848:	1000031e 	bne	r2,zero,9858 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    984c:	e0fff917 	ldw	r3,-28(fp)
    9850:	e0bff817 	ldw	r2,-32(fp)
    9854:	18bfe736 	bltu	r3,r2,97f4 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    9858:	e0fff917 	ldw	r3,-28(fp)
    985c:	e0bffc17 	ldw	r2,-16(fp)
    9860:	18800526 	beq	r3,r2,9878 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    9864:	e0fff917 	ldw	r3,-28(fp)
    9868:	e0bffc17 	ldw	r2,-16(fp)
    986c:	1887c83a 	sub	r3,r3,r2
    9870:	e0ffff15 	stw	r3,-4(fp)
    9874:	00000906 	br	989c <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    9878:	e0bffe17 	ldw	r2,-8(fp)
    987c:	1090000c 	andi	r2,r2,16384
    9880:	1005003a 	cmpeq	r2,r2,zero
    9884:	1000031e 	bne	r2,zero,9894 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    9888:	00bffd44 	movi	r2,-11
    988c:	e0bfff15 	stw	r2,-4(fp)
    9890:	00000206 	br	989c <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    9894:	00bffec4 	movi	r2,-5
    9898:	e0bfff15 	stw	r2,-4(fp)
    989c:	e0bfff17 	ldw	r2,-4(fp)
}
    98a0:	e037883a 	mov	sp,fp
    98a4:	df000017 	ldw	fp,0(sp)
    98a8:	dec00104 	addi	sp,sp,4
    98ac:	f800283a 	ret

000098b0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    98b0:	defff904 	addi	sp,sp,-28
    98b4:	df000615 	stw	fp,24(sp)
    98b8:	df000604 	addi	fp,sp,24
    98bc:	e13ffc15 	stw	r4,-16(fp)
    98c0:	e17ffd15 	stw	r5,-12(fp)
    98c4:	e1bffe15 	stw	r6,-8(fp)
    98c8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    98cc:	e0bffc17 	ldw	r2,-16(fp)
    98d0:	10800017 	ldw	r2,0(r2)
    98d4:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    98d8:	e0bffe17 	ldw	r2,-8(fp)
    98dc:	1007883a 	mov	r3,r2
    98e0:	e0bffd17 	ldw	r2,-12(fp)
    98e4:	10c5883a 	add	r2,r2,r3
    98e8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    98ec:	00001106 	br	9934 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    98f0:	e0bffb17 	ldw	r2,-20(fp)
    98f4:	10800104 	addi	r2,r2,4
    98f8:	10800037 	ldwio	r2,0(r2)
    98fc:	10bfffec 	andhi	r2,r2,65535
    9900:	1005003a 	cmpeq	r2,r2,zero
    9904:	10000b1e 	bne	r2,zero,9934 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9908:	e13ffb17 	ldw	r4,-20(fp)
    990c:	e0bffd17 	ldw	r2,-12(fp)
    9910:	10800003 	ldbu	r2,0(r2)
    9914:	10c03fcc 	andi	r3,r2,255
    9918:	18c0201c 	xori	r3,r3,128
    991c:	18ffe004 	addi	r3,r3,-128
    9920:	e0bffd17 	ldw	r2,-12(fp)
    9924:	10800044 	addi	r2,r2,1
    9928:	e0bffd15 	stw	r2,-12(fp)
    992c:	2005883a 	mov	r2,r4
    9930:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9934:	e0fffd17 	ldw	r3,-12(fp)
    9938:	e0bffa17 	ldw	r2,-24(fp)
    993c:	18bfec36 	bltu	r3,r2,98f0 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9940:	e0bffe17 	ldw	r2,-8(fp)
}
    9944:	e037883a 	mov	sp,fp
    9948:	df000017 	ldw	fp,0(sp)
    994c:	dec00104 	addi	sp,sp,4
    9950:	f800283a 	ret

00009954 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9954:	defffa04 	addi	sp,sp,-24
    9958:	dfc00515 	stw	ra,20(sp)
    995c:	df000415 	stw	fp,16(sp)
    9960:	df000404 	addi	fp,sp,16
    9964:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9968:	e0bfff17 	ldw	r2,-4(fp)
    996c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9970:	e0bfff17 	ldw	r2,-4(fp)
    9974:	10800104 	addi	r2,r2,4
    9978:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    997c:	0005303a 	rdctl	r2,status
    9980:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9984:	e0fffd17 	ldw	r3,-12(fp)
    9988:	00bfff84 	movi	r2,-2
    998c:	1884703a 	and	r2,r3,r2
    9990:	1001703a 	wrctl	status,r2
  
  return context;
    9994:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9998:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    999c:	000a3380 	call	a338 <alt_tick>
    99a0:	e0bffe17 	ldw	r2,-8(fp)
    99a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    99a8:	e0bffc17 	ldw	r2,-16(fp)
    99ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    99b0:	e037883a 	mov	sp,fp
    99b4:	dfc00117 	ldw	ra,4(sp)
    99b8:	df000017 	ldw	fp,0(sp)
    99bc:	dec00204 	addi	sp,sp,8
    99c0:	f800283a 	ret

000099c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    99c4:	defff804 	addi	sp,sp,-32
    99c8:	dfc00715 	stw	ra,28(sp)
    99cc:	df000615 	stw	fp,24(sp)
    99d0:	df000604 	addi	fp,sp,24
    99d4:	e13ffc15 	stw	r4,-16(fp)
    99d8:	e17ffd15 	stw	r5,-12(fp)
    99dc:	e1bffe15 	stw	r6,-8(fp)
    99e0:	e1ffff15 	stw	r7,-4(fp)
    99e4:	e0bfff17 	ldw	r2,-4(fp)
    99e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    99ec:	00800074 	movhi	r2,1
    99f0:	10ac4e04 	addi	r2,r2,-20168
    99f4:	10800017 	ldw	r2,0(r2)
    99f8:	1004c03a 	cmpne	r2,r2,zero
    99fc:	1000041e 	bne	r2,zero,9a10 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    9a00:	00c00074 	movhi	r3,1
    9a04:	18ec4e04 	addi	r3,r3,-20168
    9a08:	e0bffb17 	ldw	r2,-20(fp)
    9a0c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9a10:	e0bffc17 	ldw	r2,-16(fp)
    9a14:	10800104 	addi	r2,r2,4
    9a18:	1007883a 	mov	r3,r2
    9a1c:	008001c4 	movi	r2,7
    9a20:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9a24:	d8000015 	stw	zero,0(sp)
    9a28:	e13ffd17 	ldw	r4,-12(fp)
    9a2c:	e17ffe17 	ldw	r5,-8(fp)
    9a30:	01800074 	movhi	r6,1
    9a34:	31a65504 	addi	r6,r6,-26284
    9a38:	e1fffc17 	ldw	r7,-16(fp)
    9a3c:	00090a00 	call	90a0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9a40:	e037883a 	mov	sp,fp
    9a44:	dfc00117 	ldw	ra,4(sp)
    9a48:	df000017 	ldw	fp,0(sp)
    9a4c:	dec00204 	addi	sp,sp,8
    9a50:	f800283a 	ret

00009a54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9a54:	defff804 	addi	sp,sp,-32
    9a58:	dfc00715 	stw	ra,28(sp)
    9a5c:	df000615 	stw	fp,24(sp)
    9a60:	df000604 	addi	fp,sp,24
    9a64:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9a68:	e0bffc17 	ldw	r2,-16(fp)
    9a6c:	1004803a 	cmplt	r2,r2,zero
    9a70:	1000091e 	bne	r2,zero,9a98 <close+0x44>
    9a74:	e13ffc17 	ldw	r4,-16(fp)
    9a78:	01400304 	movi	r5,12
    9a7c:	00090680 	call	9068 <__mulsi3>
    9a80:	1007883a 	mov	r3,r2
    9a84:	00800074 	movhi	r2,1
    9a88:	10ab2004 	addi	r2,r2,-21376
    9a8c:	1887883a 	add	r3,r3,r2
    9a90:	e0ffff15 	stw	r3,-4(fp)
    9a94:	00000106 	br	9a9c <close+0x48>
    9a98:	e03fff15 	stw	zero,-4(fp)
    9a9c:	e0bfff17 	ldw	r2,-4(fp)
    9aa0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9aa4:	e0bffb17 	ldw	r2,-20(fp)
    9aa8:	1005003a 	cmpeq	r2,r2,zero
    9aac:	10001d1e 	bne	r2,zero,9b24 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9ab0:	e0bffb17 	ldw	r2,-20(fp)
    9ab4:	10800017 	ldw	r2,0(r2)
    9ab8:	10800417 	ldw	r2,16(r2)
    9abc:	1005003a 	cmpeq	r2,r2,zero
    9ac0:	1000071e 	bne	r2,zero,9ae0 <close+0x8c>
    9ac4:	e0bffb17 	ldw	r2,-20(fp)
    9ac8:	10800017 	ldw	r2,0(r2)
    9acc:	10800417 	ldw	r2,16(r2)
    9ad0:	e13ffb17 	ldw	r4,-20(fp)
    9ad4:	103ee83a 	callr	r2
    9ad8:	e0bffe15 	stw	r2,-8(fp)
    9adc:	00000106 	br	9ae4 <close+0x90>
    9ae0:	e03ffe15 	stw	zero,-8(fp)
    9ae4:	e0bffe17 	ldw	r2,-8(fp)
    9ae8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9aec:	e13ffc17 	ldw	r4,-16(fp)
    9af0:	000a2280 	call	a228 <alt_release_fd>
    if (rval < 0)
    9af4:	e0bffa17 	ldw	r2,-24(fp)
    9af8:	1004403a 	cmpge	r2,r2,zero
    9afc:	1000071e 	bne	r2,zero,9b1c <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9b00:	0009b540 	call	9b54 <alt_get_errno>
    9b04:	e0fffa17 	ldw	r3,-24(fp)
    9b08:	00c7c83a 	sub	r3,zero,r3
    9b0c:	10c00015 	stw	r3,0(r2)
      return -1;
    9b10:	00bfffc4 	movi	r2,-1
    9b14:	e0bffd15 	stw	r2,-12(fp)
    9b18:	00000806 	br	9b3c <close+0xe8>
    }
    return 0;
    9b1c:	e03ffd15 	stw	zero,-12(fp)
    9b20:	00000606 	br	9b3c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9b24:	0009b540 	call	9b54 <alt_get_errno>
    9b28:	1007883a 	mov	r3,r2
    9b2c:	00801444 	movi	r2,81
    9b30:	18800015 	stw	r2,0(r3)
    return -1;
    9b34:	00bfffc4 	movi	r2,-1
    9b38:	e0bffd15 	stw	r2,-12(fp)
    9b3c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9b40:	e037883a 	mov	sp,fp
    9b44:	dfc00117 	ldw	ra,4(sp)
    9b48:	df000017 	ldw	fp,0(sp)
    9b4c:	dec00204 	addi	sp,sp,8
    9b50:	f800283a 	ret

00009b54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9b54:	defffd04 	addi	sp,sp,-12
    9b58:	dfc00215 	stw	ra,8(sp)
    9b5c:	df000115 	stw	fp,4(sp)
    9b60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9b64:	00800074 	movhi	r2,1
    9b68:	10ab8a04 	addi	r2,r2,-20952
    9b6c:	10800017 	ldw	r2,0(r2)
    9b70:	1005003a 	cmpeq	r2,r2,zero
    9b74:	1000061e 	bne	r2,zero,9b90 <alt_get_errno+0x3c>
    9b78:	00800074 	movhi	r2,1
    9b7c:	10ab8a04 	addi	r2,r2,-20952
    9b80:	10800017 	ldw	r2,0(r2)
    9b84:	103ee83a 	callr	r2
    9b88:	e0bfff15 	stw	r2,-4(fp)
    9b8c:	00000306 	br	9b9c <alt_get_errno+0x48>
    9b90:	00800074 	movhi	r2,1
    9b94:	10ac4904 	addi	r2,r2,-20188
    9b98:	e0bfff15 	stw	r2,-4(fp)
    9b9c:	e0bfff17 	ldw	r2,-4(fp)
}
    9ba0:	e037883a 	mov	sp,fp
    9ba4:	dfc00117 	ldw	ra,4(sp)
    9ba8:	df000017 	ldw	fp,0(sp)
    9bac:	dec00204 	addi	sp,sp,8
    9bb0:	f800283a 	ret

00009bb4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9bb4:	deffff04 	addi	sp,sp,-4
    9bb8:	df000015 	stw	fp,0(sp)
    9bbc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9bc0:	e037883a 	mov	sp,fp
    9bc4:	df000017 	ldw	fp,0(sp)
    9bc8:	dec00104 	addi	sp,sp,4
    9bcc:	f800283a 	ret

00009bd0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9bd0:	defffc04 	addi	sp,sp,-16
    9bd4:	df000315 	stw	fp,12(sp)
    9bd8:	df000304 	addi	fp,sp,12
    9bdc:	e13ffd15 	stw	r4,-12(fp)
    9be0:	e17ffe15 	stw	r5,-8(fp)
    9be4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9be8:	e0bfff17 	ldw	r2,-4(fp)
}
    9bec:	e037883a 	mov	sp,fp
    9bf0:	df000017 	ldw	fp,0(sp)
    9bf4:	dec00104 	addi	sp,sp,4
    9bf8:	f800283a 	ret

00009bfc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9bfc:	defff904 	addi	sp,sp,-28
    9c00:	dfc00615 	stw	ra,24(sp)
    9c04:	df000515 	stw	fp,20(sp)
    9c08:	df000504 	addi	fp,sp,20
    9c0c:	e13ffd15 	stw	r4,-12(fp)
    9c10:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9c14:	e0bffd17 	ldw	r2,-12(fp)
    9c18:	1005003a 	cmpeq	r2,r2,zero
    9c1c:	1000041e 	bne	r2,zero,9c30 <alt_dev_llist_insert+0x34>
    9c20:	e0bffd17 	ldw	r2,-12(fp)
    9c24:	10800217 	ldw	r2,8(r2)
    9c28:	1004c03a 	cmpne	r2,r2,zero
    9c2c:	1000071e 	bne	r2,zero,9c4c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    9c30:	0009cb00 	call	9cb0 <alt_get_errno>
    9c34:	1007883a 	mov	r3,r2
    9c38:	00800584 	movi	r2,22
    9c3c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9c40:	00bffa84 	movi	r2,-22
    9c44:	e0bfff15 	stw	r2,-4(fp)
    9c48:	00001306 	br	9c98 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9c4c:	e0fffd17 	ldw	r3,-12(fp)
    9c50:	e0bffe17 	ldw	r2,-8(fp)
    9c54:	e0bffb15 	stw	r2,-20(fp)
    9c58:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9c5c:	e0fffc17 	ldw	r3,-16(fp)
    9c60:	e0bffb17 	ldw	r2,-20(fp)
    9c64:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    9c68:	e0bffb17 	ldw	r2,-20(fp)
    9c6c:	10c00017 	ldw	r3,0(r2)
    9c70:	e0bffc17 	ldw	r2,-16(fp)
    9c74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9c78:	e0bffb17 	ldw	r2,-20(fp)
    9c7c:	10c00017 	ldw	r3,0(r2)
    9c80:	e0bffc17 	ldw	r2,-16(fp)
    9c84:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    9c88:	e0fffb17 	ldw	r3,-20(fp)
    9c8c:	e0bffc17 	ldw	r2,-16(fp)
    9c90:	18800015 	stw	r2,0(r3)

  return 0;  
    9c94:	e03fff15 	stw	zero,-4(fp)
    9c98:	e0bfff17 	ldw	r2,-4(fp)
}
    9c9c:	e037883a 	mov	sp,fp
    9ca0:	dfc00117 	ldw	ra,4(sp)
    9ca4:	df000017 	ldw	fp,0(sp)
    9ca8:	dec00204 	addi	sp,sp,8
    9cac:	f800283a 	ret

00009cb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9cb0:	defffd04 	addi	sp,sp,-12
    9cb4:	dfc00215 	stw	ra,8(sp)
    9cb8:	df000115 	stw	fp,4(sp)
    9cbc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9cc0:	00800074 	movhi	r2,1
    9cc4:	10ab8a04 	addi	r2,r2,-20952
    9cc8:	10800017 	ldw	r2,0(r2)
    9ccc:	1005003a 	cmpeq	r2,r2,zero
    9cd0:	1000061e 	bne	r2,zero,9cec <alt_get_errno+0x3c>
    9cd4:	00800074 	movhi	r2,1
    9cd8:	10ab8a04 	addi	r2,r2,-20952
    9cdc:	10800017 	ldw	r2,0(r2)
    9ce0:	103ee83a 	callr	r2
    9ce4:	e0bfff15 	stw	r2,-4(fp)
    9ce8:	00000306 	br	9cf8 <alt_get_errno+0x48>
    9cec:	00800074 	movhi	r2,1
    9cf0:	10ac4904 	addi	r2,r2,-20188
    9cf4:	e0bfff15 	stw	r2,-4(fp)
    9cf8:	e0bfff17 	ldw	r2,-4(fp)
}
    9cfc:	e037883a 	mov	sp,fp
    9d00:	dfc00117 	ldw	ra,4(sp)
    9d04:	df000017 	ldw	fp,0(sp)
    9d08:	dec00204 	addi	sp,sp,8
    9d0c:	f800283a 	ret

00009d10 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9d10:	defffd04 	addi	sp,sp,-12
    9d14:	dfc00215 	stw	ra,8(sp)
    9d18:	df000115 	stw	fp,4(sp)
    9d1c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9d20:	00bfff04 	movi	r2,-4
    9d24:	00c00074 	movhi	r3,1
    9d28:	18eaba04 	addi	r3,r3,-21784
    9d2c:	1885883a 	add	r2,r3,r2
    9d30:	e0bfff15 	stw	r2,-4(fp)
    9d34:	00000606 	br	9d50 <_do_ctors+0x40>
        (*ctor) (); 
    9d38:	e0bfff17 	ldw	r2,-4(fp)
    9d3c:	10800017 	ldw	r2,0(r2)
    9d40:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9d44:	e0bfff17 	ldw	r2,-4(fp)
    9d48:	10bfff04 	addi	r2,r2,-4
    9d4c:	e0bfff15 	stw	r2,-4(fp)
    9d50:	e0ffff17 	ldw	r3,-4(fp)
    9d54:	00800074 	movhi	r2,1
    9d58:	10aab904 	addi	r2,r2,-21788
    9d5c:	18bff62e 	bgeu	r3,r2,9d38 <_do_ctors+0x28>
        (*ctor) (); 
}
    9d60:	e037883a 	mov	sp,fp
    9d64:	dfc00117 	ldw	ra,4(sp)
    9d68:	df000017 	ldw	fp,0(sp)
    9d6c:	dec00204 	addi	sp,sp,8
    9d70:	f800283a 	ret

00009d74 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9d74:	defffd04 	addi	sp,sp,-12
    9d78:	dfc00215 	stw	ra,8(sp)
    9d7c:	df000115 	stw	fp,4(sp)
    9d80:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9d84:	00bfff04 	movi	r2,-4
    9d88:	00c00074 	movhi	r3,1
    9d8c:	18eaba04 	addi	r3,r3,-21784
    9d90:	1885883a 	add	r2,r3,r2
    9d94:	e0bfff15 	stw	r2,-4(fp)
    9d98:	00000606 	br	9db4 <_do_dtors+0x40>
        (*dtor) (); 
    9d9c:	e0bfff17 	ldw	r2,-4(fp)
    9da0:	10800017 	ldw	r2,0(r2)
    9da4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9da8:	e0bfff17 	ldw	r2,-4(fp)
    9dac:	10bfff04 	addi	r2,r2,-4
    9db0:	e0bfff15 	stw	r2,-4(fp)
    9db4:	e0ffff17 	ldw	r3,-4(fp)
    9db8:	00800074 	movhi	r2,1
    9dbc:	10aaba04 	addi	r2,r2,-21784
    9dc0:	18bff62e 	bgeu	r3,r2,9d9c <_do_dtors+0x28>
        (*dtor) (); 
}
    9dc4:	e037883a 	mov	sp,fp
    9dc8:	dfc00117 	ldw	ra,4(sp)
    9dcc:	df000017 	ldw	fp,0(sp)
    9dd0:	dec00204 	addi	sp,sp,8
    9dd4:	f800283a 	ret

00009dd8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9dd8:	deffff04 	addi	sp,sp,-4
    9ddc:	df000015 	stw	fp,0(sp)
    9de0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9de4:	e037883a 	mov	sp,fp
    9de8:	df000017 	ldw	fp,0(sp)
    9dec:	dec00104 	addi	sp,sp,4
    9df0:	f800283a 	ret

00009df4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9df4:	defff804 	addi	sp,sp,-32
    9df8:	dfc00715 	stw	ra,28(sp)
    9dfc:	df000615 	stw	fp,24(sp)
    9e00:	dc000515 	stw	r16,20(sp)
    9e04:	df000504 	addi	fp,sp,20
    9e08:	e13ffc15 	stw	r4,-16(fp)
    9e0c:	e17ffd15 	stw	r5,-12(fp)
    9e10:	e1bffe15 	stw	r6,-8(fp)
    9e14:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9e18:	e13ffd17 	ldw	r4,-12(fp)
    9e1c:	e17ffe17 	ldw	r5,-8(fp)
    9e20:	e1bfff17 	ldw	r6,-4(fp)
    9e24:	000a03c0 	call	a03c <open>
    9e28:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9e2c:	e0bffb17 	ldw	r2,-20(fp)
    9e30:	1004803a 	cmplt	r2,r2,zero
    9e34:	10001f1e 	bne	r2,zero,9eb4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    9e38:	e13ffb17 	ldw	r4,-20(fp)
    9e3c:	04000074 	movhi	r16,1
    9e40:	842b2004 	addi	r16,r16,-21376
    9e44:	01400304 	movi	r5,12
    9e48:	00090680 	call	9068 <__mulsi3>
    9e4c:	1405883a 	add	r2,r2,r16
    9e50:	10c00017 	ldw	r3,0(r2)
    9e54:	e0bffc17 	ldw	r2,-16(fp)
    9e58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9e5c:	e13ffb17 	ldw	r4,-20(fp)
    9e60:	04000074 	movhi	r16,1
    9e64:	842b2004 	addi	r16,r16,-21376
    9e68:	01400304 	movi	r5,12
    9e6c:	00090680 	call	9068 <__mulsi3>
    9e70:	1405883a 	add	r2,r2,r16
    9e74:	10800104 	addi	r2,r2,4
    9e78:	10c00017 	ldw	r3,0(r2)
    9e7c:	e0bffc17 	ldw	r2,-16(fp)
    9e80:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9e84:	e13ffb17 	ldw	r4,-20(fp)
    9e88:	04000074 	movhi	r16,1
    9e8c:	842b2004 	addi	r16,r16,-21376
    9e90:	01400304 	movi	r5,12
    9e94:	00090680 	call	9068 <__mulsi3>
    9e98:	1405883a 	add	r2,r2,r16
    9e9c:	10800204 	addi	r2,r2,8
    9ea0:	10c00017 	ldw	r3,0(r2)
    9ea4:	e0bffc17 	ldw	r2,-16(fp)
    9ea8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9eac:	e13ffb17 	ldw	r4,-20(fp)
    9eb0:	000a2280 	call	a228 <alt_release_fd>
  }
} 
    9eb4:	e037883a 	mov	sp,fp
    9eb8:	dfc00217 	ldw	ra,8(sp)
    9ebc:	df000117 	ldw	fp,4(sp)
    9ec0:	dc000017 	ldw	r16,0(sp)
    9ec4:	dec00304 	addi	sp,sp,12
    9ec8:	f800283a 	ret

00009ecc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9ecc:	defffb04 	addi	sp,sp,-20
    9ed0:	dfc00415 	stw	ra,16(sp)
    9ed4:	df000315 	stw	fp,12(sp)
    9ed8:	df000304 	addi	fp,sp,12
    9edc:	e13ffd15 	stw	r4,-12(fp)
    9ee0:	e17ffe15 	stw	r5,-8(fp)
    9ee4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9ee8:	01000074 	movhi	r4,1
    9eec:	212b2304 	addi	r4,r4,-21364
    9ef0:	e17ffd17 	ldw	r5,-12(fp)
    9ef4:	01800044 	movi	r6,1
    9ef8:	01c07fc4 	movi	r7,511
    9efc:	0009df40 	call	9df4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9f00:	01000074 	movhi	r4,1
    9f04:	212b2004 	addi	r4,r4,-21376
    9f08:	e17ffe17 	ldw	r5,-8(fp)
    9f0c:	000d883a 	mov	r6,zero
    9f10:	01c07fc4 	movi	r7,511
    9f14:	0009df40 	call	9df4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9f18:	01000074 	movhi	r4,1
    9f1c:	212b2604 	addi	r4,r4,-21352
    9f20:	e17fff17 	ldw	r5,-4(fp)
    9f24:	01800044 	movi	r6,1
    9f28:	01c07fc4 	movi	r7,511
    9f2c:	0009df40 	call	9df4 <alt_open_fd>
}  
    9f30:	e037883a 	mov	sp,fp
    9f34:	dfc00117 	ldw	ra,4(sp)
    9f38:	df000017 	ldw	fp,0(sp)
    9f3c:	dec00204 	addi	sp,sp,8
    9f40:	f800283a 	ret

00009f44 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9f44:	defffa04 	addi	sp,sp,-24
    9f48:	dfc00515 	stw	ra,20(sp)
    9f4c:	df000415 	stw	fp,16(sp)
    9f50:	dc000315 	stw	r16,12(sp)
    9f54:	df000304 	addi	fp,sp,12
    9f58:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9f5c:	e0bffe17 	ldw	r2,-8(fp)
    9f60:	10800217 	ldw	r2,8(r2)
    9f64:	10d00034 	orhi	r3,r2,16384
    9f68:	e0bffe17 	ldw	r2,-8(fp)
    9f6c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9f70:	e03ffd15 	stw	zero,-12(fp)
    9f74:	00002306 	br	a004 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9f78:	e13ffd17 	ldw	r4,-12(fp)
    9f7c:	04000074 	movhi	r16,1
    9f80:	842b2004 	addi	r16,r16,-21376
    9f84:	01400304 	movi	r5,12
    9f88:	00090680 	call	9068 <__mulsi3>
    9f8c:	1405883a 	add	r2,r2,r16
    9f90:	10c00017 	ldw	r3,0(r2)
    9f94:	e0bffe17 	ldw	r2,-8(fp)
    9f98:	10800017 	ldw	r2,0(r2)
    9f9c:	1880161e 	bne	r3,r2,9ff8 <alt_file_locked+0xb4>
    9fa0:	e13ffd17 	ldw	r4,-12(fp)
    9fa4:	04000074 	movhi	r16,1
    9fa8:	842b2004 	addi	r16,r16,-21376
    9fac:	01400304 	movi	r5,12
    9fb0:	00090680 	call	9068 <__mulsi3>
    9fb4:	1405883a 	add	r2,r2,r16
    9fb8:	10800204 	addi	r2,r2,8
    9fbc:	10800017 	ldw	r2,0(r2)
    9fc0:	1004403a 	cmpge	r2,r2,zero
    9fc4:	10000c1e 	bne	r2,zero,9ff8 <alt_file_locked+0xb4>
    9fc8:	e13ffd17 	ldw	r4,-12(fp)
    9fcc:	01400304 	movi	r5,12
    9fd0:	00090680 	call	9068 <__mulsi3>
    9fd4:	1007883a 	mov	r3,r2
    9fd8:	00800074 	movhi	r2,1
    9fdc:	10ab2004 	addi	r2,r2,-21376
    9fe0:	1887883a 	add	r3,r3,r2
    9fe4:	e0bffe17 	ldw	r2,-8(fp)
    9fe8:	18800326 	beq	r3,r2,9ff8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9fec:	00bffcc4 	movi	r2,-13
    9ff0:	e0bfff15 	stw	r2,-4(fp)
    9ff4:	00000a06 	br	a020 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9ff8:	e0bffd17 	ldw	r2,-12(fp)
    9ffc:	10800044 	addi	r2,r2,1
    a000:	e0bffd15 	stw	r2,-12(fp)
    a004:	00800074 	movhi	r2,1
    a008:	10ab8904 	addi	r2,r2,-20956
    a00c:	10800017 	ldw	r2,0(r2)
    a010:	1007883a 	mov	r3,r2
    a014:	e0bffd17 	ldw	r2,-12(fp)
    a018:	18bfd72e 	bgeu	r3,r2,9f78 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a01c:	e03fff15 	stw	zero,-4(fp)
    a020:	e0bfff17 	ldw	r2,-4(fp)
}
    a024:	e037883a 	mov	sp,fp
    a028:	dfc00217 	ldw	ra,8(sp)
    a02c:	df000117 	ldw	fp,4(sp)
    a030:	dc000017 	ldw	r16,0(sp)
    a034:	dec00304 	addi	sp,sp,12
    a038:	f800283a 	ret

0000a03c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a03c:	defff404 	addi	sp,sp,-48
    a040:	dfc00b15 	stw	ra,44(sp)
    a044:	df000a15 	stw	fp,40(sp)
    a048:	df000a04 	addi	fp,sp,40
    a04c:	e13ffb15 	stw	r4,-20(fp)
    a050:	e17ffc15 	stw	r5,-16(fp)
    a054:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a058:	00bfffc4 	movi	r2,-1
    a05c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    a060:	00bffb44 	movi	r2,-19
    a064:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    a068:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a06c:	e13ffb17 	ldw	r4,-20(fp)
    a070:	01400074 	movhi	r5,1
    a074:	296b8704 	addi	r5,r5,-20964
    a078:	000a4640 	call	a464 <alt_find_dev>
    a07c:	e0bffa15 	stw	r2,-24(fp)
    a080:	e0bffa17 	ldw	r2,-24(fp)
    a084:	1004c03a 	cmpne	r2,r2,zero
    a088:	1000051e 	bne	r2,zero,a0a0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a08c:	e13ffb17 	ldw	r4,-20(fp)
    a090:	000a4f80 	call	a4f8 <alt_find_file>
    a094:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    a098:	00800044 	movi	r2,1
    a09c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a0a0:	e0bffa17 	ldw	r2,-24(fp)
    a0a4:	1005003a 	cmpeq	r2,r2,zero
    a0a8:	1000311e 	bne	r2,zero,a170 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a0ac:	e13ffa17 	ldw	r4,-24(fp)
    a0b0:	000a6180 	call	a618 <alt_get_fd>
    a0b4:	e0bff815 	stw	r2,-32(fp)
    a0b8:	e0bff817 	ldw	r2,-32(fp)
    a0bc:	1004403a 	cmpge	r2,r2,zero
    a0c0:	1000031e 	bne	r2,zero,a0d0 <open+0x94>
    {
      status = index;
    a0c4:	e0bff817 	ldw	r2,-32(fp)
    a0c8:	e0bff715 	stw	r2,-36(fp)
    a0cc:	00002a06 	br	a178 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    a0d0:	e13ff817 	ldw	r4,-32(fp)
    a0d4:	01400304 	movi	r5,12
    a0d8:	00090680 	call	9068 <__mulsi3>
    a0dc:	1007883a 	mov	r3,r2
    a0e0:	00800074 	movhi	r2,1
    a0e4:	10ab2004 	addi	r2,r2,-21376
    a0e8:	1885883a 	add	r2,r3,r2
    a0ec:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a0f0:	e0fffc17 	ldw	r3,-16(fp)
    a0f4:	00900034 	movhi	r2,16384
    a0f8:	10bfffc4 	addi	r2,r2,-1
    a0fc:	1886703a 	and	r3,r3,r2
    a100:	e0bff917 	ldw	r2,-28(fp)
    a104:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a108:	e0bff617 	ldw	r2,-40(fp)
    a10c:	1004c03a 	cmpne	r2,r2,zero
    a110:	1000061e 	bne	r2,zero,a12c <open+0xf0>
    a114:	e13ff917 	ldw	r4,-28(fp)
    a118:	0009f440 	call	9f44 <alt_file_locked>
    a11c:	e0bff715 	stw	r2,-36(fp)
    a120:	e0bff717 	ldw	r2,-36(fp)
    a124:	1004803a 	cmplt	r2,r2,zero
    a128:	1000131e 	bne	r2,zero,a178 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a12c:	e0bffa17 	ldw	r2,-24(fp)
    a130:	10800317 	ldw	r2,12(r2)
    a134:	1005003a 	cmpeq	r2,r2,zero
    a138:	1000091e 	bne	r2,zero,a160 <open+0x124>
    a13c:	e0bffa17 	ldw	r2,-24(fp)
    a140:	10800317 	ldw	r2,12(r2)
    a144:	e13ff917 	ldw	r4,-28(fp)
    a148:	e17ffb17 	ldw	r5,-20(fp)
    a14c:	e1bffc17 	ldw	r6,-16(fp)
    a150:	e1fffd17 	ldw	r7,-12(fp)
    a154:	103ee83a 	callr	r2
    a158:	e0bfff15 	stw	r2,-4(fp)
    a15c:	00000106 	br	a164 <open+0x128>
    a160:	e03fff15 	stw	zero,-4(fp)
    a164:	e0bfff17 	ldw	r2,-4(fp)
    a168:	e0bff715 	stw	r2,-36(fp)
    a16c:	00000206 	br	a178 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a170:	00bffb44 	movi	r2,-19
    a174:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a178:	e0bff717 	ldw	r2,-36(fp)
    a17c:	1004403a 	cmpge	r2,r2,zero
    a180:	1000091e 	bne	r2,zero,a1a8 <open+0x16c>
  {
    alt_release_fd (index);  
    a184:	e13ff817 	ldw	r4,-32(fp)
    a188:	000a2280 	call	a228 <alt_release_fd>
    ALT_ERRNO = -status;
    a18c:	000a1c80 	call	a1c8 <alt_get_errno>
    a190:	e0fff717 	ldw	r3,-36(fp)
    a194:	00c7c83a 	sub	r3,zero,r3
    a198:	10c00015 	stw	r3,0(r2)
    return -1;
    a19c:	00bfffc4 	movi	r2,-1
    a1a0:	e0bffe15 	stw	r2,-8(fp)
    a1a4:	00000206 	br	a1b0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    a1a8:	e0bff817 	ldw	r2,-32(fp)
    a1ac:	e0bffe15 	stw	r2,-8(fp)
    a1b0:	e0bffe17 	ldw	r2,-8(fp)
}
    a1b4:	e037883a 	mov	sp,fp
    a1b8:	dfc00117 	ldw	ra,4(sp)
    a1bc:	df000017 	ldw	fp,0(sp)
    a1c0:	dec00204 	addi	sp,sp,8
    a1c4:	f800283a 	ret

0000a1c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a1c8:	defffd04 	addi	sp,sp,-12
    a1cc:	dfc00215 	stw	ra,8(sp)
    a1d0:	df000115 	stw	fp,4(sp)
    a1d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a1d8:	00800074 	movhi	r2,1
    a1dc:	10ab8a04 	addi	r2,r2,-20952
    a1e0:	10800017 	ldw	r2,0(r2)
    a1e4:	1005003a 	cmpeq	r2,r2,zero
    a1e8:	1000061e 	bne	r2,zero,a204 <alt_get_errno+0x3c>
    a1ec:	00800074 	movhi	r2,1
    a1f0:	10ab8a04 	addi	r2,r2,-20952
    a1f4:	10800017 	ldw	r2,0(r2)
    a1f8:	103ee83a 	callr	r2
    a1fc:	e0bfff15 	stw	r2,-4(fp)
    a200:	00000306 	br	a210 <alt_get_errno+0x48>
    a204:	00800074 	movhi	r2,1
    a208:	10ac4904 	addi	r2,r2,-20188
    a20c:	e0bfff15 	stw	r2,-4(fp)
    a210:	e0bfff17 	ldw	r2,-4(fp)
}
    a214:	e037883a 	mov	sp,fp
    a218:	dfc00117 	ldw	ra,4(sp)
    a21c:	df000017 	ldw	fp,0(sp)
    a220:	dec00204 	addi	sp,sp,8
    a224:	f800283a 	ret

0000a228 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a228:	defffc04 	addi	sp,sp,-16
    a22c:	dfc00315 	stw	ra,12(sp)
    a230:	df000215 	stw	fp,8(sp)
    a234:	dc000115 	stw	r16,4(sp)
    a238:	df000104 	addi	fp,sp,4
    a23c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a240:	e0bfff17 	ldw	r2,-4(fp)
    a244:	108000d0 	cmplti	r2,r2,3
    a248:	10000f1e 	bne	r2,zero,a288 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    a24c:	e13fff17 	ldw	r4,-4(fp)
    a250:	04000074 	movhi	r16,1
    a254:	842b2004 	addi	r16,r16,-21376
    a258:	01400304 	movi	r5,12
    a25c:	00090680 	call	9068 <__mulsi3>
    a260:	1405883a 	add	r2,r2,r16
    a264:	10800204 	addi	r2,r2,8
    a268:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a26c:	e13fff17 	ldw	r4,-4(fp)
    a270:	04000074 	movhi	r16,1
    a274:	842b2004 	addi	r16,r16,-21376
    a278:	01400304 	movi	r5,12
    a27c:	00090680 	call	9068 <__mulsi3>
    a280:	1405883a 	add	r2,r2,r16
    a284:	10000015 	stw	zero,0(r2)
  }
}
    a288:	e037883a 	mov	sp,fp
    a28c:	dfc00217 	ldw	ra,8(sp)
    a290:	df000117 	ldw	fp,4(sp)
    a294:	dc000017 	ldw	r16,0(sp)
    a298:	dec00304 	addi	sp,sp,12
    a29c:	f800283a 	ret

0000a2a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a2a0:	defffa04 	addi	sp,sp,-24
    a2a4:	df000515 	stw	fp,20(sp)
    a2a8:	df000504 	addi	fp,sp,20
    a2ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a2b0:	0005303a 	rdctl	r2,status
    a2b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a2b8:	e0fffd17 	ldw	r3,-12(fp)
    a2bc:	00bfff84 	movi	r2,-2
    a2c0:	1884703a 	and	r2,r3,r2
    a2c4:	1001703a 	wrctl	status,r2
  
  return context;
    a2c8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a2cc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    a2d0:	e0bfff17 	ldw	r2,-4(fp)
    a2d4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a2d8:	e0bffc17 	ldw	r2,-16(fp)
    a2dc:	10c00017 	ldw	r3,0(r2)
    a2e0:	e0bffc17 	ldw	r2,-16(fp)
    a2e4:	10800117 	ldw	r2,4(r2)
    a2e8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    a2ec:	e0bffc17 	ldw	r2,-16(fp)
    a2f0:	10c00117 	ldw	r3,4(r2)
    a2f4:	e0bffc17 	ldw	r2,-16(fp)
    a2f8:	10800017 	ldw	r2,0(r2)
    a2fc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a300:	e0fffc17 	ldw	r3,-16(fp)
    a304:	e0bffc17 	ldw	r2,-16(fp)
    a308:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    a30c:	e0fffc17 	ldw	r3,-16(fp)
    a310:	e0bffc17 	ldw	r2,-16(fp)
    a314:	18800015 	stw	r2,0(r3)
    a318:	e0bffe17 	ldw	r2,-8(fp)
    a31c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a320:	e0bffb17 	ldw	r2,-20(fp)
    a324:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a328:	e037883a 	mov	sp,fp
    a32c:	df000017 	ldw	fp,0(sp)
    a330:	dec00104 	addi	sp,sp,4
    a334:	f800283a 	ret

0000a338 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a338:	defffb04 	addi	sp,sp,-20
    a33c:	dfc00415 	stw	ra,16(sp)
    a340:	df000315 	stw	fp,12(sp)
    a344:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a348:	d0a00b17 	ldw	r2,-32724(gp)
    a34c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a350:	d0a0cf17 	ldw	r2,-31940(gp)
    a354:	10800044 	addi	r2,r2,1
    a358:	d0a0cf15 	stw	r2,-31940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a35c:	00003106 	br	a424 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    a360:	e0bffe17 	ldw	r2,-8(fp)
    a364:	10800017 	ldw	r2,0(r2)
    a368:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a36c:	e0bffe17 	ldw	r2,-8(fp)
    a370:	10800403 	ldbu	r2,16(r2)
    a374:	10803fcc 	andi	r2,r2,255
    a378:	1005003a 	cmpeq	r2,r2,zero
    a37c:	1000051e 	bne	r2,zero,a394 <alt_tick+0x5c>
    a380:	d0a0cf17 	ldw	r2,-31940(gp)
    a384:	1004c03a 	cmpne	r2,r2,zero
    a388:	1000021e 	bne	r2,zero,a394 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    a38c:	e0bffe17 	ldw	r2,-8(fp)
    a390:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a394:	e0bffe17 	ldw	r2,-8(fp)
    a398:	10c00217 	ldw	r3,8(r2)
    a39c:	d0a0cf17 	ldw	r2,-31940(gp)
    a3a0:	10c01e36 	bltu	r2,r3,a41c <alt_tick+0xe4>
    a3a4:	e0bffe17 	ldw	r2,-8(fp)
    a3a8:	10800403 	ldbu	r2,16(r2)
    a3ac:	10803fcc 	andi	r2,r2,255
    a3b0:	1004c03a 	cmpne	r2,r2,zero
    a3b4:	1000191e 	bne	r2,zero,a41c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    a3b8:	e0bffe17 	ldw	r2,-8(fp)
    a3bc:	10c00317 	ldw	r3,12(r2)
    a3c0:	e0bffe17 	ldw	r2,-8(fp)
    a3c4:	11000517 	ldw	r4,20(r2)
    a3c8:	183ee83a 	callr	r3
    a3cc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a3d0:	e0bffd17 	ldw	r2,-12(fp)
    a3d4:	1004c03a 	cmpne	r2,r2,zero
    a3d8:	1000031e 	bne	r2,zero,a3e8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    a3dc:	e13ffe17 	ldw	r4,-8(fp)
    a3e0:	000a2a00 	call	a2a0 <alt_alarm_stop>
    a3e4:	00000d06 	br	a41c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    a3e8:	e0bffe17 	ldw	r2,-8(fp)
    a3ec:	10c00217 	ldw	r3,8(r2)
    a3f0:	e0bffd17 	ldw	r2,-12(fp)
    a3f4:	1887883a 	add	r3,r3,r2
    a3f8:	e0bffe17 	ldw	r2,-8(fp)
    a3fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a400:	e0bffe17 	ldw	r2,-8(fp)
    a404:	10c00217 	ldw	r3,8(r2)
    a408:	d0a0cf17 	ldw	r2,-31940(gp)
    a40c:	1880032e 	bgeu	r3,r2,a41c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    a410:	e0fffe17 	ldw	r3,-8(fp)
    a414:	00800044 	movi	r2,1
    a418:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    a41c:	e0bfff17 	ldw	r2,-4(fp)
    a420:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a424:	d0e00b04 	addi	r3,gp,-32724
    a428:	e0bffe17 	ldw	r2,-8(fp)
    a42c:	10ffcc1e 	bne	r2,r3,a360 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    a430:	e037883a 	mov	sp,fp
    a434:	dfc00117 	ldw	ra,4(sp)
    a438:	df000017 	ldw	fp,0(sp)
    a43c:	dec00204 	addi	sp,sp,8
    a440:	f800283a 	ret

0000a444 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    a444:	deffff04 	addi	sp,sp,-4
    a448:	df000015 	stw	fp,0(sp)
    a44c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a450:	000170fa 	wrctl	ienable,zero
}
    a454:	e037883a 	mov	sp,fp
    a458:	df000017 	ldw	fp,0(sp)
    a45c:	dec00104 	addi	sp,sp,4
    a460:	f800283a 	ret

0000a464 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a464:	defff904 	addi	sp,sp,-28
    a468:	dfc00615 	stw	ra,24(sp)
    a46c:	df000515 	stw	fp,20(sp)
    a470:	df000504 	addi	fp,sp,20
    a474:	e13ffd15 	stw	r4,-12(fp)
    a478:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a47c:	e0bffe17 	ldw	r2,-8(fp)
    a480:	10800017 	ldw	r2,0(r2)
    a484:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a488:	e13ffd17 	ldw	r4,-12(fp)
    a48c:	0008fd00 	call	8fd0 <strlen>
    a490:	10800044 	addi	r2,r2,1
    a494:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a498:	00000d06 	br	a4d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a49c:	e0bffc17 	ldw	r2,-16(fp)
    a4a0:	11000217 	ldw	r4,8(r2)
    a4a4:	e1bffb17 	ldw	r6,-20(fp)
    a4a8:	e17ffd17 	ldw	r5,-12(fp)
    a4ac:	000a71c0 	call	a71c <memcmp>
    a4b0:	1004c03a 	cmpne	r2,r2,zero
    a4b4:	1000031e 	bne	r2,zero,a4c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a4b8:	e0bffc17 	ldw	r2,-16(fp)
    a4bc:	e0bfff15 	stw	r2,-4(fp)
    a4c0:	00000706 	br	a4e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a4c4:	e0bffc17 	ldw	r2,-16(fp)
    a4c8:	10800017 	ldw	r2,0(r2)
    a4cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a4d0:	e0fffe17 	ldw	r3,-8(fp)
    a4d4:	e0bffc17 	ldw	r2,-16(fp)
    a4d8:	10fff01e 	bne	r2,r3,a49c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a4dc:	e03fff15 	stw	zero,-4(fp)
    a4e0:	e0bfff17 	ldw	r2,-4(fp)
}
    a4e4:	e037883a 	mov	sp,fp
    a4e8:	dfc00117 	ldw	ra,4(sp)
    a4ec:	df000017 	ldw	fp,0(sp)
    a4f0:	dec00204 	addi	sp,sp,8
    a4f4:	f800283a 	ret

0000a4f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a4f8:	defffa04 	addi	sp,sp,-24
    a4fc:	dfc00515 	stw	ra,20(sp)
    a500:	df000415 	stw	fp,16(sp)
    a504:	df000404 	addi	fp,sp,16
    a508:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a50c:	00800074 	movhi	r2,1
    a510:	10ab8504 	addi	r2,r2,-20972
    a514:	10800017 	ldw	r2,0(r2)
    a518:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a51c:	00003306 	br	a5ec <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    a520:	e0bffd17 	ldw	r2,-12(fp)
    a524:	11000217 	ldw	r4,8(r2)
    a528:	0008fd00 	call	8fd0 <strlen>
    a52c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    a530:	e0bffd17 	ldw	r2,-12(fp)
    a534:	10c00217 	ldw	r3,8(r2)
    a538:	e0bffc17 	ldw	r2,-16(fp)
    a53c:	1885883a 	add	r2,r3,r2
    a540:	10bfffc4 	addi	r2,r2,-1
    a544:	10800003 	ldbu	r2,0(r2)
    a548:	10803fcc 	andi	r2,r2,255
    a54c:	1080201c 	xori	r2,r2,128
    a550:	10bfe004 	addi	r2,r2,-128
    a554:	10800bd8 	cmpnei	r2,r2,47
    a558:	1000031e 	bne	r2,zero,a568 <alt_find_file+0x70>
    {
      len -= 1;
    a55c:	e0bffc17 	ldw	r2,-16(fp)
    a560:	10bfffc4 	addi	r2,r2,-1
    a564:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a568:	e0bffc17 	ldw	r2,-16(fp)
    a56c:	1007883a 	mov	r3,r2
    a570:	e0bffe17 	ldw	r2,-8(fp)
    a574:	1885883a 	add	r2,r3,r2
    a578:	10800003 	ldbu	r2,0(r2)
    a57c:	10803fcc 	andi	r2,r2,255
    a580:	1080201c 	xori	r2,r2,128
    a584:	10bfe004 	addi	r2,r2,-128
    a588:	10800be0 	cmpeqi	r2,r2,47
    a58c:	10000a1e 	bne	r2,zero,a5b8 <alt_find_file+0xc0>
    a590:	e0bffc17 	ldw	r2,-16(fp)
    a594:	1007883a 	mov	r3,r2
    a598:	e0bffe17 	ldw	r2,-8(fp)
    a59c:	1885883a 	add	r2,r3,r2
    a5a0:	10800003 	ldbu	r2,0(r2)
    a5a4:	10803fcc 	andi	r2,r2,255
    a5a8:	1080201c 	xori	r2,r2,128
    a5ac:	10bfe004 	addi	r2,r2,-128
    a5b0:	1004c03a 	cmpne	r2,r2,zero
    a5b4:	10000a1e 	bne	r2,zero,a5e0 <alt_find_file+0xe8>
    a5b8:	e0bffd17 	ldw	r2,-12(fp)
    a5bc:	11000217 	ldw	r4,8(r2)
    a5c0:	e1bffc17 	ldw	r6,-16(fp)
    a5c4:	e17ffe17 	ldw	r5,-8(fp)
    a5c8:	000a71c0 	call	a71c <memcmp>
    a5cc:	1004c03a 	cmpne	r2,r2,zero
    a5d0:	1000031e 	bne	r2,zero,a5e0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a5d4:	e0bffd17 	ldw	r2,-12(fp)
    a5d8:	e0bfff15 	stw	r2,-4(fp)
    a5dc:	00000806 	br	a600 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    a5e0:	e0bffd17 	ldw	r2,-12(fp)
    a5e4:	10800017 	ldw	r2,0(r2)
    a5e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a5ec:	00c00074 	movhi	r3,1
    a5f0:	18eb8504 	addi	r3,r3,-20972
    a5f4:	e0bffd17 	ldw	r2,-12(fp)
    a5f8:	10ffc91e 	bne	r2,r3,a520 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a5fc:	e03fff15 	stw	zero,-4(fp)
    a600:	e0bfff17 	ldw	r2,-4(fp)
}
    a604:	e037883a 	mov	sp,fp
    a608:	dfc00117 	ldw	ra,4(sp)
    a60c:	df000017 	ldw	fp,0(sp)
    a610:	dec00204 	addi	sp,sp,8
    a614:	f800283a 	ret

0000a618 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a618:	defffa04 	addi	sp,sp,-24
    a61c:	dfc00515 	stw	ra,20(sp)
    a620:	df000415 	stw	fp,16(sp)
    a624:	dc000315 	stw	r16,12(sp)
    a628:	df000304 	addi	fp,sp,12
    a62c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a630:	00bffa04 	movi	r2,-24
    a634:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a638:	e03ffe15 	stw	zero,-8(fp)
    a63c:	00002006 	br	a6c0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    a640:	e13ffe17 	ldw	r4,-8(fp)
    a644:	04000074 	movhi	r16,1
    a648:	842b2004 	addi	r16,r16,-21376
    a64c:	01400304 	movi	r5,12
    a650:	00090680 	call	9068 <__mulsi3>
    a654:	1405883a 	add	r2,r2,r16
    a658:	10800017 	ldw	r2,0(r2)
    a65c:	1004c03a 	cmpne	r2,r2,zero
    a660:	1000141e 	bne	r2,zero,a6b4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    a664:	e13ffe17 	ldw	r4,-8(fp)
    a668:	04000074 	movhi	r16,1
    a66c:	842b2004 	addi	r16,r16,-21376
    a670:	01400304 	movi	r5,12
    a674:	00090680 	call	9068 <__mulsi3>
    a678:	1407883a 	add	r3,r2,r16
    a67c:	e0bfff17 	ldw	r2,-4(fp)
    a680:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    a684:	00800074 	movhi	r2,1
    a688:	10ab8904 	addi	r2,r2,-20956
    a68c:	10c00017 	ldw	r3,0(r2)
    a690:	e0bffe17 	ldw	r2,-8(fp)
    a694:	1880040e 	bge	r3,r2,a6a8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    a698:	00c00074 	movhi	r3,1
    a69c:	18eb8904 	addi	r3,r3,-20956
    a6a0:	e0bffe17 	ldw	r2,-8(fp)
    a6a4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    a6a8:	e0bffe17 	ldw	r2,-8(fp)
    a6ac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a6b0:	00000606 	br	a6cc <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a6b4:	e0bffe17 	ldw	r2,-8(fp)
    a6b8:	10800044 	addi	r2,r2,1
    a6bc:	e0bffe15 	stw	r2,-8(fp)
    a6c0:	e0bffe17 	ldw	r2,-8(fp)
    a6c4:	10800810 	cmplti	r2,r2,32
    a6c8:	103fdd1e 	bne	r2,zero,a640 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a6cc:	e0bffd17 	ldw	r2,-12(fp)
}
    a6d0:	e037883a 	mov	sp,fp
    a6d4:	dfc00217 	ldw	ra,8(sp)
    a6d8:	df000117 	ldw	fp,4(sp)
    a6dc:	dc000017 	ldw	r16,0(sp)
    a6e0:	dec00304 	addi	sp,sp,12
    a6e4:	f800283a 	ret

0000a6e8 <atexit>:
    a6e8:	200b883a 	mov	r5,r4
    a6ec:	000d883a 	mov	r6,zero
    a6f0:	0009883a 	mov	r4,zero
    a6f4:	000f883a 	mov	r7,zero
    a6f8:	000a7581 	jmpi	a758 <__register_exitproc>

0000a6fc <exit>:
    a6fc:	defffe04 	addi	sp,sp,-8
    a700:	dc400015 	stw	r17,0(sp)
    a704:	000b883a 	mov	r5,zero
    a708:	2023883a 	mov	r17,r4
    a70c:	dfc00115 	stw	ra,4(sp)
    a710:	000a8c80 	call	a8c8 <__call_exitprocs>
    a714:	8809883a 	mov	r4,r17
    a718:	000aac40 	call	aac4 <_exit>

0000a71c <memcmp>:
    a71c:	31ffffc4 	addi	r7,r6,-1
    a720:	3000061e 	bne	r6,zero,a73c <memcmp+0x20>
    a724:	00000a06 	br	a750 <memcmp+0x34>
    a728:	39ffffc4 	addi	r7,r7,-1
    a72c:	00bfffc4 	movi	r2,-1
    a730:	21000044 	addi	r4,r4,1
    a734:	29400044 	addi	r5,r5,1
    a738:	38800526 	beq	r7,r2,a750 <memcmp+0x34>
    a73c:	20c00003 	ldbu	r3,0(r4)
    a740:	28800003 	ldbu	r2,0(r5)
    a744:	18bff826 	beq	r3,r2,a728 <memcmp+0xc>
    a748:	1885c83a 	sub	r2,r3,r2
    a74c:	f800283a 	ret
    a750:	0005883a 	mov	r2,zero
    a754:	f800283a 	ret

0000a758 <__register_exitproc>:
    a758:	defff904 	addi	sp,sp,-28
    a75c:	00800074 	movhi	r2,1
    a760:	10ab8304 	addi	r2,r2,-20980
    a764:	dc400115 	stw	r17,4(sp)
    a768:	14400017 	ldw	r17,0(r2)
    a76c:	dc000015 	stw	r16,0(sp)
    a770:	dd400515 	stw	r21,20(sp)
    a774:	8c000c17 	ldw	r16,48(r17)
    a778:	dd000415 	stw	r20,16(sp)
    a77c:	dcc00315 	stw	r19,12(sp)
    a780:	dc800215 	stw	r18,8(sp)
    a784:	dfc00615 	stw	ra,24(sp)
    a788:	2025883a 	mov	r18,r4
    a78c:	282b883a 	mov	r21,r5
    a790:	3029883a 	mov	r20,r6
    a794:	3827883a 	mov	r19,r7
    a798:	80002626 	beq	r16,zero,a834 <__register_exitproc+0xdc>
    a79c:	81400117 	ldw	r5,4(r16)
    a7a0:	008007c4 	movi	r2,31
    a7a4:	11403716 	blt	r2,r5,a884 <__register_exitproc+0x12c>
    a7a8:	90002026 	beq	r18,zero,a82c <__register_exitproc+0xd4>
    a7ac:	81802217 	ldw	r6,136(r16)
    a7b0:	30002926 	beq	r6,zero,a858 <__register_exitproc+0x100>
    a7b4:	81400117 	ldw	r5,4(r16)
    a7b8:	00c00044 	movi	r3,1
    a7bc:	31004017 	ldw	r4,256(r6)
    a7c0:	1946983a 	sll	r3,r3,r5
    a7c4:	2945883a 	add	r2,r5,r5
    a7c8:	1085883a 	add	r2,r2,r2
    a7cc:	1185883a 	add	r2,r2,r6
    a7d0:	20c8b03a 	or	r4,r4,r3
    a7d4:	14c02015 	stw	r19,128(r2)
    a7d8:	15000015 	stw	r20,0(r2)
    a7dc:	00800084 	movi	r2,2
    a7e0:	31004015 	stw	r4,256(r6)
    a7e4:	90801826 	beq	r18,r2,a848 <__register_exitproc+0xf0>
    a7e8:	2945883a 	add	r2,r5,r5
    a7ec:	1085883a 	add	r2,r2,r2
    a7f0:	1405883a 	add	r2,r2,r16
    a7f4:	28c00044 	addi	r3,r5,1
    a7f8:	0009883a 	mov	r4,zero
    a7fc:	15400215 	stw	r21,8(r2)
    a800:	80c00115 	stw	r3,4(r16)
    a804:	2005883a 	mov	r2,r4
    a808:	dfc00617 	ldw	ra,24(sp)
    a80c:	dd400517 	ldw	r21,20(sp)
    a810:	dd000417 	ldw	r20,16(sp)
    a814:	dcc00317 	ldw	r19,12(sp)
    a818:	dc800217 	ldw	r18,8(sp)
    a81c:	dc400117 	ldw	r17,4(sp)
    a820:	dc000017 	ldw	r16,0(sp)
    a824:	dec00704 	addi	sp,sp,28
    a828:	f800283a 	ret
    a82c:	81400117 	ldw	r5,4(r16)
    a830:	003fed06 	br	a7e8 <__register_exitproc+0x90>
    a834:	00800074 	movhi	r2,1
    a838:	10ac9004 	addi	r2,r2,-19904
    a83c:	1021883a 	mov	r16,r2
    a840:	88800c15 	stw	r2,48(r17)
    a844:	003fd506 	br	a79c <__register_exitproc+0x44>
    a848:	30804117 	ldw	r2,260(r6)
    a84c:	10c4b03a 	or	r2,r2,r3
    a850:	30804115 	stw	r2,260(r6)
    a854:	003fe406 	br	a7e8 <__register_exitproc+0x90>
    a858:	00800034 	movhi	r2,0
    a85c:	10800004 	addi	r2,r2,0
    a860:	10000b26 	beq	r2,zero,a890 <__register_exitproc+0x138>
    a864:	01004204 	movi	r4,264
    a868:	103ee83a 	callr	r2
    a86c:	10000826 	beq	r2,zero,a890 <__register_exitproc+0x138>
    a870:	100d883a 	mov	r6,r2
    a874:	10004015 	stw	zero,256(r2)
    a878:	10004115 	stw	zero,260(r2)
    a87c:	80802215 	stw	r2,136(r16)
    a880:	003fcc06 	br	a7b4 <__register_exitproc+0x5c>
    a884:	00800034 	movhi	r2,0
    a888:	10800004 	addi	r2,r2,0
    a88c:	1000021e 	bne	r2,zero,a898 <__register_exitproc+0x140>
    a890:	013fffc4 	movi	r4,-1
    a894:	003fdb06 	br	a804 <__register_exitproc+0xac>
    a898:	01002304 	movi	r4,140
    a89c:	103ee83a 	callr	r2
    a8a0:	1007883a 	mov	r3,r2
    a8a4:	103ffa26 	beq	r2,zero,a890 <__register_exitproc+0x138>
    a8a8:	88800c17 	ldw	r2,48(r17)
    a8ac:	1821883a 	mov	r16,r3
    a8b0:	18000115 	stw	zero,4(r3)
    a8b4:	18800015 	stw	r2,0(r3)
    a8b8:	88c00c15 	stw	r3,48(r17)
    a8bc:	903fdb26 	beq	r18,zero,a82c <__register_exitproc+0xd4>
    a8c0:	003fba06 	br	a7ac <__register_exitproc+0x54>

0000a8c4 <register_fini>:
    a8c4:	f800283a 	ret

0000a8c8 <__call_exitprocs>:
    a8c8:	defff304 	addi	sp,sp,-52
    a8cc:	00800074 	movhi	r2,1
    a8d0:	10ab8304 	addi	r2,r2,-20980
    a8d4:	df000b15 	stw	fp,44(sp)
    a8d8:	17000017 	ldw	fp,0(r2)
    a8dc:	00800034 	movhi	r2,0
    a8e0:	10800004 	addi	r2,r2,0
    a8e4:	1005003a 	cmpeq	r2,r2,zero
    a8e8:	d8800215 	stw	r2,8(sp)
    a8ec:	e0800c04 	addi	r2,fp,48
    a8f0:	dd800915 	stw	r22,36(sp)
    a8f4:	dd400815 	stw	r21,32(sp)
    a8f8:	dfc00c15 	stw	ra,48(sp)
    a8fc:	ddc00a15 	stw	r23,40(sp)
    a900:	dd000715 	stw	r20,28(sp)
    a904:	dcc00615 	stw	r19,24(sp)
    a908:	dc800515 	stw	r18,20(sp)
    a90c:	dc400415 	stw	r17,16(sp)
    a910:	dc000315 	stw	r16,12(sp)
    a914:	282d883a 	mov	r22,r5
    a918:	d9000115 	stw	r4,4(sp)
    a91c:	d8800015 	stw	r2,0(sp)
    a920:	282b003a 	cmpeq	r21,r5,zero
    a924:	e4400c17 	ldw	r17,48(fp)
    a928:	88001226 	beq	r17,zero,a974 <__call_exitprocs+0xac>
    a92c:	ddc00017 	ldw	r23,0(sp)
    a930:	88800117 	ldw	r2,4(r17)
    a934:	8c802217 	ldw	r18,136(r17)
    a938:	143fffc4 	addi	r16,r2,-1
    a93c:	80000b16 	blt	r16,zero,a96c <__call_exitprocs+0xa4>
    a940:	9027003a 	cmpeq	r19,r18,zero
    a944:	a800171e 	bne	r21,zero,a9a4 <__call_exitprocs+0xdc>
    a948:	9800051e 	bne	r19,zero,a960 <__call_exitprocs+0x98>
    a94c:	8409883a 	add	r4,r16,r16
    a950:	2105883a 	add	r2,r4,r4
    a954:	1485883a 	add	r2,r2,r18
    a958:	10c02017 	ldw	r3,128(r2)
    a95c:	b0c01226 	beq	r22,r3,a9a8 <__call_exitprocs+0xe0>
    a960:	843fffc4 	addi	r16,r16,-1
    a964:	00bfffc4 	movi	r2,-1
    a968:	80bff61e 	bne	r16,r2,a944 <__call_exitprocs+0x7c>
    a96c:	d8800217 	ldw	r2,8(sp)
    a970:	10003226 	beq	r2,zero,aa3c <__call_exitprocs+0x174>
    a974:	dfc00c17 	ldw	ra,48(sp)
    a978:	df000b17 	ldw	fp,44(sp)
    a97c:	ddc00a17 	ldw	r23,40(sp)
    a980:	dd800917 	ldw	r22,36(sp)
    a984:	dd400817 	ldw	r21,32(sp)
    a988:	dd000717 	ldw	r20,28(sp)
    a98c:	dcc00617 	ldw	r19,24(sp)
    a990:	dc800517 	ldw	r18,20(sp)
    a994:	dc400417 	ldw	r17,16(sp)
    a998:	dc000317 	ldw	r16,12(sp)
    a99c:	dec00d04 	addi	sp,sp,52
    a9a0:	f800283a 	ret
    a9a4:	8409883a 	add	r4,r16,r16
    a9a8:	88c00117 	ldw	r3,4(r17)
    a9ac:	2105883a 	add	r2,r4,r4
    a9b0:	1445883a 	add	r2,r2,r17
    a9b4:	18ffffc4 	addi	r3,r3,-1
    a9b8:	11800217 	ldw	r6,8(r2)
    a9bc:	1c001826 	beq	r3,r16,aa20 <__call_exitprocs+0x158>
    a9c0:	10000215 	stw	zero,8(r2)
    a9c4:	303fe626 	beq	r6,zero,a960 <__call_exitprocs+0x98>
    a9c8:	8d000117 	ldw	r20,4(r17)
    a9cc:	9800121e 	bne	r19,zero,aa18 <__call_exitprocs+0x150>
    a9d0:	00c00044 	movi	r3,1
    a9d4:	1c06983a 	sll	r3,r3,r16
    a9d8:	90804017 	ldw	r2,256(r18)
    a9dc:	1884703a 	and	r2,r3,r2
    a9e0:	10000d26 	beq	r2,zero,aa18 <__call_exitprocs+0x150>
    a9e4:	90804117 	ldw	r2,260(r18)
    a9e8:	1884703a 	and	r2,r3,r2
    a9ec:	10000e1e 	bne	r2,zero,aa28 <__call_exitprocs+0x160>
    a9f0:	2105883a 	add	r2,r4,r4
    a9f4:	1485883a 	add	r2,r2,r18
    a9f8:	11400017 	ldw	r5,0(r2)
    a9fc:	d9000117 	ldw	r4,4(sp)
    aa00:	303ee83a 	callr	r6
    aa04:	88800117 	ldw	r2,4(r17)
    aa08:	a0bfc61e 	bne	r20,r2,a924 <__call_exitprocs+0x5c>
    aa0c:	b8800017 	ldw	r2,0(r23)
    aa10:	147fd326 	beq	r2,r17,a960 <__call_exitprocs+0x98>
    aa14:	003fc306 	br	a924 <__call_exitprocs+0x5c>
    aa18:	303ee83a 	callr	r6
    aa1c:	003ff906 	br	aa04 <__call_exitprocs+0x13c>
    aa20:	8c000115 	stw	r16,4(r17)
    aa24:	003fe706 	br	a9c4 <__call_exitprocs+0xfc>
    aa28:	2105883a 	add	r2,r4,r4
    aa2c:	1485883a 	add	r2,r2,r18
    aa30:	11000017 	ldw	r4,0(r2)
    aa34:	303ee83a 	callr	r6
    aa38:	003ff206 	br	aa04 <__call_exitprocs+0x13c>
    aa3c:	88800117 	ldw	r2,4(r17)
    aa40:	10000b1e 	bne	r2,zero,aa70 <__call_exitprocs+0x1a8>
    aa44:	89000017 	ldw	r4,0(r17)
    aa48:	20000a26 	beq	r4,zero,aa74 <__call_exitprocs+0x1ac>
    aa4c:	b9000015 	stw	r4,0(r23)
    aa50:	90000226 	beq	r18,zero,aa5c <__call_exitprocs+0x194>
    aa54:	9009883a 	mov	r4,r18
    aa58:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    aa5c:	8809883a 	mov	r4,r17
    aa60:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    aa64:	bc400017 	ldw	r17,0(r23)
    aa68:	883fb11e 	bne	r17,zero,a930 <__call_exitprocs+0x68>
    aa6c:	003fc106 	br	a974 <__call_exitprocs+0xac>
    aa70:	89000017 	ldw	r4,0(r17)
    aa74:	882f883a 	mov	r23,r17
    aa78:	2023883a 	mov	r17,r4
    aa7c:	883fac1e 	bne	r17,zero,a930 <__call_exitprocs+0x68>
    aa80:	003fbc06 	br	a974 <__call_exitprocs+0xac>

0000aa84 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    aa84:	defffd04 	addi	sp,sp,-12
    aa88:	df000215 	stw	fp,8(sp)
    aa8c:	df000204 	addi	fp,sp,8
    aa90:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    aa94:	e0bfff17 	ldw	r2,-4(fp)
    aa98:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    aa9c:	e0bffe17 	ldw	r2,-8(fp)
    aaa0:	1005003a 	cmpeq	r2,r2,zero
    aaa4:	1000021e 	bne	r2,zero,aab0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    aaa8:	002af070 	cmpltui	zero,zero,43969
    aaac:	00000106 	br	aab4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    aab0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    aab4:	e037883a 	mov	sp,fp
    aab8:	df000017 	ldw	fp,0(sp)
    aabc:	dec00104 	addi	sp,sp,4
    aac0:	f800283a 	ret

0000aac4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    aac4:	defffd04 	addi	sp,sp,-12
    aac8:	dfc00215 	stw	ra,8(sp)
    aacc:	df000115 	stw	fp,4(sp)
    aad0:	df000104 	addi	fp,sp,4
    aad4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    aad8:	e13fff17 	ldw	r4,-4(fp)
    aadc:	000aa840 	call	aa84 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    aae0:	003fff06 	br	aae0 <_exit+0x1c>
    aae4:	0000a8c4 	movi	zero,675
