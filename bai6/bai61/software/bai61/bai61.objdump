
bai61.elf:     file format elf32-littlenios2
bai61.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00003150 memsz 0x00003150 flags r-x
    LOAD off    0x00004170 vaddr 0x0000b170 paddr 0x0000c868 align 2**12
         filesz 0x000016f8 memsz 0x000016f8 flags rw-
    LOAD off    0x00005f60 vaddr 0x0000df60 paddr 0x0000df60 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002f78  000081b4  000081b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  0000b12c  0000b12c  0000412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016f8  0000b170  0000c868  00004170  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  0000df60  0000df60  00005f60  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00005868  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005d8  00000000  00000000  00005890  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000924  00000000  00000000  00005e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b0dc  00000000  00000000  0000678c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a68  00000000  00000000  00011868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007192  00000000  00000000  000142d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a84  00000000  00000000  0001b464  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c70  00000000  00000000  0001bee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000011c1  00000000  00000000  0001cb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001dd1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001dd30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001fa8e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001fa91  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001fa9d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001fa9e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001fa9f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001faaa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001fab5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0001fac0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000011  00000000  00000000  0001fac6  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002ce2d  00000000  00000000  0001fad7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b4 l    d  .text	00000000 .text
0000b12c l    d  .rodata	00000000 .rodata
0000b170 l    d  .rwdata	00000000 .rwdata
0000df60 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000081ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 bai61.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008350 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008554 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b170 l     O .rwdata	00001060 jtag_uart_0
0000c1d0 l     O .rwdata	000000c4 uart_0
000086c4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00008904 l     F .text	00000228 altera_avalon_jtag_uart_irq
00008b2c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00009368 l     F .text	0000009c altera_avalon_uart_irq
00009404 l     F .text	000000e0 altera_avalon_uart_rxirq
000094e4 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000098d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00009af8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00009dac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009e28 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009f08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a318 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000a468 l     F .text	000000f8 alt_file_locked
0000a6ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000c43c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000af14 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000b0c8 l     F .text	00000040 alt_sim_halt
000085c0 g     F .text	0000006c alt_main
0000df7c g     O .bss	00000100 alt_irq
0000c868 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000df78 g     O .bss	00000004 errno
0000df64 g     O .bss	00000004 alt_argv
0001483c g       *ABS*	00000000 _gp
0000c2bc g     O .rwdata	00000180 alt_fd_list
0000a988 g     F .text	00000094 alt_find_dev
0000accc g     F .text	000000a0 memcpy
0000a3f0 g     F .text	00000078 alt_io_redirect
0000b12c g       *ABS*	00000000 __DTOR_END__
00008d44 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000848c g     F .text	00000008 __udivsi3
0000c84c g     O .rwdata	00000004 alt_max_fd
0000c864 g     O .rwdata	00000004 _global_impure_ptr
0000e20c g       *ABS*	00000000 __bss_end
0000a220 g     F .text	000000f8 alt_iic_isr_register
0000a85c g     F .text	0000010c alt_tick
000092a0 g     F .text	000000c8 altera_avalon_uart_init
0000a1d8 g     F .text	00000048 alt_ic_irq_enabled
0000a7c4 g     F .text	00000098 alt_alarm_stop
0000df6c g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000c8 alt_irq_handler
0000c294 g     O .rwdata	00000028 alt_dev_null
00009e0c g     F .text	0000001c alt_dcache_flush_all
0000c868 g       *ABS*	00000000 __ram_rwdata_end
0000c844 g     O .rwdata	00000008 alt_dev_list
0000b170 g       *ABS*	00000000 __ram_rodata_end
00008494 g     F .text	00000008 __umodsi3
0000e20c g       *ABS*	00000000 end
00009930 g     F .text	000001c8 altera_avalon_uart_write
00008844 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000b128 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009200 g     F .text	00000058 altera_avalon_uart_write_fd
00009258 g     F .text	00000048 altera_avalon_uart_close_fd
00008f68 g     F .text	00000240 altera_avalon_jtag_uart_write
0000af18 g     F .text	000001b0 __call_exitprocs
000081b4 g     F .text	0000003c _start
0000df70 g     O .bss	00000004 _alt_tick_rate
0000df74 g     O .bss	00000004 _alt_nticks
00008660 g     F .text	00000064 alt_sys_init
0000ade0 g     F .text	00000134 __register_exitproc
00008bdc g     F .text	00000074 altera_avalon_jtag_uart_close
0000849c g     F .text	00000038 __mulsi3
0000b170 g       *ABS*	00000000 __ram_rwdata_start
0000b12c g       *ABS*	00000000 __ram_rodata_start
000086fc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000ab3c g     F .text	000000d0 alt_get_fd
0000ac58 g     F .text	00000074 memcmp
000087ac g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000e20c g       *ABS*	00000000 __alt_stack_base
000087f4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000aa1c g     F .text	00000120 alt_find_file
00009e54 g     F .text	000000b4 alt_dev_llist_insert
0000df60 g       *ABS*	00000000 __bss_start
00008244 g     F .text	0000010c main
0000df68 g     O .bss	00000004 alt_envp
00008754 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000e07c g     O .bss	00000190 _atexit0
0000c850 g     O .rwdata	00000004 alt_errno
000083cc g     F .text	00000060 __divsi3
0000b12c g       *ABS*	00000000 __CTOR_END__
0000b12c g       *ABS*	00000000 __flash_rodata_start
0000b12c g       *ABS*	00000000 __DTOR_LIST__
000081f0 g     F .text	00000054 delay
0000862c g     F .text	00000034 alt_irq_init
0000a74c g     F .text	00000078 alt_release_fd
0000ac0c g     F .text	00000014 atexit
0000c860 g     O .rwdata	00000004 _impure_ptr
0000df60 g     O .bss	00000004 alt_argc
00009fcc g     F .text	00000064 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000c83c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a04c g     F .text	00000050 alt_ic_isr_register
0000c868 g       *ABS*	00000000 _edata
000091a8 g     F .text	00000058 altera_avalon_uart_read_fd
0000e20c g       *ABS*	00000000 _end
000081b4 g       *ABS*	00000000 __ram_exceptions_end
00008c50 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000a138 g     F .text	000000a0 alt_ic_irq_disable
0000a968 g     F .text	00000020 altera_nios2_qsys_irq_init
0000ac20 g     F .text	00000038 exit
0000842c g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00009640 g     F .text	00000060 altera_avalon_uart_close
0000b108 g     F .text	00000020 _exit
00009b58 g     F .text	00000154 alt_alarm_start
0000ad6c g     F .text	00000074 strlen
0000a560 g     F .text	0000018c open
0000a030 g     F .text	0000001c alt_icache_flush_all
0000c854 g     O .rwdata	00000004 alt_priority_mask
0000a09c g     F .text	0000009c alt_ic_irq_enable
000096a0 g     F .text	00000230 altera_avalon_uart_read
0000c858 g     O .rwdata	00000008 alt_alarm_list
00009f68 g     F .text	00000064 _do_ctors
00009cac g     F .text	00000100 close
000084d4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606d14 	ori	at,at,33204
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    80fc:	0005313a 	rdctl	r2,ipending
    8100:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    8108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    810c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8110:	00800044 	movi	r2,1
    8114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8118:	e0ffff17 	ldw	r3,-4(fp)
    811c:	e0bffe17 	ldw	r2,-8(fp)
    8120:	1884703a 	and	r2,r3,r2
    8124:	1005003a 	cmpeq	r2,r2,zero
    8128:	1000161e 	bne	r2,zero,8184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	e0bffd17 	ldw	r2,-12(fp)
    8130:	00c00074 	movhi	r3,1
    8134:	18f7df04 	addi	r3,r3,-8324
    8138:	100490fa 	slli	r2,r2,3
    813c:	10c5883a 	add	r2,r2,r3
    8140:	11400017 	ldw	r5,0(r2)
    8144:	e0bffd17 	ldw	r2,-12(fp)
    8148:	00c00074 	movhi	r3,1
    814c:	18f7df04 	addi	r3,r3,-8324
    8150:	100490fa 	slli	r2,r2,3
    8154:	10c5883a 	add	r2,r2,r3
    8158:	10800104 	addi	r2,r2,4
    815c:	11000017 	ldw	r4,0(r2)
    8160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8164:	0005313a 	rdctl	r2,ipending
    8168:	e0bffb15 	stw	r2,-20(fp)

  return active;
    816c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    8174:	e0bfff17 	ldw	r2,-4(fp)
    8178:	1004c03a 	cmpne	r2,r2,zero
    817c:	103fe31e 	bne	r2,zero,810c <alt_irq_handler+0x20>
    8180:	00000706 	br	81a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8184:	e0bffe17 	ldw	r2,-8(fp)
    8188:	1085883a 	add	r2,r2,r2
    818c:	e0bffe15 	stw	r2,-8(fp)
      i++;
    8190:	e0bffd17 	ldw	r2,-12(fp)
    8194:	10800044 	addi	r2,r2,1
    8198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    819c:	003fde06 	br	8118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a0:	e037883a 	mov	sp,fp
    81a4:	dfc00117 	ldw	ra,4(sp)
    81a8:	df000017 	ldw	fp,0(sp)
    81ac:	dec00204 	addi	sp,sp,8
    81b0:	f800283a 	ret

Disassembly of section .text:

000081b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    81bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c0:	d6920f14 	ori	gp,gp,18492
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81c8:	10b7d814 	ori	r2,r2,57184

    movhi r3, %hi(__bss_end)
    81cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d0:	18f88314 	ori	r3,r3,57868

    beq r2, r3, 1f
    81d4:	10c00326 	beq	r2,r3,81e4 <_start+0x30>

0:
    stw zero, (r2)
    81d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e0:	10fffd36 	bltu	r2,r3,81d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e4:	00084d40 	call	84d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81e8:	00085c00 	call	85c0 <alt_main>

000081ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81ec:	003fff06 	br	81ec <alt_after_alt_main>

000081f0 <delay>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_uart_regs.h"
#include <stdint.h>
void delay(int a)
{
    81f0:	defffc04 	addi	sp,sp,-16
    81f4:	dfc00315 	stw	ra,12(sp)
    81f8:	df000215 	stw	fp,8(sp)
    81fc:	df000204 	addi	fp,sp,8
    8200:	e13fff15 	stw	r4,-4(fp)
	volatile int i=0;
    8204:	e03ffe15 	stw	zero,-8(fp)
	while(i<a*10000)
    8208:	00000306 	br	8218 <delay+0x28>
	 {
	 i++;
    820c:	e0bffe17 	ldw	r2,-8(fp)
    8210:	10800044 	addi	r2,r2,1
    8214:	e0bffe15 	stw	r2,-8(fp)
#include "altera_avalon_uart_regs.h"
#include <stdint.h>
void delay(int a)
{
	volatile int i=0;
	while(i<a*10000)
    8218:	e13fff17 	ldw	r4,-4(fp)
    821c:	0149c404 	movi	r5,10000
    8220:	000849c0 	call	849c <__mulsi3>
    8224:	1007883a 	mov	r3,r2
    8228:	e0bffe17 	ldw	r2,-8(fp)
    822c:	10fff716 	blt	r2,r3,820c <delay+0x1c>
	 {
	 i++;
	 }
}
    8230:	e037883a 	mov	sp,fp
    8234:	dfc00117 	ldw	ra,4(sp)
    8238:	df000017 	ldw	fp,0(sp)
    823c:	dec00204 	addi	sp,sp,8
    8240:	f800283a 	ret

00008244 <main>:
int main()
{
    8244:	defff904 	addi	sp,sp,-28
    8248:	dfc00615 	stw	ra,24(sp)
    824c:	df000515 	stw	fp,20(sp)
    8250:	df000504 	addi	fp,sp,20
	int i,j;

	//char num[10]={0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39};
	char num[10]={'0','1','2','3','4','5','6','7','8','9'};
    8254:	00800c04 	movi	r2,48
    8258:	e0bffd05 	stb	r2,-12(fp)
    825c:	00800c44 	movi	r2,49
    8260:	e0bffd45 	stb	r2,-11(fp)
    8264:	00800c84 	movi	r2,50
    8268:	e0bffd85 	stb	r2,-10(fp)
    826c:	00800cc4 	movi	r2,51
    8270:	e0bffdc5 	stb	r2,-9(fp)
    8274:	00800d04 	movi	r2,52
    8278:	e0bffe05 	stb	r2,-8(fp)
    827c:	00800d44 	movi	r2,53
    8280:	e0bffe45 	stb	r2,-7(fp)
    8284:	00800d84 	movi	r2,54
    8288:	e0bffe85 	stb	r2,-6(fp)
    828c:	00800dc4 	movi	r2,55
    8290:	e0bffec5 	stb	r2,-5(fp)
    8294:	00800e04 	movi	r2,56
    8298:	e0bfff05 	stb	r2,-4(fp)
    829c:	00800e44 	movi	r2,57
    82a0:	e0bfff45 	stb	r2,-3(fp)
	 while (1)
	 {
		 for(i=0;i<100;i++)
    82a4:	e03ffc15 	stw	zero,-16(fp)
    82a8:	00002506 	br	8340 <main+0xfc>
		 {
			 IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, num[i/10]);
    82ac:	e13ffc17 	ldw	r4,-16(fp)
    82b0:	01400284 	movi	r5,10
    82b4:	00083cc0 	call	83cc <__divsi3>
    82b8:	1007883a 	mov	r3,r2
    82bc:	e0bffd04 	addi	r2,fp,-12
    82c0:	10c5883a 	add	r2,r2,r3
    82c4:	10800003 	ldbu	r2,0(r2)
    82c8:	10c03fcc 	andi	r3,r2,255
    82cc:	18c0201c 	xori	r3,r3,128
    82d0:	18ffe004 	addi	r3,r3,-128
    82d4:	00800074 	movhi	r2,1
    82d8:	10840904 	addi	r2,r2,4132
    82dc:	10c00035 	stwio	r3,0(r2)
			 IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, num[i%10]);
    82e0:	e13ffc17 	ldw	r4,-16(fp)
    82e4:	01400284 	movi	r5,10
    82e8:	000842c0 	call	842c <__modsi3>
    82ec:	1007883a 	mov	r3,r2
    82f0:	e0bffd04 	addi	r2,fp,-12
    82f4:	10c5883a 	add	r2,r2,r3
    82f8:	10800003 	ldbu	r2,0(r2)
    82fc:	10c03fcc 	andi	r3,r2,255
    8300:	18c0201c 	xori	r3,r3,128
    8304:	18ffe004 	addi	r3,r3,-128
    8308:	00800074 	movhi	r2,1
    830c:	10840904 	addi	r2,r2,4132
    8310:	10c00035 	stwio	r3,0(r2)
			 delay(100);
    8314:	01001904 	movi	r4,100
    8318:	00081f00 	call	81f0 <delay>
			 IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, '\n');
    831c:	00c00074 	movhi	r3,1
    8320:	18c40904 	addi	r3,r3,4132
    8324:	00800284 	movi	r2,10
    8328:	18800035 	stwio	r2,0(r3)
			 delay(100);
    832c:	01001904 	movi	r4,100
    8330:	00081f00 	call	81f0 <delay>

	//char num[10]={0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39};
	char num[10]={'0','1','2','3','4','5','6','7','8','9'};
	 while (1)
	 {
		 for(i=0;i<100;i++)
    8334:	e0bffc17 	ldw	r2,-16(fp)
    8338:	10800044 	addi	r2,r2,1
    833c:	e0bffc15 	stw	r2,-16(fp)
    8340:	e0bffc17 	ldw	r2,-16(fp)
    8344:	10801910 	cmplti	r2,r2,100
    8348:	103fd81e 	bne	r2,zero,82ac <main+0x68>
			 IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, num[i%10]);
			 delay(100);
			 IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, '\n');
			 delay(100);
		 }
	 }
    834c:	003fd506 	br	82a4 <main+0x60>

00008350 <udivmodsi4>:
    8350:	29001b2e 	bgeu	r5,r4,83c0 <udivmodsi4+0x70>
    8354:	28001a16 	blt	r5,zero,83c0 <udivmodsi4+0x70>
    8358:	00800044 	movi	r2,1
    835c:	0007883a 	mov	r3,zero
    8360:	01c007c4 	movi	r7,31
    8364:	00000306 	br	8374 <udivmodsi4+0x24>
    8368:	19c01326 	beq	r3,r7,83b8 <udivmodsi4+0x68>
    836c:	18c00044 	addi	r3,r3,1
    8370:	28000416 	blt	r5,zero,8384 <udivmodsi4+0x34>
    8374:	294b883a 	add	r5,r5,r5
    8378:	1085883a 	add	r2,r2,r2
    837c:	293ffa36 	bltu	r5,r4,8368 <udivmodsi4+0x18>
    8380:	10000d26 	beq	r2,zero,83b8 <udivmodsi4+0x68>
    8384:	0007883a 	mov	r3,zero
    8388:	21400236 	bltu	r4,r5,8394 <udivmodsi4+0x44>
    838c:	2149c83a 	sub	r4,r4,r5
    8390:	1886b03a 	or	r3,r3,r2
    8394:	1004d07a 	srli	r2,r2,1
    8398:	280ad07a 	srli	r5,r5,1
    839c:	103ffa1e 	bne	r2,zero,8388 <udivmodsi4+0x38>
    83a0:	30000226 	beq	r6,zero,83ac <udivmodsi4+0x5c>
    83a4:	2005883a 	mov	r2,r4
    83a8:	f800283a 	ret
    83ac:	1809883a 	mov	r4,r3
    83b0:	2005883a 	mov	r2,r4
    83b4:	f800283a 	ret
    83b8:	0007883a 	mov	r3,zero
    83bc:	003ff806 	br	83a0 <udivmodsi4+0x50>
    83c0:	00800044 	movi	r2,1
    83c4:	0007883a 	mov	r3,zero
    83c8:	003fef06 	br	8388 <udivmodsi4+0x38>

000083cc <__divsi3>:
    83cc:	defffe04 	addi	sp,sp,-8
    83d0:	dc000015 	stw	r16,0(sp)
    83d4:	dfc00115 	stw	ra,4(sp)
    83d8:	0021883a 	mov	r16,zero
    83dc:	20000c16 	blt	r4,zero,8410 <__divsi3+0x44>
    83e0:	000d883a 	mov	r6,zero
    83e4:	28000e16 	blt	r5,zero,8420 <__divsi3+0x54>
    83e8:	00083500 	call	8350 <udivmodsi4>
    83ec:	1007883a 	mov	r3,r2
    83f0:	8005003a 	cmpeq	r2,r16,zero
    83f4:	1000011e 	bne	r2,zero,83fc <__divsi3+0x30>
    83f8:	00c7c83a 	sub	r3,zero,r3
    83fc:	1805883a 	mov	r2,r3
    8400:	dfc00117 	ldw	ra,4(sp)
    8404:	dc000017 	ldw	r16,0(sp)
    8408:	dec00204 	addi	sp,sp,8
    840c:	f800283a 	ret
    8410:	0109c83a 	sub	r4,zero,r4
    8414:	04000044 	movi	r16,1
    8418:	000d883a 	mov	r6,zero
    841c:	283ff20e 	bge	r5,zero,83e8 <__divsi3+0x1c>
    8420:	014bc83a 	sub	r5,zero,r5
    8424:	8021003a 	cmpeq	r16,r16,zero
    8428:	003fef06 	br	83e8 <__divsi3+0x1c>

0000842c <__modsi3>:
    842c:	deffff04 	addi	sp,sp,-4
    8430:	dfc00015 	stw	ra,0(sp)
    8434:	01800044 	movi	r6,1
    8438:	2807883a 	mov	r3,r5
    843c:	20000416 	blt	r4,zero,8450 <__modsi3+0x24>
    8440:	28000c16 	blt	r5,zero,8474 <__modsi3+0x48>
    8444:	dfc00017 	ldw	ra,0(sp)
    8448:	dec00104 	addi	sp,sp,4
    844c:	00083501 	jmpi	8350 <udivmodsi4>
    8450:	0109c83a 	sub	r4,zero,r4
    8454:	28000b16 	blt	r5,zero,8484 <__modsi3+0x58>
    8458:	180b883a 	mov	r5,r3
    845c:	01800044 	movi	r6,1
    8460:	00083500 	call	8350 <udivmodsi4>
    8464:	0085c83a 	sub	r2,zero,r2
    8468:	dfc00017 	ldw	ra,0(sp)
    846c:	dec00104 	addi	sp,sp,4
    8470:	f800283a 	ret
    8474:	014bc83a 	sub	r5,zero,r5
    8478:	dfc00017 	ldw	ra,0(sp)
    847c:	dec00104 	addi	sp,sp,4
    8480:	00083501 	jmpi	8350 <udivmodsi4>
    8484:	0147c83a 	sub	r3,zero,r5
    8488:	003ff306 	br	8458 <__modsi3+0x2c>

0000848c <__udivsi3>:
    848c:	000d883a 	mov	r6,zero
    8490:	00083501 	jmpi	8350 <udivmodsi4>

00008494 <__umodsi3>:
    8494:	01800044 	movi	r6,1
    8498:	00083501 	jmpi	8350 <udivmodsi4>

0000849c <__mulsi3>:
    849c:	20000a26 	beq	r4,zero,84c8 <__mulsi3+0x2c>
    84a0:	0007883a 	mov	r3,zero
    84a4:	2080004c 	andi	r2,r4,1
    84a8:	1005003a 	cmpeq	r2,r2,zero
    84ac:	2008d07a 	srli	r4,r4,1
    84b0:	1000011e 	bne	r2,zero,84b8 <__mulsi3+0x1c>
    84b4:	1947883a 	add	r3,r3,r5
    84b8:	294b883a 	add	r5,r5,r5
    84bc:	203ff91e 	bne	r4,zero,84a4 <__mulsi3+0x8>
    84c0:	1805883a 	mov	r2,r3
    84c4:	f800283a 	ret
    84c8:	0007883a 	mov	r3,zero
    84cc:	1805883a 	mov	r2,r3
    84d0:	f800283a 	ret

000084d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    84d4:	defffe04 	addi	sp,sp,-8
    84d8:	dfc00115 	stw	ra,4(sp)
    84dc:	df000015 	stw	fp,0(sp)
    84e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    84e4:	01000074 	movhi	r4,1
    84e8:	21321a04 	addi	r4,r4,-14232
    84ec:	01400074 	movhi	r5,1
    84f0:	296c5c04 	addi	r5,r5,-20112
    84f4:	01800074 	movhi	r6,1
    84f8:	31b21a04 	addi	r6,r6,-14232
    84fc:	00085540 	call	8554 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8500:	01000074 	movhi	r4,1
    8504:	21200804 	addi	r4,r4,-32736
    8508:	01400074 	movhi	r5,1
    850c:	29600804 	addi	r5,r5,-32736
    8510:	01800074 	movhi	r6,1
    8514:	31a06d04 	addi	r6,r6,-32332
    8518:	00085540 	call	8554 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    851c:	01000074 	movhi	r4,1
    8520:	212c4b04 	addi	r4,r4,-20180
    8524:	01400074 	movhi	r5,1
    8528:	296c4b04 	addi	r5,r5,-20180
    852c:	01800074 	movhi	r6,1
    8530:	31ac5c04 	addi	r6,r6,-20112
    8534:	00085540 	call	8554 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8538:	0009e0c0 	call	9e0c <alt_dcache_flush_all>
  alt_icache_flush_all();
    853c:	000a0300 	call	a030 <alt_icache_flush_all>
}
    8540:	e037883a 	mov	sp,fp
    8544:	dfc00117 	ldw	ra,4(sp)
    8548:	df000017 	ldw	fp,0(sp)
    854c:	dec00204 	addi	sp,sp,8
    8550:	f800283a 	ret

00008554 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8554:	defffc04 	addi	sp,sp,-16
    8558:	df000315 	stw	fp,12(sp)
    855c:	df000304 	addi	fp,sp,12
    8560:	e13ffd15 	stw	r4,-12(fp)
    8564:	e17ffe15 	stw	r5,-8(fp)
    8568:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    856c:	e0fffe17 	ldw	r3,-8(fp)
    8570:	e0bffd17 	ldw	r2,-12(fp)
    8574:	18800e26 	beq	r3,r2,85b0 <alt_load_section+0x5c>
  {
    while( to != end )
    8578:	00000a06 	br	85a4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    857c:	e0bffd17 	ldw	r2,-12(fp)
    8580:	10c00017 	ldw	r3,0(r2)
    8584:	e0bffe17 	ldw	r2,-8(fp)
    8588:	10c00015 	stw	r3,0(r2)
    858c:	e0bffe17 	ldw	r2,-8(fp)
    8590:	10800104 	addi	r2,r2,4
    8594:	e0bffe15 	stw	r2,-8(fp)
    8598:	e0bffd17 	ldw	r2,-12(fp)
    859c:	10800104 	addi	r2,r2,4
    85a0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    85a4:	e0fffe17 	ldw	r3,-8(fp)
    85a8:	e0bfff17 	ldw	r2,-4(fp)
    85ac:	18bff31e 	bne	r3,r2,857c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    85b0:	e037883a 	mov	sp,fp
    85b4:	df000017 	ldw	fp,0(sp)
    85b8:	dec00104 	addi	sp,sp,4
    85bc:	f800283a 	ret

000085c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    85c0:	defffd04 	addi	sp,sp,-12
    85c4:	dfc00215 	stw	ra,8(sp)
    85c8:	df000115 	stw	fp,4(sp)
    85cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    85d0:	0009883a 	mov	r4,zero
    85d4:	000862c0 	call	862c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    85d8:	00086600 	call	8660 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    85dc:	01000074 	movhi	r4,1
    85e0:	212c4b04 	addi	r4,r4,-20180
    85e4:	01400074 	movhi	r5,1
    85e8:	296c4b04 	addi	r5,r5,-20180
    85ec:	01800074 	movhi	r6,1
    85f0:	31ac4b04 	addi	r6,r6,-20180
    85f4:	000a3f00 	call	a3f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    85f8:	0009f680 	call	9f68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    85fc:	01000074 	movhi	r4,1
    8600:	2127f304 	addi	r4,r4,-24628
    8604:	000ac0c0 	call	ac0c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8608:	d125c917 	ldw	r4,-26844(gp)
    860c:	d165ca17 	ldw	r5,-26840(gp)
    8610:	d1a5cb17 	ldw	r6,-26836(gp)
    8614:	00082440 	call	8244 <main>
    8618:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    861c:	01000044 	movi	r4,1
    8620:	0009cac0 	call	9cac <close>
  exit (result);
    8624:	e13fff17 	ldw	r4,-4(fp)
    8628:	000ac200 	call	ac20 <exit>

0000862c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    862c:	defffd04 	addi	sp,sp,-12
    8630:	dfc00215 	stw	ra,8(sp)
    8634:	df000115 	stw	fp,4(sp)
    8638:	df000104 	addi	fp,sp,4
    863c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    8640:	000a9680 	call	a968 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8644:	00800044 	movi	r2,1
    8648:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    864c:	e037883a 	mov	sp,fp
    8650:	dfc00117 	ldw	ra,4(sp)
    8654:	df000017 	ldw	fp,0(sp)
    8658:	dec00204 	addi	sp,sp,8
    865c:	f800283a 	ret

00008660 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8660:	defffe04 	addi	sp,sp,-8
    8664:	dfc00115 	stw	ra,4(sp)
    8668:	df000015 	stw	fp,0(sp)
    866c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    8670:	01000074 	movhi	r4,1
    8674:	212c6604 	addi	r4,r4,-20072
    8678:	000b883a 	mov	r5,zero
    867c:	000d883a 	mov	r6,zero
    8680:	00088440 	call	8844 <altera_avalon_jtag_uart_init>
    8684:	01000074 	movhi	r4,1
    8688:	212c5c04 	addi	r4,r4,-20112
    868c:	00086c40 	call	86c4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    8690:	01000074 	movhi	r4,1
    8694:	21307e04 	addi	r4,r4,-15880
    8698:	000b883a 	mov	r5,zero
    869c:	01800044 	movi	r6,1
    86a0:	00092a00 	call	92a0 <altera_avalon_uart_init>
    86a4:	01000074 	movhi	r4,1
    86a8:	21307404 	addi	r4,r4,-15920
    86ac:	00086c40 	call	86c4 <alt_dev_reg>
}
    86b0:	e037883a 	mov	sp,fp
    86b4:	dfc00117 	ldw	ra,4(sp)
    86b8:	df000017 	ldw	fp,0(sp)
    86bc:	dec00204 	addi	sp,sp,8
    86c0:	f800283a 	ret

000086c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    86c4:	defffd04 	addi	sp,sp,-12
    86c8:	dfc00215 	stw	ra,8(sp)
    86cc:	df000115 	stw	fp,4(sp)
    86d0:	df000104 	addi	fp,sp,4
    86d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    86d8:	e13fff17 	ldw	r4,-4(fp)
    86dc:	01400074 	movhi	r5,1
    86e0:	29721104 	addi	r5,r5,-14268
    86e4:	0009e540 	call	9e54 <alt_dev_llist_insert>
}
    86e8:	e037883a 	mov	sp,fp
    86ec:	dfc00117 	ldw	ra,4(sp)
    86f0:	df000017 	ldw	fp,0(sp)
    86f4:	dec00204 	addi	sp,sp,8
    86f8:	f800283a 	ret

000086fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    86fc:	defffa04 	addi	sp,sp,-24
    8700:	dfc00515 	stw	ra,20(sp)
    8704:	df000415 	stw	fp,16(sp)
    8708:	df000404 	addi	fp,sp,16
    870c:	e13ffd15 	stw	r4,-12(fp)
    8710:	e17ffe15 	stw	r5,-8(fp)
    8714:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8718:	e0bffd17 	ldw	r2,-12(fp)
    871c:	10800017 	ldw	r2,0(r2)
    8720:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8724:	e0bffc17 	ldw	r2,-16(fp)
    8728:	11000a04 	addi	r4,r2,40
    872c:	e0bffd17 	ldw	r2,-12(fp)
    8730:	11c00217 	ldw	r7,8(r2)
    8734:	e17ffe17 	ldw	r5,-8(fp)
    8738:	e1bfff17 	ldw	r6,-4(fp)
    873c:	0008d440 	call	8d44 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8740:	e037883a 	mov	sp,fp
    8744:	dfc00117 	ldw	ra,4(sp)
    8748:	df000017 	ldw	fp,0(sp)
    874c:	dec00204 	addi	sp,sp,8
    8750:	f800283a 	ret

00008754 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8754:	defffa04 	addi	sp,sp,-24
    8758:	dfc00515 	stw	ra,20(sp)
    875c:	df000415 	stw	fp,16(sp)
    8760:	df000404 	addi	fp,sp,16
    8764:	e13ffd15 	stw	r4,-12(fp)
    8768:	e17ffe15 	stw	r5,-8(fp)
    876c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8770:	e0bffd17 	ldw	r2,-12(fp)
    8774:	10800017 	ldw	r2,0(r2)
    8778:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    877c:	e0bffc17 	ldw	r2,-16(fp)
    8780:	11000a04 	addi	r4,r2,40
    8784:	e0bffd17 	ldw	r2,-12(fp)
    8788:	11c00217 	ldw	r7,8(r2)
    878c:	e17ffe17 	ldw	r5,-8(fp)
    8790:	e1bfff17 	ldw	r6,-4(fp)
    8794:	0008f680 	call	8f68 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8798:	e037883a 	mov	sp,fp
    879c:	dfc00117 	ldw	ra,4(sp)
    87a0:	df000017 	ldw	fp,0(sp)
    87a4:	dec00204 	addi	sp,sp,8
    87a8:	f800283a 	ret

000087ac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    87ac:	defffc04 	addi	sp,sp,-16
    87b0:	dfc00315 	stw	ra,12(sp)
    87b4:	df000215 	stw	fp,8(sp)
    87b8:	df000204 	addi	fp,sp,8
    87bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    87c0:	e0bfff17 	ldw	r2,-4(fp)
    87c4:	10800017 	ldw	r2,0(r2)
    87c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    87cc:	e0bffe17 	ldw	r2,-8(fp)
    87d0:	11000a04 	addi	r4,r2,40
    87d4:	e0bfff17 	ldw	r2,-4(fp)
    87d8:	11400217 	ldw	r5,8(r2)
    87dc:	0008bdc0 	call	8bdc <altera_avalon_jtag_uart_close>
}
    87e0:	e037883a 	mov	sp,fp
    87e4:	dfc00117 	ldw	ra,4(sp)
    87e8:	df000017 	ldw	fp,0(sp)
    87ec:	dec00204 	addi	sp,sp,8
    87f0:	f800283a 	ret

000087f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    87f4:	defffa04 	addi	sp,sp,-24
    87f8:	dfc00515 	stw	ra,20(sp)
    87fc:	df000415 	stw	fp,16(sp)
    8800:	df000404 	addi	fp,sp,16
    8804:	e13ffd15 	stw	r4,-12(fp)
    8808:	e17ffe15 	stw	r5,-8(fp)
    880c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    8810:	e0bffd17 	ldw	r2,-12(fp)
    8814:	10800017 	ldw	r2,0(r2)
    8818:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    881c:	e0bffc17 	ldw	r2,-16(fp)
    8820:	11000a04 	addi	r4,r2,40
    8824:	e17ffe17 	ldw	r5,-8(fp)
    8828:	e1bfff17 	ldw	r6,-4(fp)
    882c:	0008c500 	call	8c50 <altera_avalon_jtag_uart_ioctl>
}
    8830:	e037883a 	mov	sp,fp
    8834:	dfc00117 	ldw	ra,4(sp)
    8838:	df000017 	ldw	fp,0(sp)
    883c:	dec00204 	addi	sp,sp,8
    8840:	f800283a 	ret

00008844 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    8844:	defffa04 	addi	sp,sp,-24
    8848:	dfc00515 	stw	ra,20(sp)
    884c:	df000415 	stw	fp,16(sp)
    8850:	df000404 	addi	fp,sp,16
    8854:	e13ffd15 	stw	r4,-12(fp)
    8858:	e17ffe15 	stw	r5,-8(fp)
    885c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8860:	e0fffd17 	ldw	r3,-12(fp)
    8864:	00800044 	movi	r2,1
    8868:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    886c:	e0bffd17 	ldw	r2,-12(fp)
    8870:	10800017 	ldw	r2,0(r2)
    8874:	11000104 	addi	r4,r2,4
    8878:	e0bffd17 	ldw	r2,-12(fp)
    887c:	10800817 	ldw	r2,32(r2)
    8880:	1007883a 	mov	r3,r2
    8884:	2005883a 	mov	r2,r4
    8888:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    888c:	e13ffe17 	ldw	r4,-8(fp)
    8890:	e17fff17 	ldw	r5,-4(fp)
    8894:	d8000015 	stw	zero,0(sp)
    8898:	01800074 	movhi	r6,1
    889c:	31a24104 	addi	r6,r6,-30460
    88a0:	e1fffd17 	ldw	r7,-12(fp)
    88a4:	000a04c0 	call	a04c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    88a8:	e0bffd17 	ldw	r2,-12(fp)
    88ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    88b0:	e0bffd17 	ldw	r2,-12(fp)
    88b4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    88b8:	00800074 	movhi	r2,1
    88bc:	10b7dc04 	addi	r2,r2,-8336
    88c0:	10800017 	ldw	r2,0(r2)
    88c4:	100b883a 	mov	r5,r2
    88c8:	01800074 	movhi	r6,1
    88cc:	31a2cb04 	addi	r6,r6,-29908
    88d0:	e1fffd17 	ldw	r7,-12(fp)
    88d4:	0009b580 	call	9b58 <alt_alarm_start>
    88d8:	1004403a 	cmpge	r2,r2,zero
    88dc:	1000041e 	bne	r2,zero,88f0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    88e0:	e0fffd17 	ldw	r3,-12(fp)
    88e4:	00a00034 	movhi	r2,32768
    88e8:	10bfffc4 	addi	r2,r2,-1
    88ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    88f0:	e037883a 	mov	sp,fp
    88f4:	dfc00117 	ldw	ra,4(sp)
    88f8:	df000017 	ldw	fp,0(sp)
    88fc:	dec00204 	addi	sp,sp,8
    8900:	f800283a 	ret

00008904 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    8904:	defff804 	addi	sp,sp,-32
    8908:	df000715 	stw	fp,28(sp)
    890c:	df000704 	addi	fp,sp,28
    8910:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    8914:	e0bfff17 	ldw	r2,-4(fp)
    8918:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    891c:	e0bffe17 	ldw	r2,-8(fp)
    8920:	10800017 	ldw	r2,0(r2)
    8924:	e0bffd15 	stw	r2,-12(fp)
    8928:	00000006 	br	892c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    892c:	e0bffd17 	ldw	r2,-12(fp)
    8930:	10800104 	addi	r2,r2,4
    8934:	10800037 	ldwio	r2,0(r2)
    8938:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    893c:	e0bffc17 	ldw	r2,-16(fp)
    8940:	1080c00c 	andi	r2,r2,768
    8944:	1005003a 	cmpeq	r2,r2,zero
    8948:	1000741e 	bne	r2,zero,8b1c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    894c:	e0bffc17 	ldw	r2,-16(fp)
    8950:	1080400c 	andi	r2,r2,256
    8954:	1005003a 	cmpeq	r2,r2,zero
    8958:	1000351e 	bne	r2,zero,8a30 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    895c:	00800074 	movhi	r2,1
    8960:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8964:	e0bffe17 	ldw	r2,-8(fp)
    8968:	10800a17 	ldw	r2,40(r2)
    896c:	10800044 	addi	r2,r2,1
    8970:	1081ffcc 	andi	r2,r2,2047
    8974:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    8978:	e0bffe17 	ldw	r2,-8(fp)
    897c:	10c00b17 	ldw	r3,44(r2)
    8980:	e0bffa17 	ldw	r2,-24(fp)
    8984:	18801626 	beq	r3,r2,89e0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8988:	e0bffd17 	ldw	r2,-12(fp)
    898c:	10800037 	ldwio	r2,0(r2)
    8990:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    8994:	e0bffb17 	ldw	r2,-20(fp)
    8998:	10a0000c 	andi	r2,r2,32768
    899c:	1005003a 	cmpeq	r2,r2,zero
    89a0:	10000f1e 	bne	r2,zero,89e0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    89a4:	e0bffe17 	ldw	r2,-8(fp)
    89a8:	10c00a17 	ldw	r3,40(r2)
    89ac:	e0bffb17 	ldw	r2,-20(fp)
    89b0:	1009883a 	mov	r4,r2
    89b4:	e0bffe17 	ldw	r2,-8(fp)
    89b8:	1885883a 	add	r2,r3,r2
    89bc:	10800e04 	addi	r2,r2,56
    89c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    89c4:	e0bffe17 	ldw	r2,-8(fp)
    89c8:	10800a17 	ldw	r2,40(r2)
    89cc:	10800044 	addi	r2,r2,1
    89d0:	10c1ffcc 	andi	r3,r2,2047
    89d4:	e0bffe17 	ldw	r2,-8(fp)
    89d8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    89dc:	003fe106 	br	8964 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    89e0:	e0bffb17 	ldw	r2,-20(fp)
    89e4:	10bfffec 	andhi	r2,r2,65535
    89e8:	1005003a 	cmpeq	r2,r2,zero
    89ec:	1000101e 	bne	r2,zero,8a30 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    89f0:	e0bffe17 	ldw	r2,-8(fp)
    89f4:	10c00817 	ldw	r3,32(r2)
    89f8:	00bfff84 	movi	r2,-2
    89fc:	1886703a 	and	r3,r3,r2
    8a00:	e0bffe17 	ldw	r2,-8(fp)
    8a04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    8a08:	e0bffd17 	ldw	r2,-12(fp)
    8a0c:	11000104 	addi	r4,r2,4
    8a10:	e0bffe17 	ldw	r2,-8(fp)
    8a14:	10800817 	ldw	r2,32(r2)
    8a18:	1007883a 	mov	r3,r2
    8a1c:	2005883a 	mov	r2,r4
    8a20:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8a24:	e0bffd17 	ldw	r2,-12(fp)
    8a28:	10800104 	addi	r2,r2,4
    8a2c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    8a30:	e0bffc17 	ldw	r2,-16(fp)
    8a34:	1080800c 	andi	r2,r2,512
    8a38:	1005003a 	cmpeq	r2,r2,zero
    8a3c:	103fbb1e 	bne	r2,zero,892c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    8a40:	e0bffc17 	ldw	r2,-16(fp)
    8a44:	10bfffec 	andhi	r2,r2,65535
    8a48:	1004d43a 	srli	r2,r2,16
    8a4c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    8a50:	00001506 	br	8aa8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    8a54:	e13ffd17 	ldw	r4,-12(fp)
    8a58:	e0bffe17 	ldw	r2,-8(fp)
    8a5c:	10c00d17 	ldw	r3,52(r2)
    8a60:	e0bffe17 	ldw	r2,-8(fp)
    8a64:	1885883a 	add	r2,r3,r2
    8a68:	10820e04 	addi	r2,r2,2104
    8a6c:	10800003 	ldbu	r2,0(r2)
    8a70:	10c03fcc 	andi	r3,r2,255
    8a74:	18c0201c 	xori	r3,r3,128
    8a78:	18ffe004 	addi	r3,r3,-128
    8a7c:	2005883a 	mov	r2,r4
    8a80:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8a84:	e0bffe17 	ldw	r2,-8(fp)
    8a88:	10800d17 	ldw	r2,52(r2)
    8a8c:	10800044 	addi	r2,r2,1
    8a90:	10c1ffcc 	andi	r3,r2,2047
    8a94:	e0bffe17 	ldw	r2,-8(fp)
    8a98:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    8a9c:	e0bff917 	ldw	r2,-28(fp)
    8aa0:	10bfffc4 	addi	r2,r2,-1
    8aa4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    8aa8:	e0bff917 	ldw	r2,-28(fp)
    8aac:	1005003a 	cmpeq	r2,r2,zero
    8ab0:	1000051e 	bne	r2,zero,8ac8 <altera_avalon_jtag_uart_irq+0x1c4>
    8ab4:	e0bffe17 	ldw	r2,-8(fp)
    8ab8:	10c00d17 	ldw	r3,52(r2)
    8abc:	e0bffe17 	ldw	r2,-8(fp)
    8ac0:	10800c17 	ldw	r2,48(r2)
    8ac4:	18bfe31e 	bne	r3,r2,8a54 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    8ac8:	e0bff917 	ldw	r2,-28(fp)
    8acc:	1005003a 	cmpeq	r2,r2,zero
    8ad0:	103f961e 	bne	r2,zero,892c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    8ad4:	e0bffe17 	ldw	r2,-8(fp)
    8ad8:	10c00817 	ldw	r3,32(r2)
    8adc:	00bfff44 	movi	r2,-3
    8ae0:	1886703a 	and	r3,r3,r2
    8ae4:	e0bffe17 	ldw	r2,-8(fp)
    8ae8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8aec:	e0bffe17 	ldw	r2,-8(fp)
    8af0:	10800017 	ldw	r2,0(r2)
    8af4:	11000104 	addi	r4,r2,4
    8af8:	e0bffe17 	ldw	r2,-8(fp)
    8afc:	10800817 	ldw	r2,32(r2)
    8b00:	1007883a 	mov	r3,r2
    8b04:	2005883a 	mov	r2,r4
    8b08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8b0c:	e0bffd17 	ldw	r2,-12(fp)
    8b10:	10800104 	addi	r2,r2,4
    8b14:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    8b18:	003f8406 	br	892c <altera_avalon_jtag_uart_irq+0x28>
}
    8b1c:	e037883a 	mov	sp,fp
    8b20:	df000017 	ldw	fp,0(sp)
    8b24:	dec00104 	addi	sp,sp,4
    8b28:	f800283a 	ret

00008b2c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    8b2c:	defffc04 	addi	sp,sp,-16
    8b30:	df000315 	stw	fp,12(sp)
    8b34:	df000304 	addi	fp,sp,12
    8b38:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    8b3c:	e0bfff17 	ldw	r2,-4(fp)
    8b40:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    8b44:	e0bffe17 	ldw	r2,-8(fp)
    8b48:	10800017 	ldw	r2,0(r2)
    8b4c:	10800104 	addi	r2,r2,4
    8b50:	10800037 	ldwio	r2,0(r2)
    8b54:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    8b58:	e0bffd17 	ldw	r2,-12(fp)
    8b5c:	1081000c 	andi	r2,r2,1024
    8b60:	1005003a 	cmpeq	r2,r2,zero
    8b64:	10000c1e 	bne	r2,zero,8b98 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    8b68:	e0bffe17 	ldw	r2,-8(fp)
    8b6c:	10800017 	ldw	r2,0(r2)
    8b70:	11000104 	addi	r4,r2,4
    8b74:	e0bffe17 	ldw	r2,-8(fp)
    8b78:	10800817 	ldw	r2,32(r2)
    8b7c:	10810014 	ori	r2,r2,1024
    8b80:	1007883a 	mov	r3,r2
    8b84:	2005883a 	mov	r2,r4
    8b88:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    8b8c:	e0bffe17 	ldw	r2,-8(fp)
    8b90:	10000915 	stw	zero,36(r2)
    8b94:	00000a06 	br	8bc0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    8b98:	e0bffe17 	ldw	r2,-8(fp)
    8b9c:	10c00917 	ldw	r3,36(r2)
    8ba0:	00a00034 	movhi	r2,32768
    8ba4:	10bfff04 	addi	r2,r2,-4
    8ba8:	10c00536 	bltu	r2,r3,8bc0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    8bac:	e0bffe17 	ldw	r2,-8(fp)
    8bb0:	10800917 	ldw	r2,36(r2)
    8bb4:	10c00044 	addi	r3,r2,1
    8bb8:	e0bffe17 	ldw	r2,-8(fp)
    8bbc:	10c00915 	stw	r3,36(r2)
    8bc0:	00800074 	movhi	r2,1
    8bc4:	10b7dc04 	addi	r2,r2,-8336
    8bc8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    8bcc:	e037883a 	mov	sp,fp
    8bd0:	df000017 	ldw	fp,0(sp)
    8bd4:	dec00104 	addi	sp,sp,4
    8bd8:	f800283a 	ret

00008bdc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    8bdc:	defffc04 	addi	sp,sp,-16
    8be0:	df000315 	stw	fp,12(sp)
    8be4:	df000304 	addi	fp,sp,12
    8be8:	e13ffd15 	stw	r4,-12(fp)
    8bec:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8bf0:	00000706 	br	8c10 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    8bf4:	e0bffe17 	ldw	r2,-8(fp)
    8bf8:	1090000c 	andi	r2,r2,16384
    8bfc:	1005003a 	cmpeq	r2,r2,zero
    8c00:	1000031e 	bne	r2,zero,8c10 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    8c04:	00bffd44 	movi	r2,-11
    8c08:	e0bfff15 	stw	r2,-4(fp)
    8c0c:	00000b06 	br	8c3c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8c10:	e0bffd17 	ldw	r2,-12(fp)
    8c14:	10c00d17 	ldw	r3,52(r2)
    8c18:	e0bffd17 	ldw	r2,-12(fp)
    8c1c:	10800c17 	ldw	r2,48(r2)
    8c20:	18800526 	beq	r3,r2,8c38 <altera_avalon_jtag_uart_close+0x5c>
    8c24:	e0bffd17 	ldw	r2,-12(fp)
    8c28:	10c00917 	ldw	r3,36(r2)
    8c2c:	e0bffd17 	ldw	r2,-12(fp)
    8c30:	10800117 	ldw	r2,4(r2)
    8c34:	18bfef36 	bltu	r3,r2,8bf4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    8c38:	e03fff15 	stw	zero,-4(fp)
    8c3c:	e0bfff17 	ldw	r2,-4(fp)
}
    8c40:	e037883a 	mov	sp,fp
    8c44:	df000017 	ldw	fp,0(sp)
    8c48:	dec00104 	addi	sp,sp,4
    8c4c:	f800283a 	ret

00008c50 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    8c50:	defff804 	addi	sp,sp,-32
    8c54:	df000715 	stw	fp,28(sp)
    8c58:	df000704 	addi	fp,sp,28
    8c5c:	e13ffb15 	stw	r4,-20(fp)
    8c60:	e17ffc15 	stw	r5,-16(fp)
    8c64:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    8c68:	00bff9c4 	movi	r2,-25
    8c6c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    8c70:	e0bffc17 	ldw	r2,-16(fp)
    8c74:	e0bfff15 	stw	r2,-4(fp)
    8c78:	e0ffff17 	ldw	r3,-4(fp)
    8c7c:	189a8060 	cmpeqi	r2,r3,27137
    8c80:	1000041e 	bne	r2,zero,8c94 <altera_avalon_jtag_uart_ioctl+0x44>
    8c84:	e0ffff17 	ldw	r3,-4(fp)
    8c88:	189a80a0 	cmpeqi	r2,r3,27138
    8c8c:	10001b1e 	bne	r2,zero,8cfc <altera_avalon_jtag_uart_ioctl+0xac>
    8c90:	00002706 	br	8d30 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    8c94:	e0bffb17 	ldw	r2,-20(fp)
    8c98:	10c00117 	ldw	r3,4(r2)
    8c9c:	00a00034 	movhi	r2,32768
    8ca0:	10bfffc4 	addi	r2,r2,-1
    8ca4:	18802226 	beq	r3,r2,8d30 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    8ca8:	e0bffd17 	ldw	r2,-12(fp)
    8cac:	10800017 	ldw	r2,0(r2)
    8cb0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    8cb4:	e0bff917 	ldw	r2,-28(fp)
    8cb8:	10800090 	cmplti	r2,r2,2
    8cbc:	1000071e 	bne	r2,zero,8cdc <altera_avalon_jtag_uart_ioctl+0x8c>
    8cc0:	e0fff917 	ldw	r3,-28(fp)
    8cc4:	00a00034 	movhi	r2,32768
    8cc8:	10bfffc4 	addi	r2,r2,-1
    8ccc:	18800326 	beq	r3,r2,8cdc <altera_avalon_jtag_uart_ioctl+0x8c>
    8cd0:	e0bff917 	ldw	r2,-28(fp)
    8cd4:	e0bffe15 	stw	r2,-8(fp)
    8cd8:	00000306 	br	8ce8 <altera_avalon_jtag_uart_ioctl+0x98>
    8cdc:	00e00034 	movhi	r3,32768
    8ce0:	18ffff84 	addi	r3,r3,-2
    8ce4:	e0fffe15 	stw	r3,-8(fp)
    8ce8:	e0bffb17 	ldw	r2,-20(fp)
    8cec:	e0fffe17 	ldw	r3,-8(fp)
    8cf0:	10c00115 	stw	r3,4(r2)
      rc = 0;
    8cf4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    8cf8:	00000d06 	br	8d30 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    8cfc:	e0bffb17 	ldw	r2,-20(fp)
    8d00:	10c00117 	ldw	r3,4(r2)
    8d04:	00a00034 	movhi	r2,32768
    8d08:	10bfffc4 	addi	r2,r2,-1
    8d0c:	18800826 	beq	r3,r2,8d30 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    8d10:	e13ffd17 	ldw	r4,-12(fp)
    8d14:	e0bffb17 	ldw	r2,-20(fp)
    8d18:	10c00917 	ldw	r3,36(r2)
    8d1c:	e0bffb17 	ldw	r2,-20(fp)
    8d20:	10800117 	ldw	r2,4(r2)
    8d24:	1885803a 	cmpltu	r2,r3,r2
    8d28:	20800015 	stw	r2,0(r4)
      rc = 0;
    8d2c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    8d30:	e0bffa17 	ldw	r2,-24(fp)
}
    8d34:	e037883a 	mov	sp,fp
    8d38:	df000017 	ldw	fp,0(sp)
    8d3c:	dec00104 	addi	sp,sp,4
    8d40:	f800283a 	ret

00008d44 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    8d44:	defff204 	addi	sp,sp,-56
    8d48:	dfc00d15 	stw	ra,52(sp)
    8d4c:	df000c15 	stw	fp,48(sp)
    8d50:	df000c04 	addi	fp,sp,48
    8d54:	e13ffb15 	stw	r4,-20(fp)
    8d58:	e17ffc15 	stw	r5,-16(fp)
    8d5c:	e1bffd15 	stw	r6,-12(fp)
    8d60:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    8d64:	e0bffc17 	ldw	r2,-16(fp)
    8d68:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8d6c:	00004806 	br	8e90 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    8d70:	e0bffb17 	ldw	r2,-20(fp)
    8d74:	10800a17 	ldw	r2,40(r2)
    8d78:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    8d7c:	e0bffb17 	ldw	r2,-20(fp)
    8d80:	10800b17 	ldw	r2,44(r2)
    8d84:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    8d88:	e0fff717 	ldw	r3,-36(fp)
    8d8c:	e0bff617 	ldw	r2,-40(fp)
    8d90:	18800536 	bltu	r3,r2,8da8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    8d94:	e0bff717 	ldw	r2,-36(fp)
    8d98:	e0fff617 	ldw	r3,-40(fp)
    8d9c:	10c5c83a 	sub	r2,r2,r3
    8da0:	e0bff815 	stw	r2,-32(fp)
    8da4:	00000406 	br	8db8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    8da8:	00820004 	movi	r2,2048
    8dac:	e0fff617 	ldw	r3,-40(fp)
    8db0:	10c5c83a 	sub	r2,r2,r3
    8db4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    8db8:	e0bff817 	ldw	r2,-32(fp)
    8dbc:	1005003a 	cmpeq	r2,r2,zero
    8dc0:	10001f1e 	bne	r2,zero,8e40 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    8dc4:	e0fffd17 	ldw	r3,-12(fp)
    8dc8:	e0bff817 	ldw	r2,-32(fp)
    8dcc:	1880022e 	bgeu	r3,r2,8dd8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    8dd0:	e0bffd17 	ldw	r2,-12(fp)
    8dd4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    8dd8:	e0bffb17 	ldw	r2,-20(fp)
    8ddc:	10c00e04 	addi	r3,r2,56
    8de0:	e0bff617 	ldw	r2,-40(fp)
    8de4:	1887883a 	add	r3,r3,r2
    8de8:	e0bffa17 	ldw	r2,-24(fp)
    8dec:	1009883a 	mov	r4,r2
    8df0:	180b883a 	mov	r5,r3
    8df4:	e1bff817 	ldw	r6,-32(fp)
    8df8:	000accc0 	call	accc <memcpy>
      ptr   += n;
    8dfc:	e0fff817 	ldw	r3,-32(fp)
    8e00:	e0bffa17 	ldw	r2,-24(fp)
    8e04:	10c5883a 	add	r2,r2,r3
    8e08:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    8e0c:	e0fffd17 	ldw	r3,-12(fp)
    8e10:	e0bff817 	ldw	r2,-32(fp)
    8e14:	1885c83a 	sub	r2,r3,r2
    8e18:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8e1c:	e0fff617 	ldw	r3,-40(fp)
    8e20:	e0bff817 	ldw	r2,-32(fp)
    8e24:	1885883a 	add	r2,r3,r2
    8e28:	10c1ffcc 	andi	r3,r2,2047
    8e2c:	e0bffb17 	ldw	r2,-20(fp)
    8e30:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    8e34:	e0bffd17 	ldw	r2,-12(fp)
    8e38:	10800048 	cmpgei	r2,r2,1
    8e3c:	103fcc1e 	bne	r2,zero,8d70 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    8e40:	e0fffa17 	ldw	r3,-24(fp)
    8e44:	e0bffc17 	ldw	r2,-16(fp)
    8e48:	1880141e 	bne	r3,r2,8e9c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    8e4c:	e0bffe17 	ldw	r2,-8(fp)
    8e50:	1090000c 	andi	r2,r2,16384
    8e54:	1004c03a 	cmpne	r2,r2,zero
    8e58:	1000101e 	bne	r2,zero,8e9c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    8e5c:	e0bffb17 	ldw	r2,-20(fp)
    8e60:	10c00a17 	ldw	r3,40(r2)
    8e64:	e0bff717 	ldw	r2,-36(fp)
    8e68:	1880051e 	bne	r3,r2,8e80 <altera_avalon_jtag_uart_read+0x13c>
    8e6c:	e0bffb17 	ldw	r2,-20(fp)
    8e70:	10c00917 	ldw	r3,36(r2)
    8e74:	e0bffb17 	ldw	r2,-20(fp)
    8e78:	10800117 	ldw	r2,4(r2)
    8e7c:	18bff736 	bltu	r3,r2,8e5c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    8e80:	e0bffb17 	ldw	r2,-20(fp)
    8e84:	10c00a17 	ldw	r3,40(r2)
    8e88:	e0bff717 	ldw	r2,-36(fp)
    8e8c:	18800326 	beq	r3,r2,8e9c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8e90:	e0bffd17 	ldw	r2,-12(fp)
    8e94:	10800048 	cmpgei	r2,r2,1
    8e98:	103fb51e 	bne	r2,zero,8d70 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    8e9c:	e0fffa17 	ldw	r3,-24(fp)
    8ea0:	e0bffc17 	ldw	r2,-16(fp)
    8ea4:	18801926 	beq	r3,r2,8f0c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ea8:	0005303a 	rdctl	r2,status
    8eac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8eb0:	e0fff517 	ldw	r3,-44(fp)
    8eb4:	00bfff84 	movi	r2,-2
    8eb8:	1884703a 	and	r2,r3,r2
    8ebc:	1001703a 	wrctl	status,r2
  
  return context;
    8ec0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    8ec4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8ec8:	e0bffb17 	ldw	r2,-20(fp)
    8ecc:	10800817 	ldw	r2,32(r2)
    8ed0:	10c00054 	ori	r3,r2,1
    8ed4:	e0bffb17 	ldw	r2,-20(fp)
    8ed8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8edc:	e0bffb17 	ldw	r2,-20(fp)
    8ee0:	10800017 	ldw	r2,0(r2)
    8ee4:	11000104 	addi	r4,r2,4
    8ee8:	e0bffb17 	ldw	r2,-20(fp)
    8eec:	10800817 	ldw	r2,32(r2)
    8ef0:	1007883a 	mov	r3,r2
    8ef4:	2005883a 	mov	r2,r4
    8ef8:	10c00035 	stwio	r3,0(r2)
    8efc:	e0bff917 	ldw	r2,-28(fp)
    8f00:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8f04:	e0bff417 	ldw	r2,-48(fp)
    8f08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    8f0c:	e0fffa17 	ldw	r3,-24(fp)
    8f10:	e0bffc17 	ldw	r2,-16(fp)
    8f14:	18800526 	beq	r3,r2,8f2c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    8f18:	e0fffa17 	ldw	r3,-24(fp)
    8f1c:	e0bffc17 	ldw	r2,-16(fp)
    8f20:	1887c83a 	sub	r3,r3,r2
    8f24:	e0ffff15 	stw	r3,-4(fp)
    8f28:	00000906 	br	8f50 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    8f2c:	e0bffe17 	ldw	r2,-8(fp)
    8f30:	1090000c 	andi	r2,r2,16384
    8f34:	1005003a 	cmpeq	r2,r2,zero
    8f38:	1000031e 	bne	r2,zero,8f48 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    8f3c:	00bffd44 	movi	r2,-11
    8f40:	e0bfff15 	stw	r2,-4(fp)
    8f44:	00000206 	br	8f50 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    8f48:	00bffec4 	movi	r2,-5
    8f4c:	e0bfff15 	stw	r2,-4(fp)
    8f50:	e0bfff17 	ldw	r2,-4(fp)
}
    8f54:	e037883a 	mov	sp,fp
    8f58:	dfc00117 	ldw	ra,4(sp)
    8f5c:	df000017 	ldw	fp,0(sp)
    8f60:	dec00204 	addi	sp,sp,8
    8f64:	f800283a 	ret

00008f68 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8f68:	defff204 	addi	sp,sp,-56
    8f6c:	dfc00d15 	stw	ra,52(sp)
    8f70:	df000c15 	stw	fp,48(sp)
    8f74:	df000c04 	addi	fp,sp,48
    8f78:	e13ffb15 	stw	r4,-20(fp)
    8f7c:	e17ffc15 	stw	r5,-16(fp)
    8f80:	e1bffd15 	stw	r6,-12(fp)
    8f84:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    8f88:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    8f8c:	e0bffc17 	ldw	r2,-16(fp)
    8f90:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    8f94:	00003a06 	br	9080 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    8f98:	e0bffb17 	ldw	r2,-20(fp)
    8f9c:	10800c17 	ldw	r2,48(r2)
    8fa0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    8fa4:	e0bffb17 	ldw	r2,-20(fp)
    8fa8:	10800d17 	ldw	r2,52(r2)
    8fac:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    8fb0:	e0fffa17 	ldw	r3,-24(fp)
    8fb4:	e0bff917 	ldw	r2,-28(fp)
    8fb8:	1880062e 	bgeu	r3,r2,8fd4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    8fbc:	e0fff917 	ldw	r3,-28(fp)
    8fc0:	e0bffa17 	ldw	r2,-24(fp)
    8fc4:	1885c83a 	sub	r2,r3,r2
    8fc8:	10bfffc4 	addi	r2,r2,-1
    8fcc:	e0bff815 	stw	r2,-32(fp)
    8fd0:	00000c06 	br	9004 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    8fd4:	e0bff917 	ldw	r2,-28(fp)
    8fd8:	1005003a 	cmpeq	r2,r2,zero
    8fdc:	1000051e 	bne	r2,zero,8ff4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    8fe0:	00820004 	movi	r2,2048
    8fe4:	e0fffa17 	ldw	r3,-24(fp)
    8fe8:	10c5c83a 	sub	r2,r2,r3
    8fec:	e0bff815 	stw	r2,-32(fp)
    8ff0:	00000406 	br	9004 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    8ff4:	0081ffc4 	movi	r2,2047
    8ff8:	e0fffa17 	ldw	r3,-24(fp)
    8ffc:	10c5c83a 	sub	r2,r2,r3
    9000:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    9004:	e0bff817 	ldw	r2,-32(fp)
    9008:	1005003a 	cmpeq	r2,r2,zero
    900c:	10001f1e 	bne	r2,zero,908c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    9010:	e0fffd17 	ldw	r3,-12(fp)
    9014:	e0bff817 	ldw	r2,-32(fp)
    9018:	1880022e 	bgeu	r3,r2,9024 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    901c:	e0bffd17 	ldw	r2,-12(fp)
    9020:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    9024:	e0bffb17 	ldw	r2,-20(fp)
    9028:	10c20e04 	addi	r3,r2,2104
    902c:	e0bffa17 	ldw	r2,-24(fp)
    9030:	1885883a 	add	r2,r3,r2
    9034:	e0fffc17 	ldw	r3,-16(fp)
    9038:	1009883a 	mov	r4,r2
    903c:	180b883a 	mov	r5,r3
    9040:	e1bff817 	ldw	r6,-32(fp)
    9044:	000accc0 	call	accc <memcpy>
      ptr   += n;
    9048:	e0fff817 	ldw	r3,-32(fp)
    904c:	e0bffc17 	ldw	r2,-16(fp)
    9050:	10c5883a 	add	r2,r2,r3
    9054:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    9058:	e0fffd17 	ldw	r3,-12(fp)
    905c:	e0bff817 	ldw	r2,-32(fp)
    9060:	1885c83a 	sub	r2,r3,r2
    9064:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9068:	e0fffa17 	ldw	r3,-24(fp)
    906c:	e0bff817 	ldw	r2,-32(fp)
    9070:	1885883a 	add	r2,r3,r2
    9074:	10c1ffcc 	andi	r3,r2,2047
    9078:	e0bffb17 	ldw	r2,-20(fp)
    907c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    9080:	e0bffd17 	ldw	r2,-12(fp)
    9084:	10800048 	cmpgei	r2,r2,1
    9088:	103fc31e 	bne	r2,zero,8f98 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    908c:	0005303a 	rdctl	r2,status
    9090:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9094:	e0fff517 	ldw	r3,-44(fp)
    9098:	00bfff84 	movi	r2,-2
    909c:	1884703a 	and	r2,r3,r2
    90a0:	1001703a 	wrctl	status,r2
  
  return context;
    90a4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    90a8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    90ac:	e0bffb17 	ldw	r2,-20(fp)
    90b0:	10800817 	ldw	r2,32(r2)
    90b4:	10c00094 	ori	r3,r2,2
    90b8:	e0bffb17 	ldw	r2,-20(fp)
    90bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    90c0:	e0bffb17 	ldw	r2,-20(fp)
    90c4:	10800017 	ldw	r2,0(r2)
    90c8:	11000104 	addi	r4,r2,4
    90cc:	e0bffb17 	ldw	r2,-20(fp)
    90d0:	10800817 	ldw	r2,32(r2)
    90d4:	1007883a 	mov	r3,r2
    90d8:	2005883a 	mov	r2,r4
    90dc:	10c00035 	stwio	r3,0(r2)
    90e0:	e0bff717 	ldw	r2,-36(fp)
    90e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    90e8:	e0bff417 	ldw	r2,-48(fp)
    90ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    90f0:	e0bffd17 	ldw	r2,-12(fp)
    90f4:	10800050 	cmplti	r2,r2,1
    90f8:	1000111e 	bne	r2,zero,9140 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    90fc:	e0bffe17 	ldw	r2,-8(fp)
    9100:	1090000c 	andi	r2,r2,16384
    9104:	1004c03a 	cmpne	r2,r2,zero
    9108:	1000101e 	bne	r2,zero,914c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    910c:	e0bffb17 	ldw	r2,-20(fp)
    9110:	10c00d17 	ldw	r3,52(r2)
    9114:	e0bff917 	ldw	r2,-28(fp)
    9118:	1880051e 	bne	r3,r2,9130 <altera_avalon_jtag_uart_write+0x1c8>
    911c:	e0bffb17 	ldw	r2,-20(fp)
    9120:	10c00917 	ldw	r3,36(r2)
    9124:	e0bffb17 	ldw	r2,-20(fp)
    9128:	10800117 	ldw	r2,4(r2)
    912c:	18bff736 	bltu	r3,r2,910c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    9130:	e0bffb17 	ldw	r2,-20(fp)
    9134:	10c00d17 	ldw	r3,52(r2)
    9138:	e0bff917 	ldw	r2,-28(fp)
    913c:	18800326 	beq	r3,r2,914c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    9140:	e0bffd17 	ldw	r2,-12(fp)
    9144:	10800048 	cmpgei	r2,r2,1
    9148:	103fcd1e 	bne	r2,zero,9080 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    914c:	e0fffc17 	ldw	r3,-16(fp)
    9150:	e0bff617 	ldw	r2,-40(fp)
    9154:	18800526 	beq	r3,r2,916c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    9158:	e0fffc17 	ldw	r3,-16(fp)
    915c:	e0bff617 	ldw	r2,-40(fp)
    9160:	1887c83a 	sub	r3,r3,r2
    9164:	e0ffff15 	stw	r3,-4(fp)
    9168:	00000906 	br	9190 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    916c:	e0bffe17 	ldw	r2,-8(fp)
    9170:	1090000c 	andi	r2,r2,16384
    9174:	1005003a 	cmpeq	r2,r2,zero
    9178:	1000031e 	bne	r2,zero,9188 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    917c:	00bffd44 	movi	r2,-11
    9180:	e0bfff15 	stw	r2,-4(fp)
    9184:	00000206 	br	9190 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    9188:	00bffec4 	movi	r2,-5
    918c:	e0bfff15 	stw	r2,-4(fp)
    9190:	e0bfff17 	ldw	r2,-4(fp)
}
    9194:	e037883a 	mov	sp,fp
    9198:	dfc00117 	ldw	ra,4(sp)
    919c:	df000017 	ldw	fp,0(sp)
    91a0:	dec00204 	addi	sp,sp,8
    91a4:	f800283a 	ret

000091a8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    91a8:	defffa04 	addi	sp,sp,-24
    91ac:	dfc00515 	stw	ra,20(sp)
    91b0:	df000415 	stw	fp,16(sp)
    91b4:	df000404 	addi	fp,sp,16
    91b8:	e13ffd15 	stw	r4,-12(fp)
    91bc:	e17ffe15 	stw	r5,-8(fp)
    91c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    91c4:	e0bffd17 	ldw	r2,-12(fp)
    91c8:	10800017 	ldw	r2,0(r2)
    91cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    91d0:	e0bffc17 	ldw	r2,-16(fp)
    91d4:	11000a04 	addi	r4,r2,40
    91d8:	e0bffd17 	ldw	r2,-12(fp)
    91dc:	11c00217 	ldw	r7,8(r2)
    91e0:	e17ffe17 	ldw	r5,-8(fp)
    91e4:	e1bfff17 	ldw	r6,-4(fp)
    91e8:	00096a00 	call	96a0 <altera_avalon_uart_read>
      fd->fd_flags);
}
    91ec:	e037883a 	mov	sp,fp
    91f0:	dfc00117 	ldw	ra,4(sp)
    91f4:	df000017 	ldw	fp,0(sp)
    91f8:	dec00204 	addi	sp,sp,8
    91fc:	f800283a 	ret

00009200 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9200:	defffa04 	addi	sp,sp,-24
    9204:	dfc00515 	stw	ra,20(sp)
    9208:	df000415 	stw	fp,16(sp)
    920c:	df000404 	addi	fp,sp,16
    9210:	e13ffd15 	stw	r4,-12(fp)
    9214:	e17ffe15 	stw	r5,-8(fp)
    9218:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    921c:	e0bffd17 	ldw	r2,-12(fp)
    9220:	10800017 	ldw	r2,0(r2)
    9224:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    9228:	e0bffc17 	ldw	r2,-16(fp)
    922c:	11000a04 	addi	r4,r2,40
    9230:	e0bffd17 	ldw	r2,-12(fp)
    9234:	11c00217 	ldw	r7,8(r2)
    9238:	e17ffe17 	ldw	r5,-8(fp)
    923c:	e1bfff17 	ldw	r6,-4(fp)
    9240:	00099300 	call	9930 <altera_avalon_uart_write>
      fd->fd_flags);
}
    9244:	e037883a 	mov	sp,fp
    9248:	dfc00117 	ldw	ra,4(sp)
    924c:	df000017 	ldw	fp,0(sp)
    9250:	dec00204 	addi	sp,sp,8
    9254:	f800283a 	ret

00009258 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    9258:	defffc04 	addi	sp,sp,-16
    925c:	dfc00315 	stw	ra,12(sp)
    9260:	df000215 	stw	fp,8(sp)
    9264:	df000204 	addi	fp,sp,8
    9268:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    926c:	e0bfff17 	ldw	r2,-4(fp)
    9270:	10800017 	ldw	r2,0(r2)
    9274:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    9278:	e0bffe17 	ldw	r2,-8(fp)
    927c:	11000a04 	addi	r4,r2,40
    9280:	e0bfff17 	ldw	r2,-4(fp)
    9284:	11400217 	ldw	r5,8(r2)
    9288:	00096400 	call	9640 <altera_avalon_uart_close>
}
    928c:	e037883a 	mov	sp,fp
    9290:	dfc00117 	ldw	ra,4(sp)
    9294:	df000017 	ldw	fp,0(sp)
    9298:	dec00204 	addi	sp,sp,8
    929c:	f800283a 	ret

000092a0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    92a0:	defff704 	addi	sp,sp,-36
    92a4:	dfc00815 	stw	ra,32(sp)
    92a8:	df000715 	stw	fp,28(sp)
    92ac:	df000704 	addi	fp,sp,28
    92b0:	e13ffc15 	stw	r4,-16(fp)
    92b4:	e17ffd15 	stw	r5,-12(fp)
    92b8:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    92bc:	e0bffc17 	ldw	r2,-16(fp)
    92c0:	10800017 	ldw	r2,0(r2)
    92c4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    92c8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    92cc:	1004c03a 	cmpne	r2,r2,zero
    92d0:	1000061e 	bne	r2,zero,92ec <altera_avalon_uart_init+0x4c>
    92d4:	0005883a 	mov	r2,zero
    92d8:	1004c03a 	cmpne	r2,r2,zero
    92dc:	1000031e 	bne	r2,zero,92ec <altera_avalon_uart_init+0x4c>
    92e0:	0005883a 	mov	r2,zero
    92e4:	1005003a 	cmpeq	r2,r2,zero
    92e8:	1000031e 	bne	r2,zero,92f8 <altera_avalon_uart_init+0x58>
    92ec:	00800044 	movi	r2,1
    92f0:	e0bfff15 	stw	r2,-4(fp)
    92f4:	00000106 	br	92fc <altera_avalon_uart_init+0x5c>
    92f8:	e03fff15 	stw	zero,-4(fp)
    92fc:	e0bfff17 	ldw	r2,-4(fp)
    9300:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    9304:	e0bffa17 	ldw	r2,-24(fp)
    9308:	1004c03a 	cmpne	r2,r2,zero
    930c:	1000111e 	bne	r2,zero,9354 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    9310:	e0fffc17 	ldw	r3,-16(fp)
    9314:	00832004 	movi	r2,3200
    9318:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    931c:	e0bffb17 	ldw	r2,-20(fp)
    9320:	11000304 	addi	r4,r2,12
    9324:	e0bffc17 	ldw	r2,-16(fp)
    9328:	10800117 	ldw	r2,4(r2)
    932c:	1007883a 	mov	r3,r2
    9330:	2005883a 	mov	r2,r4
    9334:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    9338:	d8000015 	stw	zero,0(sp)
    933c:	e13ffd17 	ldw	r4,-12(fp)
    9340:	e17ffe17 	ldw	r5,-8(fp)
    9344:	01800074 	movhi	r6,1
    9348:	31a4da04 	addi	r6,r6,-27800
    934c:	e1fffc17 	ldw	r7,-16(fp)
    9350:	000a04c0 	call	a04c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    9354:	e037883a 	mov	sp,fp
    9358:	dfc00117 	ldw	ra,4(sp)
    935c:	df000017 	ldw	fp,0(sp)
    9360:	dec00204 	addi	sp,sp,8
    9364:	f800283a 	ret

00009368 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    9368:	defffa04 	addi	sp,sp,-24
    936c:	dfc00515 	stw	ra,20(sp)
    9370:	df000415 	stw	fp,16(sp)
    9374:	df000404 	addi	fp,sp,16
    9378:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    937c:	e0bfff17 	ldw	r2,-4(fp)
    9380:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    9384:	e0bffd17 	ldw	r2,-12(fp)
    9388:	10800017 	ldw	r2,0(r2)
    938c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    9390:	e0bffc17 	ldw	r2,-16(fp)
    9394:	10800204 	addi	r2,r2,8
    9398:	10800037 	ldwio	r2,0(r2)
    939c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    93a0:	e0bffc17 	ldw	r2,-16(fp)
    93a4:	10800204 	addi	r2,r2,8
    93a8:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    93ac:	e0bffc17 	ldw	r2,-16(fp)
    93b0:	10800204 	addi	r2,r2,8
    93b4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    93b8:	e0bffe17 	ldw	r2,-8(fp)
    93bc:	1080200c 	andi	r2,r2,128
    93c0:	1005003a 	cmpeq	r2,r2,zero
    93c4:	1000031e 	bne	r2,zero,93d4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    93c8:	e13ffd17 	ldw	r4,-12(fp)
    93cc:	e17ffe17 	ldw	r5,-8(fp)
    93d0:	00094040 	call	9404 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    93d4:	e0bffe17 	ldw	r2,-8(fp)
    93d8:	1081100c 	andi	r2,r2,1088
    93dc:	1005003a 	cmpeq	r2,r2,zero
    93e0:	1000031e 	bne	r2,zero,93f0 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    93e4:	e13ffd17 	ldw	r4,-12(fp)
    93e8:	e17ffe17 	ldw	r5,-8(fp)
    93ec:	00094e40 	call	94e4 <altera_avalon_uart_txirq>
  }
  

}
    93f0:	e037883a 	mov	sp,fp
    93f4:	dfc00117 	ldw	ra,4(sp)
    93f8:	df000017 	ldw	fp,0(sp)
    93fc:	dec00204 	addi	sp,sp,8
    9400:	f800283a 	ret

00009404 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    9404:	defffc04 	addi	sp,sp,-16
    9408:	df000315 	stw	fp,12(sp)
    940c:	df000304 	addi	fp,sp,12
    9410:	e13ffe15 	stw	r4,-8(fp)
    9414:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    9418:	e0bfff17 	ldw	r2,-4(fp)
    941c:	108000cc 	andi	r2,r2,3
    9420:	1004c03a 	cmpne	r2,r2,zero
    9424:	10002b1e 	bne	r2,zero,94d4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    9428:	e0bffe17 	ldw	r2,-8(fp)
    942c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    9430:	e0bffe17 	ldw	r2,-8(fp)
    9434:	10800317 	ldw	r2,12(r2)
    9438:	10800044 	addi	r2,r2,1
    943c:	10800fcc 	andi	r2,r2,63
    9440:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    9444:	e0bffe17 	ldw	r2,-8(fp)
    9448:	11000317 	ldw	r4,12(r2)
    944c:	e0bffe17 	ldw	r2,-8(fp)
    9450:	10800017 	ldw	r2,0(r2)
    9454:	10800037 	ldwio	r2,0(r2)
    9458:	1007883a 	mov	r3,r2
    945c:	e0bffe17 	ldw	r2,-8(fp)
    9460:	2085883a 	add	r2,r4,r2
    9464:	10800704 	addi	r2,r2,28
    9468:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    946c:	e0fffe17 	ldw	r3,-8(fp)
    9470:	e0bffd17 	ldw	r2,-12(fp)
    9474:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    9478:	e0bffe17 	ldw	r2,-8(fp)
    947c:	10800317 	ldw	r2,12(r2)
    9480:	10800044 	addi	r2,r2,1
    9484:	10800fcc 	andi	r2,r2,63
    9488:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    948c:	e0bffe17 	ldw	r2,-8(fp)
    9490:	10c00217 	ldw	r3,8(r2)
    9494:	e0bffd17 	ldw	r2,-12(fp)
    9498:	18800e1e 	bne	r3,r2,94d4 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    949c:	e0bffe17 	ldw	r2,-8(fp)
    94a0:	10c00117 	ldw	r3,4(r2)
    94a4:	00bfdfc4 	movi	r2,-129
    94a8:	1886703a 	and	r3,r3,r2
    94ac:	e0bffe17 	ldw	r2,-8(fp)
    94b0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    94b4:	e0bffe17 	ldw	r2,-8(fp)
    94b8:	10800017 	ldw	r2,0(r2)
    94bc:	11000304 	addi	r4,r2,12
    94c0:	e0bffe17 	ldw	r2,-8(fp)
    94c4:	10800117 	ldw	r2,4(r2)
    94c8:	1007883a 	mov	r3,r2
    94cc:	2005883a 	mov	r2,r4
    94d0:	10c00035 	stwio	r3,0(r2)
  }   
}
    94d4:	e037883a 	mov	sp,fp
    94d8:	df000017 	ldw	fp,0(sp)
    94dc:	dec00104 	addi	sp,sp,4
    94e0:	f800283a 	ret

000094e4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    94e4:	defffd04 	addi	sp,sp,-12
    94e8:	df000215 	stw	fp,8(sp)
    94ec:	df000204 	addi	fp,sp,8
    94f0:	e13ffe15 	stw	r4,-8(fp)
    94f4:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    94f8:	e0bffe17 	ldw	r2,-8(fp)
    94fc:	10c00417 	ldw	r3,16(r2)
    9500:	e0bffe17 	ldw	r2,-8(fp)
    9504:	10800517 	ldw	r2,20(r2)
    9508:	18803626 	beq	r3,r2,95e4 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    950c:	e0bffe17 	ldw	r2,-8(fp)
    9510:	10800617 	ldw	r2,24(r2)
    9514:	1080008c 	andi	r2,r2,2
    9518:	1005003a 	cmpeq	r2,r2,zero
    951c:	1000041e 	bne	r2,zero,9530 <altera_avalon_uart_txirq+0x4c>
    9520:	e0bfff17 	ldw	r2,-4(fp)
    9524:	1082000c 	andi	r2,r2,2048
    9528:	1005003a 	cmpeq	r2,r2,zero
    952c:	10001e1e 	bne	r2,zero,95a8 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    9530:	e0bffe17 	ldw	r2,-8(fp)
    9534:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    9538:	e0bffe17 	ldw	r2,-8(fp)
    953c:	10800017 	ldw	r2,0(r2)
    9540:	11000104 	addi	r4,r2,4
    9544:	e0bffe17 	ldw	r2,-8(fp)
    9548:	10c00417 	ldw	r3,16(r2)
    954c:	e0bffe17 	ldw	r2,-8(fp)
    9550:	1885883a 	add	r2,r3,r2
    9554:	10801704 	addi	r2,r2,92
    9558:	10800003 	ldbu	r2,0(r2)
    955c:	10c03fcc 	andi	r3,r2,255
    9560:	2005883a 	mov	r2,r4
    9564:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    9568:	e0bffe17 	ldw	r2,-8(fp)
    956c:	10800417 	ldw	r2,16(r2)
    9570:	10c00044 	addi	r3,r2,1
    9574:	e0bffe17 	ldw	r2,-8(fp)
    9578:	10c00415 	stw	r3,16(r2)
    957c:	e0bffe17 	ldw	r2,-8(fp)
    9580:	10800417 	ldw	r2,16(r2)
    9584:	10c00fcc 	andi	r3,r2,63
    9588:	e0bffe17 	ldw	r2,-8(fp)
    958c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    9590:	e0bffe17 	ldw	r2,-8(fp)
    9594:	10800117 	ldw	r2,4(r2)
    9598:	10c01014 	ori	r3,r2,64
    959c:	e0bffe17 	ldw	r2,-8(fp)
    95a0:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    95a4:	00000f06 	br	95e4 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    95a8:	e0bffe17 	ldw	r2,-8(fp)
    95ac:	10800017 	ldw	r2,0(r2)
    95b0:	10800204 	addi	r2,r2,8
    95b4:	10800037 	ldwio	r2,0(r2)
    95b8:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    95bc:	e0bfff17 	ldw	r2,-4(fp)
    95c0:	1082000c 	andi	r2,r2,2048
    95c4:	1004c03a 	cmpne	r2,r2,zero
    95c8:	1000061e 	bne	r2,zero,95e4 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    95cc:	e0bffe17 	ldw	r2,-8(fp)
    95d0:	10c00117 	ldw	r3,4(r2)
    95d4:	00bfefc4 	movi	r2,-65
    95d8:	1886703a 	and	r3,r3,r2
    95dc:	e0bffe17 	ldw	r2,-8(fp)
    95e0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    95e4:	e0bffe17 	ldw	r2,-8(fp)
    95e8:	10c00417 	ldw	r3,16(r2)
    95ec:	e0bffe17 	ldw	r2,-8(fp)
    95f0:	10800517 	ldw	r2,20(r2)
    95f4:	1880061e 	bne	r3,r2,9610 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    95f8:	e0bffe17 	ldw	r2,-8(fp)
    95fc:	10c00117 	ldw	r3,4(r2)
    9600:	00beefc4 	movi	r2,-1089
    9604:	1886703a 	and	r3,r3,r2
    9608:	e0bffe17 	ldw	r2,-8(fp)
    960c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    9610:	e0bffe17 	ldw	r2,-8(fp)
    9614:	10800017 	ldw	r2,0(r2)
    9618:	11000304 	addi	r4,r2,12
    961c:	e0bffe17 	ldw	r2,-8(fp)
    9620:	10800117 	ldw	r2,4(r2)
    9624:	1007883a 	mov	r3,r2
    9628:	2005883a 	mov	r2,r4
    962c:	10c00035 	stwio	r3,0(r2)
}
    9630:	e037883a 	mov	sp,fp
    9634:	df000017 	ldw	fp,0(sp)
    9638:	dec00104 	addi	sp,sp,4
    963c:	f800283a 	ret

00009640 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    9640:	defffc04 	addi	sp,sp,-16
    9644:	df000315 	stw	fp,12(sp)
    9648:	df000304 	addi	fp,sp,12
    964c:	e13ffd15 	stw	r4,-12(fp)
    9650:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    9654:	00000706 	br	9674 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    9658:	e0bffe17 	ldw	r2,-8(fp)
    965c:	1090000c 	andi	r2,r2,16384
    9660:	1005003a 	cmpeq	r2,r2,zero
    9664:	1000031e 	bne	r2,zero,9674 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    9668:	00bffd44 	movi	r2,-11
    966c:	e0bfff15 	stw	r2,-4(fp)
    9670:	00000606 	br	968c <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    9674:	e0bffd17 	ldw	r2,-12(fp)
    9678:	10c00417 	ldw	r3,16(r2)
    967c:	e0bffd17 	ldw	r2,-12(fp)
    9680:	10800517 	ldw	r2,20(r2)
    9684:	18bff41e 	bne	r3,r2,9658 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    9688:	e03fff15 	stw	zero,-4(fp)
    968c:	e0bfff17 	ldw	r2,-4(fp)
}
    9690:	e037883a 	mov	sp,fp
    9694:	df000017 	ldw	fp,0(sp)
    9698:	dec00104 	addi	sp,sp,4
    969c:	f800283a 	ret

000096a0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    96a0:	defff004 	addi	sp,sp,-64
    96a4:	dfc00f15 	stw	ra,60(sp)
    96a8:	df000e15 	stw	fp,56(sp)
    96ac:	df000e04 	addi	fp,sp,56
    96b0:	e13ffb15 	stw	r4,-20(fp)
    96b4:	e17ffc15 	stw	r5,-16(fp)
    96b8:	e1bffd15 	stw	r6,-12(fp)
    96bc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    96c0:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    96c4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    96c8:	e0bffe17 	ldw	r2,-8(fp)
    96cc:	1090000c 	andi	r2,r2,16384
    96d0:	1005003a 	cmpeq	r2,r2,zero
    96d4:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    96d8:	e0bffb17 	ldw	r2,-20(fp)
    96dc:	10800217 	ldw	r2,8(r2)
    96e0:	10800044 	addi	r2,r2,1
    96e4:	10800fcc 	andi	r2,r2,63
    96e8:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    96ec:	00001906 	br	9754 <altera_avalon_uart_read+0xb4>
    {
      count++;
    96f0:	e0bff617 	ldw	r2,-40(fp)
    96f4:	10800044 	addi	r2,r2,1
    96f8:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    96fc:	e0bffb17 	ldw	r2,-20(fp)
    9700:	10c00217 	ldw	r3,8(r2)
    9704:	e0bffb17 	ldw	r2,-20(fp)
    9708:	1885883a 	add	r2,r3,r2
    970c:	10800704 	addi	r2,r2,28
    9710:	10800003 	ldbu	r2,0(r2)
    9714:	1007883a 	mov	r3,r2
    9718:	e0bffc17 	ldw	r2,-16(fp)
    971c:	10c00005 	stb	r3,0(r2)
    9720:	e0bffc17 	ldw	r2,-16(fp)
    9724:	10800044 	addi	r2,r2,1
    9728:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    972c:	e0bffb17 	ldw	r2,-20(fp)
    9730:	10800217 	ldw	r2,8(r2)
    9734:	10c00044 	addi	r3,r2,1
    9738:	e0bffb17 	ldw	r2,-20(fp)
    973c:	10c00215 	stw	r3,8(r2)
    9740:	e0bffb17 	ldw	r2,-20(fp)
    9744:	10800217 	ldw	r2,8(r2)
    9748:	10c00fcc 	andi	r3,r2,63
    974c:	e0bffb17 	ldw	r2,-20(fp)
    9750:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    9754:	e0fff617 	ldw	r3,-40(fp)
    9758:	e0bffd17 	ldw	r2,-12(fp)
    975c:	1880050e 	bge	r3,r2,9774 <altera_avalon_uart_read+0xd4>
    9760:	e0bffb17 	ldw	r2,-20(fp)
    9764:	10c00217 	ldw	r3,8(r2)
    9768:	e0bffb17 	ldw	r2,-20(fp)
    976c:	10800317 	ldw	r2,12(r2)
    9770:	18bfdf1e 	bne	r3,r2,96f0 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    9774:	e0bff617 	ldw	r2,-40(fp)
    9778:	1004c03a 	cmpne	r2,r2,zero
    977c:	1000271e 	bne	r2,zero,981c <altera_avalon_uart_read+0x17c>
    9780:	e0bffb17 	ldw	r2,-20(fp)
    9784:	10c00217 	ldw	r3,8(r2)
    9788:	e0bffb17 	ldw	r2,-20(fp)
    978c:	10800317 	ldw	r2,12(r2)
    9790:	1880221e 	bne	r3,r2,981c <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    9794:	e0bff917 	ldw	r2,-28(fp)
    9798:	1004c03a 	cmpne	r2,r2,zero
    979c:	1000061e 	bne	r2,zero,97b8 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    97a0:	00098d00 	call	98d0 <alt_get_errno>
    97a4:	00c002c4 	movi	r3,11
    97a8:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    97ac:	00800044 	movi	r2,1
    97b0:	e0bff705 	stb	r2,-36(fp)
        break;
    97b4:	00001f06 	br	9834 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    97b8:	0005303a 	rdctl	r2,status
    97bc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    97c0:	e0fff517 	ldw	r3,-44(fp)
    97c4:	00bfff84 	movi	r2,-2
    97c8:	1884703a 	and	r2,r3,r2
    97cc:	1001703a 	wrctl	status,r2
  
  return context;
    97d0:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    97d4:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    97d8:	e0bffb17 	ldw	r2,-20(fp)
    97dc:	10800117 	ldw	r2,4(r2)
    97e0:	10c02014 	ori	r3,r2,128
    97e4:	e0bffb17 	ldw	r2,-20(fp)
    97e8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    97ec:	e0bffb17 	ldw	r2,-20(fp)
    97f0:	10800017 	ldw	r2,0(r2)
    97f4:	11000304 	addi	r4,r2,12
    97f8:	e0bffb17 	ldw	r2,-20(fp)
    97fc:	10800117 	ldw	r2,4(r2)
    9800:	1007883a 	mov	r3,r2
    9804:	2005883a 	mov	r2,r4
    9808:	10c00035 	stwio	r3,0(r2)
    980c:	e0bffa17 	ldw	r2,-24(fp)
    9810:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9814:	e0bff417 	ldw	r2,-48(fp)
    9818:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    981c:	e0bff617 	ldw	r2,-40(fp)
    9820:	1004c03a 	cmpne	r2,r2,zero
    9824:	1000031e 	bne	r2,zero,9834 <altera_avalon_uart_read+0x194>
    9828:	e0bffd17 	ldw	r2,-12(fp)
    982c:	1004c03a 	cmpne	r2,r2,zero
    9830:	103fc81e 	bne	r2,zero,9754 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9834:	0005303a 	rdctl	r2,status
    9838:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    983c:	e0fff317 	ldw	r3,-52(fp)
    9840:	00bfff84 	movi	r2,-2
    9844:	1884703a 	and	r2,r3,r2
    9848:	1001703a 	wrctl	status,r2
  
  return context;
    984c:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    9850:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    9854:	e0bffb17 	ldw	r2,-20(fp)
    9858:	10800117 	ldw	r2,4(r2)
    985c:	10c02014 	ori	r3,r2,128
    9860:	e0bffb17 	ldw	r2,-20(fp)
    9864:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    9868:	e0bffb17 	ldw	r2,-20(fp)
    986c:	10800017 	ldw	r2,0(r2)
    9870:	11000304 	addi	r4,r2,12
    9874:	e0bffb17 	ldw	r2,-20(fp)
    9878:	10800117 	ldw	r2,4(r2)
    987c:	1007883a 	mov	r3,r2
    9880:	2005883a 	mov	r2,r4
    9884:	10c00035 	stwio	r3,0(r2)
    9888:	e0bffa17 	ldw	r2,-24(fp)
    988c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9890:	e0bff217 	ldw	r2,-56(fp)
    9894:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    9898:	e0bff703 	ldbu	r2,-36(fp)
    989c:	1005003a 	cmpeq	r2,r2,zero
    98a0:	1000031e 	bne	r2,zero,98b0 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    98a4:	00bffd04 	movi	r2,-12
    98a8:	e0bfff15 	stw	r2,-4(fp)
    98ac:	00000206 	br	98b8 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    98b0:	e0bff617 	ldw	r2,-40(fp)
    98b4:	e0bfff15 	stw	r2,-4(fp)
    98b8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    98bc:	e037883a 	mov	sp,fp
    98c0:	dfc00117 	ldw	ra,4(sp)
    98c4:	df000017 	ldw	fp,0(sp)
    98c8:	dec00204 	addi	sp,sp,8
    98cc:	f800283a 	ret

000098d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    98d0:	defffd04 	addi	sp,sp,-12
    98d4:	dfc00215 	stw	ra,8(sp)
    98d8:	df000115 	stw	fp,4(sp)
    98dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    98e0:	00800074 	movhi	r2,1
    98e4:	10b21404 	addi	r2,r2,-14256
    98e8:	10800017 	ldw	r2,0(r2)
    98ec:	1005003a 	cmpeq	r2,r2,zero
    98f0:	1000061e 	bne	r2,zero,990c <alt_get_errno+0x3c>
    98f4:	00800074 	movhi	r2,1
    98f8:	10b21404 	addi	r2,r2,-14256
    98fc:	10800017 	ldw	r2,0(r2)
    9900:	103ee83a 	callr	r2
    9904:	e0bfff15 	stw	r2,-4(fp)
    9908:	00000306 	br	9918 <alt_get_errno+0x48>
    990c:	00800074 	movhi	r2,1
    9910:	10b7de04 	addi	r2,r2,-8328
    9914:	e0bfff15 	stw	r2,-4(fp)
    9918:	e0bfff17 	ldw	r2,-4(fp)
}
    991c:	e037883a 	mov	sp,fp
    9920:	dfc00117 	ldw	ra,4(sp)
    9924:	df000017 	ldw	fp,0(sp)
    9928:	dec00204 	addi	sp,sp,8
    992c:	f800283a 	ret

00009930 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    9930:	defff204 	addi	sp,sp,-56
    9934:	dfc00d15 	stw	ra,52(sp)
    9938:	df000c15 	stw	fp,48(sp)
    993c:	df000c04 	addi	fp,sp,48
    9940:	e13ffc15 	stw	r4,-16(fp)
    9944:	e17ffd15 	stw	r5,-12(fp)
    9948:	e1bffe15 	stw	r6,-8(fp)
    994c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    9950:	e0bffe17 	ldw	r2,-8(fp)
    9954:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    9958:	e0bfff17 	ldw	r2,-4(fp)
    995c:	1090000c 	andi	r2,r2,16384
    9960:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    9964:	00004006 	br	9a68 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    9968:	e0bffc17 	ldw	r2,-16(fp)
    996c:	10800517 	ldw	r2,20(r2)
    9970:	10800044 	addi	r2,r2,1
    9974:	10800fcc 	andi	r2,r2,63
    9978:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    997c:	e0bffc17 	ldw	r2,-16(fp)
    9980:	10c00417 	ldw	r3,16(r2)
    9984:	e0bff917 	ldw	r2,-28(fp)
    9988:	1880251e 	bne	r3,r2,9a20 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    998c:	e0bffa17 	ldw	r2,-24(fp)
    9990:	1005003a 	cmpeq	r2,r2,zero
    9994:	1000051e 	bne	r2,zero,99ac <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    9998:	0009af80 	call	9af8 <alt_get_errno>
    999c:	1007883a 	mov	r3,r2
    99a0:	008002c4 	movi	r2,11
    99a4:	18800015 	stw	r2,0(r3)
        break;
    99a8:	00003206 	br	9a74 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    99ac:	0005303a 	rdctl	r2,status
    99b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    99b4:	e0fff717 	ldw	r3,-36(fp)
    99b8:	00bfff84 	movi	r2,-2
    99bc:	1884703a 	and	r2,r3,r2
    99c0:	1001703a 	wrctl	status,r2
  
  return context;
    99c4:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    99c8:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    99cc:	e0bffc17 	ldw	r2,-16(fp)
    99d0:	10800117 	ldw	r2,4(r2)
    99d4:	10c11014 	ori	r3,r2,1088
    99d8:	e0bffc17 	ldw	r2,-16(fp)
    99dc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    99e0:	e0bffc17 	ldw	r2,-16(fp)
    99e4:	10800017 	ldw	r2,0(r2)
    99e8:	11000304 	addi	r4,r2,12
    99ec:	e0bffc17 	ldw	r2,-16(fp)
    99f0:	10800117 	ldw	r2,4(r2)
    99f4:	1007883a 	mov	r3,r2
    99f8:	2005883a 	mov	r2,r4
    99fc:	10c00035 	stwio	r3,0(r2)
    9a00:	e0bffb17 	ldw	r2,-20(fp)
    9a04:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a08:	e0bff617 	ldw	r2,-40(fp)
    9a0c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    9a10:	e0bffc17 	ldw	r2,-16(fp)
    9a14:	10c00417 	ldw	r3,16(r2)
    9a18:	e0bff917 	ldw	r2,-28(fp)
    9a1c:	18bffc26 	beq	r3,r2,9a10 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    9a20:	e0bff817 	ldw	r2,-32(fp)
    9a24:	10bfffc4 	addi	r2,r2,-1
    9a28:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    9a2c:	e0bffc17 	ldw	r2,-16(fp)
    9a30:	10c00517 	ldw	r3,20(r2)
    9a34:	e0bffd17 	ldw	r2,-12(fp)
    9a38:	10800003 	ldbu	r2,0(r2)
    9a3c:	1009883a 	mov	r4,r2
    9a40:	e0bffc17 	ldw	r2,-16(fp)
    9a44:	1885883a 	add	r2,r3,r2
    9a48:	10801704 	addi	r2,r2,92
    9a4c:	11000005 	stb	r4,0(r2)
    9a50:	e0bffd17 	ldw	r2,-12(fp)
    9a54:	10800044 	addi	r2,r2,1
    9a58:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    9a5c:	e0fffc17 	ldw	r3,-16(fp)
    9a60:	e0bff917 	ldw	r2,-28(fp)
    9a64:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    9a68:	e0bff817 	ldw	r2,-32(fp)
    9a6c:	1004c03a 	cmpne	r2,r2,zero
    9a70:	103fbd1e 	bne	r2,zero,9968 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a74:	0005303a 	rdctl	r2,status
    9a78:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a7c:	e0fff517 	ldw	r3,-44(fp)
    9a80:	00bfff84 	movi	r2,-2
    9a84:	1884703a 	and	r2,r3,r2
    9a88:	1001703a 	wrctl	status,r2
  
  return context;
    9a8c:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    9a90:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    9a94:	e0bffc17 	ldw	r2,-16(fp)
    9a98:	10800117 	ldw	r2,4(r2)
    9a9c:	10c11014 	ori	r3,r2,1088
    9aa0:	e0bffc17 	ldw	r2,-16(fp)
    9aa4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    9aa8:	e0bffc17 	ldw	r2,-16(fp)
    9aac:	10800017 	ldw	r2,0(r2)
    9ab0:	11000304 	addi	r4,r2,12
    9ab4:	e0bffc17 	ldw	r2,-16(fp)
    9ab8:	10800117 	ldw	r2,4(r2)
    9abc:	1007883a 	mov	r3,r2
    9ac0:	2005883a 	mov	r2,r4
    9ac4:	10c00035 	stwio	r3,0(r2)
    9ac8:	e0bffb17 	ldw	r2,-20(fp)
    9acc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ad0:	e0bff417 	ldw	r2,-48(fp)
    9ad4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    9ad8:	e0fffe17 	ldw	r3,-8(fp)
    9adc:	e0bff817 	ldw	r2,-32(fp)
    9ae0:	1885c83a 	sub	r2,r3,r2
}
    9ae4:	e037883a 	mov	sp,fp
    9ae8:	dfc00117 	ldw	ra,4(sp)
    9aec:	df000017 	ldw	fp,0(sp)
    9af0:	dec00204 	addi	sp,sp,8
    9af4:	f800283a 	ret

00009af8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9af8:	defffd04 	addi	sp,sp,-12
    9afc:	dfc00215 	stw	ra,8(sp)
    9b00:	df000115 	stw	fp,4(sp)
    9b04:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9b08:	00800074 	movhi	r2,1
    9b0c:	10b21404 	addi	r2,r2,-14256
    9b10:	10800017 	ldw	r2,0(r2)
    9b14:	1005003a 	cmpeq	r2,r2,zero
    9b18:	1000061e 	bne	r2,zero,9b34 <alt_get_errno+0x3c>
    9b1c:	00800074 	movhi	r2,1
    9b20:	10b21404 	addi	r2,r2,-14256
    9b24:	10800017 	ldw	r2,0(r2)
    9b28:	103ee83a 	callr	r2
    9b2c:	e0bfff15 	stw	r2,-4(fp)
    9b30:	00000306 	br	9b40 <alt_get_errno+0x48>
    9b34:	00800074 	movhi	r2,1
    9b38:	10b7de04 	addi	r2,r2,-8328
    9b3c:	e0bfff15 	stw	r2,-4(fp)
    9b40:	e0bfff17 	ldw	r2,-4(fp)
}
    9b44:	e037883a 	mov	sp,fp
    9b48:	dfc00117 	ldw	ra,4(sp)
    9b4c:	df000017 	ldw	fp,0(sp)
    9b50:	dec00204 	addi	sp,sp,8
    9b54:	f800283a 	ret

00009b58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    9b58:	defff404 	addi	sp,sp,-48
    9b5c:	df000b15 	stw	fp,44(sp)
    9b60:	df000b04 	addi	fp,sp,44
    9b64:	e13ffb15 	stw	r4,-20(fp)
    9b68:	e17ffc15 	stw	r5,-16(fp)
    9b6c:	e1bffd15 	stw	r6,-12(fp)
    9b70:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    9b74:	e03ff915 	stw	zero,-28(fp)
    9b78:	00800074 	movhi	r2,1
    9b7c:	10b7dc04 	addi	r2,r2,-8336
    9b80:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    9b84:	1005003a 	cmpeq	r2,r2,zero
    9b88:	1000411e 	bne	r2,zero,9c90 <alt_alarm_start+0x138>
  {
    if (alarm)
    9b8c:	e0bffb17 	ldw	r2,-20(fp)
    9b90:	1005003a 	cmpeq	r2,r2,zero
    9b94:	10003b1e 	bne	r2,zero,9c84 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    9b98:	e0fffb17 	ldw	r3,-20(fp)
    9b9c:	e0bffd17 	ldw	r2,-12(fp)
    9ba0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    9ba4:	e0fffb17 	ldw	r3,-20(fp)
    9ba8:	e0bffe17 	ldw	r2,-8(fp)
    9bac:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9bb0:	0005303a 	rdctl	r2,status
    9bb4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9bb8:	e0fff817 	ldw	r3,-32(fp)
    9bbc:	00bfff84 	movi	r2,-2
    9bc0:	1884703a 	and	r2,r3,r2
    9bc4:	1001703a 	wrctl	status,r2
  
  return context;
    9bc8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    9bcc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    9bd0:	00800074 	movhi	r2,1
    9bd4:	10b7dd04 	addi	r2,r2,-8332
    9bd8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    9bdc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    9be0:	e0fffc17 	ldw	r3,-16(fp)
    9be4:	e0bff917 	ldw	r2,-28(fp)
    9be8:	1885883a 	add	r2,r3,r2
    9bec:	10c00044 	addi	r3,r2,1
    9bf0:	e0bffb17 	ldw	r2,-20(fp)
    9bf4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    9bf8:	e0bffb17 	ldw	r2,-20(fp)
    9bfc:	10c00217 	ldw	r3,8(r2)
    9c00:	e0bff917 	ldw	r2,-28(fp)
    9c04:	1880042e 	bgeu	r3,r2,9c18 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    9c08:	e0fffb17 	ldw	r3,-20(fp)
    9c0c:	00800044 	movi	r2,1
    9c10:	18800405 	stb	r2,16(r3)
    9c14:	00000206 	br	9c20 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    9c18:	e0bffb17 	ldw	r2,-20(fp)
    9c1c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    9c20:	e0fffb17 	ldw	r3,-20(fp)
    9c24:	00800074 	movhi	r2,1
    9c28:	10b21604 	addi	r2,r2,-14248
    9c2c:	e0bff615 	stw	r2,-40(fp)
    9c30:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9c34:	e0fff717 	ldw	r3,-36(fp)
    9c38:	e0bff617 	ldw	r2,-40(fp)
    9c3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    9c40:	e0bff617 	ldw	r2,-40(fp)
    9c44:	10c00017 	ldw	r3,0(r2)
    9c48:	e0bff717 	ldw	r2,-36(fp)
    9c4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9c50:	e0bff617 	ldw	r2,-40(fp)
    9c54:	10c00017 	ldw	r3,0(r2)
    9c58:	e0bff717 	ldw	r2,-36(fp)
    9c5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    9c60:	e0fff617 	ldw	r3,-40(fp)
    9c64:	e0bff717 	ldw	r2,-36(fp)
    9c68:	18800015 	stw	r2,0(r3)
    9c6c:	e0bffa17 	ldw	r2,-24(fp)
    9c70:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c74:	e0bff517 	ldw	r2,-44(fp)
    9c78:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    9c7c:	e03fff15 	stw	zero,-4(fp)
    9c80:	00000506 	br	9c98 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    9c84:	00bffa84 	movi	r2,-22
    9c88:	e0bfff15 	stw	r2,-4(fp)
    9c8c:	00000206 	br	9c98 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    9c90:	00bfde84 	movi	r2,-134
    9c94:	e0bfff15 	stw	r2,-4(fp)
    9c98:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    9c9c:	e037883a 	mov	sp,fp
    9ca0:	df000017 	ldw	fp,0(sp)
    9ca4:	dec00104 	addi	sp,sp,4
    9ca8:	f800283a 	ret

00009cac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9cac:	defff804 	addi	sp,sp,-32
    9cb0:	dfc00715 	stw	ra,28(sp)
    9cb4:	df000615 	stw	fp,24(sp)
    9cb8:	df000604 	addi	fp,sp,24
    9cbc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9cc0:	e0bffc17 	ldw	r2,-16(fp)
    9cc4:	1004803a 	cmplt	r2,r2,zero
    9cc8:	1000091e 	bne	r2,zero,9cf0 <close+0x44>
    9ccc:	e13ffc17 	ldw	r4,-16(fp)
    9cd0:	01400304 	movi	r5,12
    9cd4:	000849c0 	call	849c <__mulsi3>
    9cd8:	1007883a 	mov	r3,r2
    9cdc:	00800074 	movhi	r2,1
    9ce0:	10b0af04 	addi	r2,r2,-15684
    9ce4:	1887883a 	add	r3,r3,r2
    9ce8:	e0ffff15 	stw	r3,-4(fp)
    9cec:	00000106 	br	9cf4 <close+0x48>
    9cf0:	e03fff15 	stw	zero,-4(fp)
    9cf4:	e0bfff17 	ldw	r2,-4(fp)
    9cf8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9cfc:	e0bffb17 	ldw	r2,-20(fp)
    9d00:	1005003a 	cmpeq	r2,r2,zero
    9d04:	10001d1e 	bne	r2,zero,9d7c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9d08:	e0bffb17 	ldw	r2,-20(fp)
    9d0c:	10800017 	ldw	r2,0(r2)
    9d10:	10800417 	ldw	r2,16(r2)
    9d14:	1005003a 	cmpeq	r2,r2,zero
    9d18:	1000071e 	bne	r2,zero,9d38 <close+0x8c>
    9d1c:	e0bffb17 	ldw	r2,-20(fp)
    9d20:	10800017 	ldw	r2,0(r2)
    9d24:	10800417 	ldw	r2,16(r2)
    9d28:	e13ffb17 	ldw	r4,-20(fp)
    9d2c:	103ee83a 	callr	r2
    9d30:	e0bffe15 	stw	r2,-8(fp)
    9d34:	00000106 	br	9d3c <close+0x90>
    9d38:	e03ffe15 	stw	zero,-8(fp)
    9d3c:	e0bffe17 	ldw	r2,-8(fp)
    9d40:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9d44:	e13ffc17 	ldw	r4,-16(fp)
    9d48:	000a74c0 	call	a74c <alt_release_fd>
    if (rval < 0)
    9d4c:	e0bffa17 	ldw	r2,-24(fp)
    9d50:	1004403a 	cmpge	r2,r2,zero
    9d54:	1000071e 	bne	r2,zero,9d74 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9d58:	0009dac0 	call	9dac <alt_get_errno>
    9d5c:	e0fffa17 	ldw	r3,-24(fp)
    9d60:	00c7c83a 	sub	r3,zero,r3
    9d64:	10c00015 	stw	r3,0(r2)
      return -1;
    9d68:	00bfffc4 	movi	r2,-1
    9d6c:	e0bffd15 	stw	r2,-12(fp)
    9d70:	00000806 	br	9d94 <close+0xe8>
    }
    return 0;
    9d74:	e03ffd15 	stw	zero,-12(fp)
    9d78:	00000606 	br	9d94 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9d7c:	0009dac0 	call	9dac <alt_get_errno>
    9d80:	1007883a 	mov	r3,r2
    9d84:	00801444 	movi	r2,81
    9d88:	18800015 	stw	r2,0(r3)
    return -1;
    9d8c:	00bfffc4 	movi	r2,-1
    9d90:	e0bffd15 	stw	r2,-12(fp)
    9d94:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9d98:	e037883a 	mov	sp,fp
    9d9c:	dfc00117 	ldw	ra,4(sp)
    9da0:	df000017 	ldw	fp,0(sp)
    9da4:	dec00204 	addi	sp,sp,8
    9da8:	f800283a 	ret

00009dac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9dac:	defffd04 	addi	sp,sp,-12
    9db0:	dfc00215 	stw	ra,8(sp)
    9db4:	df000115 	stw	fp,4(sp)
    9db8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9dbc:	00800074 	movhi	r2,1
    9dc0:	10b21404 	addi	r2,r2,-14256
    9dc4:	10800017 	ldw	r2,0(r2)
    9dc8:	1005003a 	cmpeq	r2,r2,zero
    9dcc:	1000061e 	bne	r2,zero,9de8 <alt_get_errno+0x3c>
    9dd0:	00800074 	movhi	r2,1
    9dd4:	10b21404 	addi	r2,r2,-14256
    9dd8:	10800017 	ldw	r2,0(r2)
    9ddc:	103ee83a 	callr	r2
    9de0:	e0bfff15 	stw	r2,-4(fp)
    9de4:	00000306 	br	9df4 <alt_get_errno+0x48>
    9de8:	00800074 	movhi	r2,1
    9dec:	10b7de04 	addi	r2,r2,-8328
    9df0:	e0bfff15 	stw	r2,-4(fp)
    9df4:	e0bfff17 	ldw	r2,-4(fp)
}
    9df8:	e037883a 	mov	sp,fp
    9dfc:	dfc00117 	ldw	ra,4(sp)
    9e00:	df000017 	ldw	fp,0(sp)
    9e04:	dec00204 	addi	sp,sp,8
    9e08:	f800283a 	ret

00009e0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9e0c:	deffff04 	addi	sp,sp,-4
    9e10:	df000015 	stw	fp,0(sp)
    9e14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9e18:	e037883a 	mov	sp,fp
    9e1c:	df000017 	ldw	fp,0(sp)
    9e20:	dec00104 	addi	sp,sp,4
    9e24:	f800283a 	ret

00009e28 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9e28:	defffc04 	addi	sp,sp,-16
    9e2c:	df000315 	stw	fp,12(sp)
    9e30:	df000304 	addi	fp,sp,12
    9e34:	e13ffd15 	stw	r4,-12(fp)
    9e38:	e17ffe15 	stw	r5,-8(fp)
    9e3c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9e40:	e0bfff17 	ldw	r2,-4(fp)
}
    9e44:	e037883a 	mov	sp,fp
    9e48:	df000017 	ldw	fp,0(sp)
    9e4c:	dec00104 	addi	sp,sp,4
    9e50:	f800283a 	ret

00009e54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9e54:	defff904 	addi	sp,sp,-28
    9e58:	dfc00615 	stw	ra,24(sp)
    9e5c:	df000515 	stw	fp,20(sp)
    9e60:	df000504 	addi	fp,sp,20
    9e64:	e13ffd15 	stw	r4,-12(fp)
    9e68:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9e6c:	e0bffd17 	ldw	r2,-12(fp)
    9e70:	1005003a 	cmpeq	r2,r2,zero
    9e74:	1000041e 	bne	r2,zero,9e88 <alt_dev_llist_insert+0x34>
    9e78:	e0bffd17 	ldw	r2,-12(fp)
    9e7c:	10800217 	ldw	r2,8(r2)
    9e80:	1004c03a 	cmpne	r2,r2,zero
    9e84:	1000071e 	bne	r2,zero,9ea4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    9e88:	0009f080 	call	9f08 <alt_get_errno>
    9e8c:	1007883a 	mov	r3,r2
    9e90:	00800584 	movi	r2,22
    9e94:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9e98:	00bffa84 	movi	r2,-22
    9e9c:	e0bfff15 	stw	r2,-4(fp)
    9ea0:	00001306 	br	9ef0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9ea4:	e0fffd17 	ldw	r3,-12(fp)
    9ea8:	e0bffe17 	ldw	r2,-8(fp)
    9eac:	e0bffb15 	stw	r2,-20(fp)
    9eb0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9eb4:	e0fffc17 	ldw	r3,-16(fp)
    9eb8:	e0bffb17 	ldw	r2,-20(fp)
    9ebc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    9ec0:	e0bffb17 	ldw	r2,-20(fp)
    9ec4:	10c00017 	ldw	r3,0(r2)
    9ec8:	e0bffc17 	ldw	r2,-16(fp)
    9ecc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9ed0:	e0bffb17 	ldw	r2,-20(fp)
    9ed4:	10c00017 	ldw	r3,0(r2)
    9ed8:	e0bffc17 	ldw	r2,-16(fp)
    9edc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    9ee0:	e0fffb17 	ldw	r3,-20(fp)
    9ee4:	e0bffc17 	ldw	r2,-16(fp)
    9ee8:	18800015 	stw	r2,0(r3)

  return 0;  
    9eec:	e03fff15 	stw	zero,-4(fp)
    9ef0:	e0bfff17 	ldw	r2,-4(fp)
}
    9ef4:	e037883a 	mov	sp,fp
    9ef8:	dfc00117 	ldw	ra,4(sp)
    9efc:	df000017 	ldw	fp,0(sp)
    9f00:	dec00204 	addi	sp,sp,8
    9f04:	f800283a 	ret

00009f08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f08:	defffd04 	addi	sp,sp,-12
    9f0c:	dfc00215 	stw	ra,8(sp)
    9f10:	df000115 	stw	fp,4(sp)
    9f14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9f18:	00800074 	movhi	r2,1
    9f1c:	10b21404 	addi	r2,r2,-14256
    9f20:	10800017 	ldw	r2,0(r2)
    9f24:	1005003a 	cmpeq	r2,r2,zero
    9f28:	1000061e 	bne	r2,zero,9f44 <alt_get_errno+0x3c>
    9f2c:	00800074 	movhi	r2,1
    9f30:	10b21404 	addi	r2,r2,-14256
    9f34:	10800017 	ldw	r2,0(r2)
    9f38:	103ee83a 	callr	r2
    9f3c:	e0bfff15 	stw	r2,-4(fp)
    9f40:	00000306 	br	9f50 <alt_get_errno+0x48>
    9f44:	00800074 	movhi	r2,1
    9f48:	10b7de04 	addi	r2,r2,-8328
    9f4c:	e0bfff15 	stw	r2,-4(fp)
    9f50:	e0bfff17 	ldw	r2,-4(fp)
}
    9f54:	e037883a 	mov	sp,fp
    9f58:	dfc00117 	ldw	ra,4(sp)
    9f5c:	df000017 	ldw	fp,0(sp)
    9f60:	dec00204 	addi	sp,sp,8
    9f64:	f800283a 	ret

00009f68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9f68:	defffd04 	addi	sp,sp,-12
    9f6c:	dfc00215 	stw	ra,8(sp)
    9f70:	df000115 	stw	fp,4(sp)
    9f74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9f78:	00bfff04 	movi	r2,-4
    9f7c:	00c00074 	movhi	r3,1
    9f80:	18ec4b04 	addi	r3,r3,-20180
    9f84:	1885883a 	add	r2,r3,r2
    9f88:	e0bfff15 	stw	r2,-4(fp)
    9f8c:	00000606 	br	9fa8 <_do_ctors+0x40>
        (*ctor) (); 
    9f90:	e0bfff17 	ldw	r2,-4(fp)
    9f94:	10800017 	ldw	r2,0(r2)
    9f98:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9f9c:	e0bfff17 	ldw	r2,-4(fp)
    9fa0:	10bfff04 	addi	r2,r2,-4
    9fa4:	e0bfff15 	stw	r2,-4(fp)
    9fa8:	e0ffff17 	ldw	r3,-4(fp)
    9fac:	00800074 	movhi	r2,1
    9fb0:	10ac4a04 	addi	r2,r2,-20184
    9fb4:	18bff62e 	bgeu	r3,r2,9f90 <_do_ctors+0x28>
        (*ctor) (); 
}
    9fb8:	e037883a 	mov	sp,fp
    9fbc:	dfc00117 	ldw	ra,4(sp)
    9fc0:	df000017 	ldw	fp,0(sp)
    9fc4:	dec00204 	addi	sp,sp,8
    9fc8:	f800283a 	ret

00009fcc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9fcc:	defffd04 	addi	sp,sp,-12
    9fd0:	dfc00215 	stw	ra,8(sp)
    9fd4:	df000115 	stw	fp,4(sp)
    9fd8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9fdc:	00bfff04 	movi	r2,-4
    9fe0:	00c00074 	movhi	r3,1
    9fe4:	18ec4b04 	addi	r3,r3,-20180
    9fe8:	1885883a 	add	r2,r3,r2
    9fec:	e0bfff15 	stw	r2,-4(fp)
    9ff0:	00000606 	br	a00c <_do_dtors+0x40>
        (*dtor) (); 
    9ff4:	e0bfff17 	ldw	r2,-4(fp)
    9ff8:	10800017 	ldw	r2,0(r2)
    9ffc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a000:	e0bfff17 	ldw	r2,-4(fp)
    a004:	10bfff04 	addi	r2,r2,-4
    a008:	e0bfff15 	stw	r2,-4(fp)
    a00c:	e0ffff17 	ldw	r3,-4(fp)
    a010:	00800074 	movhi	r2,1
    a014:	10ac4b04 	addi	r2,r2,-20180
    a018:	18bff62e 	bgeu	r3,r2,9ff4 <_do_dtors+0x28>
        (*dtor) (); 
}
    a01c:	e037883a 	mov	sp,fp
    a020:	dfc00117 	ldw	ra,4(sp)
    a024:	df000017 	ldw	fp,0(sp)
    a028:	dec00204 	addi	sp,sp,8
    a02c:	f800283a 	ret

0000a030 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a030:	deffff04 	addi	sp,sp,-4
    a034:	df000015 	stw	fp,0(sp)
    a038:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    a03c:	e037883a 	mov	sp,fp
    a040:	df000017 	ldw	fp,0(sp)
    a044:	dec00104 	addi	sp,sp,4
    a048:	f800283a 	ret

0000a04c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a04c:	defff904 	addi	sp,sp,-28
    a050:	dfc00615 	stw	ra,24(sp)
    a054:	df000515 	stw	fp,20(sp)
    a058:	df000504 	addi	fp,sp,20
    a05c:	e13ffc15 	stw	r4,-16(fp)
    a060:	e17ffd15 	stw	r5,-12(fp)
    a064:	e1bffe15 	stw	r6,-8(fp)
    a068:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    a06c:	e0800217 	ldw	r2,8(fp)
    a070:	d8800015 	stw	r2,0(sp)
    a074:	e13ffc17 	ldw	r4,-16(fp)
    a078:	e17ffd17 	ldw	r5,-12(fp)
    a07c:	e1bffe17 	ldw	r6,-8(fp)
    a080:	e1ffff17 	ldw	r7,-4(fp)
    a084:	000a2200 	call	a220 <alt_iic_isr_register>
}  
    a088:	e037883a 	mov	sp,fp
    a08c:	dfc00117 	ldw	ra,4(sp)
    a090:	df000017 	ldw	fp,0(sp)
    a094:	dec00204 	addi	sp,sp,8
    a098:	f800283a 	ret

0000a09c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    a09c:	defff904 	addi	sp,sp,-28
    a0a0:	df000615 	stw	fp,24(sp)
    a0a4:	df000604 	addi	fp,sp,24
    a0a8:	e13ffe15 	stw	r4,-8(fp)
    a0ac:	e17fff15 	stw	r5,-4(fp)
    a0b0:	e0bfff17 	ldw	r2,-4(fp)
    a0b4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a0b8:	0005303a 	rdctl	r2,status
    a0bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a0c0:	e0fffb17 	ldw	r3,-20(fp)
    a0c4:	00bfff84 	movi	r2,-2
    a0c8:	1884703a 	and	r2,r3,r2
    a0cc:	1001703a 	wrctl	status,r2
  
  return context;
    a0d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a0d4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    a0d8:	e0fffc17 	ldw	r3,-16(fp)
    a0dc:	00800044 	movi	r2,1
    a0e0:	10c4983a 	sll	r2,r2,r3
    a0e4:	1007883a 	mov	r3,r2
    a0e8:	00800074 	movhi	r2,1
    a0ec:	10b7db04 	addi	r2,r2,-8340
    a0f0:	10800017 	ldw	r2,0(r2)
    a0f4:	1886b03a 	or	r3,r3,r2
    a0f8:	00800074 	movhi	r2,1
    a0fc:	10b7db04 	addi	r2,r2,-8340
    a100:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a104:	00800074 	movhi	r2,1
    a108:	10b7db04 	addi	r2,r2,-8340
    a10c:	10800017 	ldw	r2,0(r2)
    a110:	100170fa 	wrctl	ienable,r2
    a114:	e0bffd17 	ldw	r2,-12(fp)
    a118:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a11c:	e0bffa17 	ldw	r2,-24(fp)
    a120:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a124:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    a128:	e037883a 	mov	sp,fp
    a12c:	df000017 	ldw	fp,0(sp)
    a130:	dec00104 	addi	sp,sp,4
    a134:	f800283a 	ret

0000a138 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    a138:	defff904 	addi	sp,sp,-28
    a13c:	df000615 	stw	fp,24(sp)
    a140:	df000604 	addi	fp,sp,24
    a144:	e13ffe15 	stw	r4,-8(fp)
    a148:	e17fff15 	stw	r5,-4(fp)
    a14c:	e0bfff17 	ldw	r2,-4(fp)
    a150:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a154:	0005303a 	rdctl	r2,status
    a158:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a15c:	e0fffb17 	ldw	r3,-20(fp)
    a160:	00bfff84 	movi	r2,-2
    a164:	1884703a 	and	r2,r3,r2
    a168:	1001703a 	wrctl	status,r2
  
  return context;
    a16c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a170:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    a174:	e0fffc17 	ldw	r3,-16(fp)
    a178:	00800044 	movi	r2,1
    a17c:	10c4983a 	sll	r2,r2,r3
    a180:	0084303a 	nor	r2,zero,r2
    a184:	1007883a 	mov	r3,r2
    a188:	00800074 	movhi	r2,1
    a18c:	10b7db04 	addi	r2,r2,-8340
    a190:	10800017 	ldw	r2,0(r2)
    a194:	1886703a 	and	r3,r3,r2
    a198:	00800074 	movhi	r2,1
    a19c:	10b7db04 	addi	r2,r2,-8340
    a1a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a1a4:	00800074 	movhi	r2,1
    a1a8:	10b7db04 	addi	r2,r2,-8340
    a1ac:	10800017 	ldw	r2,0(r2)
    a1b0:	100170fa 	wrctl	ienable,r2
    a1b4:	e0bffd17 	ldw	r2,-12(fp)
    a1b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a1bc:	e0bffa17 	ldw	r2,-24(fp)
    a1c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a1c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    a1c8:	e037883a 	mov	sp,fp
    a1cc:	df000017 	ldw	fp,0(sp)
    a1d0:	dec00104 	addi	sp,sp,4
    a1d4:	f800283a 	ret

0000a1d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a1d8:	defffc04 	addi	sp,sp,-16
    a1dc:	df000315 	stw	fp,12(sp)
    a1e0:	df000304 	addi	fp,sp,12
    a1e4:	e13ffe15 	stw	r4,-8(fp)
    a1e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a1ec:	000530fa 	rdctl	r2,ienable
    a1f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a1f4:	e0ffff17 	ldw	r3,-4(fp)
    a1f8:	00800044 	movi	r2,1
    a1fc:	10c4983a 	sll	r2,r2,r3
    a200:	1007883a 	mov	r3,r2
    a204:	e0bffd17 	ldw	r2,-12(fp)
    a208:	1884703a 	and	r2,r3,r2
    a20c:	1004c03a 	cmpne	r2,r2,zero
}
    a210:	e037883a 	mov	sp,fp
    a214:	df000017 	ldw	fp,0(sp)
    a218:	dec00104 	addi	sp,sp,4
    a21c:	f800283a 	ret

0000a220 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a220:	defff404 	addi	sp,sp,-48
    a224:	dfc00b15 	stw	ra,44(sp)
    a228:	df000a15 	stw	fp,40(sp)
    a22c:	df000a04 	addi	fp,sp,40
    a230:	e13ffb15 	stw	r4,-20(fp)
    a234:	e17ffc15 	stw	r5,-16(fp)
    a238:	e1bffd15 	stw	r6,-12(fp)
    a23c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    a240:	00bffa84 	movi	r2,-22
    a244:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a248:	e0bffc17 	ldw	r2,-16(fp)
    a24c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a250:	e0bff917 	ldw	r2,-28(fp)
    a254:	10800808 	cmpgei	r2,r2,32
    a258:	1000291e 	bne	r2,zero,a300 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a25c:	0005303a 	rdctl	r2,status
    a260:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a264:	e0fff717 	ldw	r3,-36(fp)
    a268:	00bfff84 	movi	r2,-2
    a26c:	1884703a 	and	r2,r3,r2
    a270:	1001703a 	wrctl	status,r2
  
  return context;
    a274:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a278:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    a27c:	e0bff917 	ldw	r2,-28(fp)
    a280:	00c00074 	movhi	r3,1
    a284:	18f7df04 	addi	r3,r3,-8324
    a288:	100490fa 	slli	r2,r2,3
    a28c:	10c7883a 	add	r3,r2,r3
    a290:	e0bffd17 	ldw	r2,-12(fp)
    a294:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    a298:	e0bff917 	ldw	r2,-28(fp)
    a29c:	00c00074 	movhi	r3,1
    a2a0:	18f7df04 	addi	r3,r3,-8324
    a2a4:	100490fa 	slli	r2,r2,3
    a2a8:	10c5883a 	add	r2,r2,r3
    a2ac:	10c00104 	addi	r3,r2,4
    a2b0:	e0bffe17 	ldw	r2,-8(fp)
    a2b4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a2b8:	e0bffd17 	ldw	r2,-12(fp)
    a2bc:	1005003a 	cmpeq	r2,r2,zero
    a2c0:	1000051e 	bne	r2,zero,a2d8 <alt_iic_isr_register+0xb8>
    a2c4:	e17ff917 	ldw	r5,-28(fp)
    a2c8:	e13ffb17 	ldw	r4,-20(fp)
    a2cc:	000a09c0 	call	a09c <alt_ic_irq_enable>
    a2d0:	e0bfff15 	stw	r2,-4(fp)
    a2d4:	00000406 	br	a2e8 <alt_iic_isr_register+0xc8>
    a2d8:	e17ff917 	ldw	r5,-28(fp)
    a2dc:	e13ffb17 	ldw	r4,-20(fp)
    a2e0:	000a1380 	call	a138 <alt_ic_irq_disable>
    a2e4:	e0bfff15 	stw	r2,-4(fp)
    a2e8:	e0bfff17 	ldw	r2,-4(fp)
    a2ec:	e0bffa15 	stw	r2,-24(fp)
    a2f0:	e0bff817 	ldw	r2,-32(fp)
    a2f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2f8:	e0bff617 	ldw	r2,-40(fp)
    a2fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a300:	e0bffa17 	ldw	r2,-24(fp)
}
    a304:	e037883a 	mov	sp,fp
    a308:	dfc00117 	ldw	ra,4(sp)
    a30c:	df000017 	ldw	fp,0(sp)
    a310:	dec00204 	addi	sp,sp,8
    a314:	f800283a 	ret

0000a318 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a318:	defff804 	addi	sp,sp,-32
    a31c:	dfc00715 	stw	ra,28(sp)
    a320:	df000615 	stw	fp,24(sp)
    a324:	dc000515 	stw	r16,20(sp)
    a328:	df000504 	addi	fp,sp,20
    a32c:	e13ffc15 	stw	r4,-16(fp)
    a330:	e17ffd15 	stw	r5,-12(fp)
    a334:	e1bffe15 	stw	r6,-8(fp)
    a338:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    a33c:	e13ffd17 	ldw	r4,-12(fp)
    a340:	e17ffe17 	ldw	r5,-8(fp)
    a344:	e1bfff17 	ldw	r6,-4(fp)
    a348:	000a5600 	call	a560 <open>
    a34c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    a350:	e0bffb17 	ldw	r2,-20(fp)
    a354:	1004803a 	cmplt	r2,r2,zero
    a358:	10001f1e 	bne	r2,zero,a3d8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    a35c:	e13ffb17 	ldw	r4,-20(fp)
    a360:	04000074 	movhi	r16,1
    a364:	8430af04 	addi	r16,r16,-15684
    a368:	01400304 	movi	r5,12
    a36c:	000849c0 	call	849c <__mulsi3>
    a370:	1405883a 	add	r2,r2,r16
    a374:	10c00017 	ldw	r3,0(r2)
    a378:	e0bffc17 	ldw	r2,-16(fp)
    a37c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a380:	e13ffb17 	ldw	r4,-20(fp)
    a384:	04000074 	movhi	r16,1
    a388:	8430af04 	addi	r16,r16,-15684
    a38c:	01400304 	movi	r5,12
    a390:	000849c0 	call	849c <__mulsi3>
    a394:	1405883a 	add	r2,r2,r16
    a398:	10800104 	addi	r2,r2,4
    a39c:	10c00017 	ldw	r3,0(r2)
    a3a0:	e0bffc17 	ldw	r2,-16(fp)
    a3a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a3a8:	e13ffb17 	ldw	r4,-20(fp)
    a3ac:	04000074 	movhi	r16,1
    a3b0:	8430af04 	addi	r16,r16,-15684
    a3b4:	01400304 	movi	r5,12
    a3b8:	000849c0 	call	849c <__mulsi3>
    a3bc:	1405883a 	add	r2,r2,r16
    a3c0:	10800204 	addi	r2,r2,8
    a3c4:	10c00017 	ldw	r3,0(r2)
    a3c8:	e0bffc17 	ldw	r2,-16(fp)
    a3cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a3d0:	e13ffb17 	ldw	r4,-20(fp)
    a3d4:	000a74c0 	call	a74c <alt_release_fd>
  }
} 
    a3d8:	e037883a 	mov	sp,fp
    a3dc:	dfc00217 	ldw	ra,8(sp)
    a3e0:	df000117 	ldw	fp,4(sp)
    a3e4:	dc000017 	ldw	r16,0(sp)
    a3e8:	dec00304 	addi	sp,sp,12
    a3ec:	f800283a 	ret

0000a3f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a3f0:	defffb04 	addi	sp,sp,-20
    a3f4:	dfc00415 	stw	ra,16(sp)
    a3f8:	df000315 	stw	fp,12(sp)
    a3fc:	df000304 	addi	fp,sp,12
    a400:	e13ffd15 	stw	r4,-12(fp)
    a404:	e17ffe15 	stw	r5,-8(fp)
    a408:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a40c:	01000074 	movhi	r4,1
    a410:	2130b204 	addi	r4,r4,-15672
    a414:	e17ffd17 	ldw	r5,-12(fp)
    a418:	01800044 	movi	r6,1
    a41c:	01c07fc4 	movi	r7,511
    a420:	000a3180 	call	a318 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a424:	01000074 	movhi	r4,1
    a428:	2130af04 	addi	r4,r4,-15684
    a42c:	e17ffe17 	ldw	r5,-8(fp)
    a430:	000d883a 	mov	r6,zero
    a434:	01c07fc4 	movi	r7,511
    a438:	000a3180 	call	a318 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a43c:	01000074 	movhi	r4,1
    a440:	2130b504 	addi	r4,r4,-15660
    a444:	e17fff17 	ldw	r5,-4(fp)
    a448:	01800044 	movi	r6,1
    a44c:	01c07fc4 	movi	r7,511
    a450:	000a3180 	call	a318 <alt_open_fd>
}  
    a454:	e037883a 	mov	sp,fp
    a458:	dfc00117 	ldw	ra,4(sp)
    a45c:	df000017 	ldw	fp,0(sp)
    a460:	dec00204 	addi	sp,sp,8
    a464:	f800283a 	ret

0000a468 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a468:	defffa04 	addi	sp,sp,-24
    a46c:	dfc00515 	stw	ra,20(sp)
    a470:	df000415 	stw	fp,16(sp)
    a474:	dc000315 	stw	r16,12(sp)
    a478:	df000304 	addi	fp,sp,12
    a47c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a480:	e0bffe17 	ldw	r2,-8(fp)
    a484:	10800217 	ldw	r2,8(r2)
    a488:	10d00034 	orhi	r3,r2,16384
    a48c:	e0bffe17 	ldw	r2,-8(fp)
    a490:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a494:	e03ffd15 	stw	zero,-12(fp)
    a498:	00002306 	br	a528 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a49c:	e13ffd17 	ldw	r4,-12(fp)
    a4a0:	04000074 	movhi	r16,1
    a4a4:	8430af04 	addi	r16,r16,-15684
    a4a8:	01400304 	movi	r5,12
    a4ac:	000849c0 	call	849c <__mulsi3>
    a4b0:	1405883a 	add	r2,r2,r16
    a4b4:	10c00017 	ldw	r3,0(r2)
    a4b8:	e0bffe17 	ldw	r2,-8(fp)
    a4bc:	10800017 	ldw	r2,0(r2)
    a4c0:	1880161e 	bne	r3,r2,a51c <alt_file_locked+0xb4>
    a4c4:	e13ffd17 	ldw	r4,-12(fp)
    a4c8:	04000074 	movhi	r16,1
    a4cc:	8430af04 	addi	r16,r16,-15684
    a4d0:	01400304 	movi	r5,12
    a4d4:	000849c0 	call	849c <__mulsi3>
    a4d8:	1405883a 	add	r2,r2,r16
    a4dc:	10800204 	addi	r2,r2,8
    a4e0:	10800017 	ldw	r2,0(r2)
    a4e4:	1004403a 	cmpge	r2,r2,zero
    a4e8:	10000c1e 	bne	r2,zero,a51c <alt_file_locked+0xb4>
    a4ec:	e13ffd17 	ldw	r4,-12(fp)
    a4f0:	01400304 	movi	r5,12
    a4f4:	000849c0 	call	849c <__mulsi3>
    a4f8:	1007883a 	mov	r3,r2
    a4fc:	00800074 	movhi	r2,1
    a500:	10b0af04 	addi	r2,r2,-15684
    a504:	1887883a 	add	r3,r3,r2
    a508:	e0bffe17 	ldw	r2,-8(fp)
    a50c:	18800326 	beq	r3,r2,a51c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a510:	00bffcc4 	movi	r2,-13
    a514:	e0bfff15 	stw	r2,-4(fp)
    a518:	00000a06 	br	a544 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a51c:	e0bffd17 	ldw	r2,-12(fp)
    a520:	10800044 	addi	r2,r2,1
    a524:	e0bffd15 	stw	r2,-12(fp)
    a528:	00800074 	movhi	r2,1
    a52c:	10b21304 	addi	r2,r2,-14260
    a530:	10800017 	ldw	r2,0(r2)
    a534:	1007883a 	mov	r3,r2
    a538:	e0bffd17 	ldw	r2,-12(fp)
    a53c:	18bfd72e 	bgeu	r3,r2,a49c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a540:	e03fff15 	stw	zero,-4(fp)
    a544:	e0bfff17 	ldw	r2,-4(fp)
}
    a548:	e037883a 	mov	sp,fp
    a54c:	dfc00217 	ldw	ra,8(sp)
    a550:	df000117 	ldw	fp,4(sp)
    a554:	dc000017 	ldw	r16,0(sp)
    a558:	dec00304 	addi	sp,sp,12
    a55c:	f800283a 	ret

0000a560 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a560:	defff404 	addi	sp,sp,-48
    a564:	dfc00b15 	stw	ra,44(sp)
    a568:	df000a15 	stw	fp,40(sp)
    a56c:	df000a04 	addi	fp,sp,40
    a570:	e13ffb15 	stw	r4,-20(fp)
    a574:	e17ffc15 	stw	r5,-16(fp)
    a578:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a57c:	00bfffc4 	movi	r2,-1
    a580:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    a584:	00bffb44 	movi	r2,-19
    a588:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    a58c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a590:	e13ffb17 	ldw	r4,-20(fp)
    a594:	01400074 	movhi	r5,1
    a598:	29721104 	addi	r5,r5,-14268
    a59c:	000a9880 	call	a988 <alt_find_dev>
    a5a0:	e0bffa15 	stw	r2,-24(fp)
    a5a4:	e0bffa17 	ldw	r2,-24(fp)
    a5a8:	1004c03a 	cmpne	r2,r2,zero
    a5ac:	1000051e 	bne	r2,zero,a5c4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a5b0:	e13ffb17 	ldw	r4,-20(fp)
    a5b4:	000aa1c0 	call	aa1c <alt_find_file>
    a5b8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    a5bc:	00800044 	movi	r2,1
    a5c0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a5c4:	e0bffa17 	ldw	r2,-24(fp)
    a5c8:	1005003a 	cmpeq	r2,r2,zero
    a5cc:	1000311e 	bne	r2,zero,a694 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a5d0:	e13ffa17 	ldw	r4,-24(fp)
    a5d4:	000ab3c0 	call	ab3c <alt_get_fd>
    a5d8:	e0bff815 	stw	r2,-32(fp)
    a5dc:	e0bff817 	ldw	r2,-32(fp)
    a5e0:	1004403a 	cmpge	r2,r2,zero
    a5e4:	1000031e 	bne	r2,zero,a5f4 <open+0x94>
    {
      status = index;
    a5e8:	e0bff817 	ldw	r2,-32(fp)
    a5ec:	e0bff715 	stw	r2,-36(fp)
    a5f0:	00002a06 	br	a69c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    a5f4:	e13ff817 	ldw	r4,-32(fp)
    a5f8:	01400304 	movi	r5,12
    a5fc:	000849c0 	call	849c <__mulsi3>
    a600:	1007883a 	mov	r3,r2
    a604:	00800074 	movhi	r2,1
    a608:	10b0af04 	addi	r2,r2,-15684
    a60c:	1885883a 	add	r2,r3,r2
    a610:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a614:	e0fffc17 	ldw	r3,-16(fp)
    a618:	00900034 	movhi	r2,16384
    a61c:	10bfffc4 	addi	r2,r2,-1
    a620:	1886703a 	and	r3,r3,r2
    a624:	e0bff917 	ldw	r2,-28(fp)
    a628:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a62c:	e0bff617 	ldw	r2,-40(fp)
    a630:	1004c03a 	cmpne	r2,r2,zero
    a634:	1000061e 	bne	r2,zero,a650 <open+0xf0>
    a638:	e13ff917 	ldw	r4,-28(fp)
    a63c:	000a4680 	call	a468 <alt_file_locked>
    a640:	e0bff715 	stw	r2,-36(fp)
    a644:	e0bff717 	ldw	r2,-36(fp)
    a648:	1004803a 	cmplt	r2,r2,zero
    a64c:	1000131e 	bne	r2,zero,a69c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a650:	e0bffa17 	ldw	r2,-24(fp)
    a654:	10800317 	ldw	r2,12(r2)
    a658:	1005003a 	cmpeq	r2,r2,zero
    a65c:	1000091e 	bne	r2,zero,a684 <open+0x124>
    a660:	e0bffa17 	ldw	r2,-24(fp)
    a664:	10800317 	ldw	r2,12(r2)
    a668:	e13ff917 	ldw	r4,-28(fp)
    a66c:	e17ffb17 	ldw	r5,-20(fp)
    a670:	e1bffc17 	ldw	r6,-16(fp)
    a674:	e1fffd17 	ldw	r7,-12(fp)
    a678:	103ee83a 	callr	r2
    a67c:	e0bfff15 	stw	r2,-4(fp)
    a680:	00000106 	br	a688 <open+0x128>
    a684:	e03fff15 	stw	zero,-4(fp)
    a688:	e0bfff17 	ldw	r2,-4(fp)
    a68c:	e0bff715 	stw	r2,-36(fp)
    a690:	00000206 	br	a69c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a694:	00bffb44 	movi	r2,-19
    a698:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a69c:	e0bff717 	ldw	r2,-36(fp)
    a6a0:	1004403a 	cmpge	r2,r2,zero
    a6a4:	1000091e 	bne	r2,zero,a6cc <open+0x16c>
  {
    alt_release_fd (index);  
    a6a8:	e13ff817 	ldw	r4,-32(fp)
    a6ac:	000a74c0 	call	a74c <alt_release_fd>
    ALT_ERRNO = -status;
    a6b0:	000a6ec0 	call	a6ec <alt_get_errno>
    a6b4:	e0fff717 	ldw	r3,-36(fp)
    a6b8:	00c7c83a 	sub	r3,zero,r3
    a6bc:	10c00015 	stw	r3,0(r2)
    return -1;
    a6c0:	00bfffc4 	movi	r2,-1
    a6c4:	e0bffe15 	stw	r2,-8(fp)
    a6c8:	00000206 	br	a6d4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    a6cc:	e0bff817 	ldw	r2,-32(fp)
    a6d0:	e0bffe15 	stw	r2,-8(fp)
    a6d4:	e0bffe17 	ldw	r2,-8(fp)
}
    a6d8:	e037883a 	mov	sp,fp
    a6dc:	dfc00117 	ldw	ra,4(sp)
    a6e0:	df000017 	ldw	fp,0(sp)
    a6e4:	dec00204 	addi	sp,sp,8
    a6e8:	f800283a 	ret

0000a6ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a6ec:	defffd04 	addi	sp,sp,-12
    a6f0:	dfc00215 	stw	ra,8(sp)
    a6f4:	df000115 	stw	fp,4(sp)
    a6f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a6fc:	00800074 	movhi	r2,1
    a700:	10b21404 	addi	r2,r2,-14256
    a704:	10800017 	ldw	r2,0(r2)
    a708:	1005003a 	cmpeq	r2,r2,zero
    a70c:	1000061e 	bne	r2,zero,a728 <alt_get_errno+0x3c>
    a710:	00800074 	movhi	r2,1
    a714:	10b21404 	addi	r2,r2,-14256
    a718:	10800017 	ldw	r2,0(r2)
    a71c:	103ee83a 	callr	r2
    a720:	e0bfff15 	stw	r2,-4(fp)
    a724:	00000306 	br	a734 <alt_get_errno+0x48>
    a728:	00800074 	movhi	r2,1
    a72c:	10b7de04 	addi	r2,r2,-8328
    a730:	e0bfff15 	stw	r2,-4(fp)
    a734:	e0bfff17 	ldw	r2,-4(fp)
}
    a738:	e037883a 	mov	sp,fp
    a73c:	dfc00117 	ldw	ra,4(sp)
    a740:	df000017 	ldw	fp,0(sp)
    a744:	dec00204 	addi	sp,sp,8
    a748:	f800283a 	ret

0000a74c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a74c:	defffc04 	addi	sp,sp,-16
    a750:	dfc00315 	stw	ra,12(sp)
    a754:	df000215 	stw	fp,8(sp)
    a758:	dc000115 	stw	r16,4(sp)
    a75c:	df000104 	addi	fp,sp,4
    a760:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a764:	e0bfff17 	ldw	r2,-4(fp)
    a768:	108000d0 	cmplti	r2,r2,3
    a76c:	10000f1e 	bne	r2,zero,a7ac <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    a770:	e13fff17 	ldw	r4,-4(fp)
    a774:	04000074 	movhi	r16,1
    a778:	8430af04 	addi	r16,r16,-15684
    a77c:	01400304 	movi	r5,12
    a780:	000849c0 	call	849c <__mulsi3>
    a784:	1405883a 	add	r2,r2,r16
    a788:	10800204 	addi	r2,r2,8
    a78c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a790:	e13fff17 	ldw	r4,-4(fp)
    a794:	04000074 	movhi	r16,1
    a798:	8430af04 	addi	r16,r16,-15684
    a79c:	01400304 	movi	r5,12
    a7a0:	000849c0 	call	849c <__mulsi3>
    a7a4:	1405883a 	add	r2,r2,r16
    a7a8:	10000015 	stw	zero,0(r2)
  }
}
    a7ac:	e037883a 	mov	sp,fp
    a7b0:	dfc00217 	ldw	ra,8(sp)
    a7b4:	df000117 	ldw	fp,4(sp)
    a7b8:	dc000017 	ldw	r16,0(sp)
    a7bc:	dec00304 	addi	sp,sp,12
    a7c0:	f800283a 	ret

0000a7c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a7c4:	defffa04 	addi	sp,sp,-24
    a7c8:	df000515 	stw	fp,20(sp)
    a7cc:	df000504 	addi	fp,sp,20
    a7d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a7d4:	0005303a 	rdctl	r2,status
    a7d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a7dc:	e0fffd17 	ldw	r3,-12(fp)
    a7e0:	00bfff84 	movi	r2,-2
    a7e4:	1884703a 	and	r2,r3,r2
    a7e8:	1001703a 	wrctl	status,r2
  
  return context;
    a7ec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a7f0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    a7f4:	e0bfff17 	ldw	r2,-4(fp)
    a7f8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a7fc:	e0bffc17 	ldw	r2,-16(fp)
    a800:	10c00017 	ldw	r3,0(r2)
    a804:	e0bffc17 	ldw	r2,-16(fp)
    a808:	10800117 	ldw	r2,4(r2)
    a80c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    a810:	e0bffc17 	ldw	r2,-16(fp)
    a814:	10c00117 	ldw	r3,4(r2)
    a818:	e0bffc17 	ldw	r2,-16(fp)
    a81c:	10800017 	ldw	r2,0(r2)
    a820:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a824:	e0fffc17 	ldw	r3,-16(fp)
    a828:	e0bffc17 	ldw	r2,-16(fp)
    a82c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    a830:	e0fffc17 	ldw	r3,-16(fp)
    a834:	e0bffc17 	ldw	r2,-16(fp)
    a838:	18800015 	stw	r2,0(r3)
    a83c:	e0bffe17 	ldw	r2,-8(fp)
    a840:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a844:	e0bffb17 	ldw	r2,-20(fp)
    a848:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a84c:	e037883a 	mov	sp,fp
    a850:	df000017 	ldw	fp,0(sp)
    a854:	dec00104 	addi	sp,sp,4
    a858:	f800283a 	ret

0000a85c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a85c:	defffb04 	addi	sp,sp,-20
    a860:	dfc00415 	stw	ra,16(sp)
    a864:	df000315 	stw	fp,12(sp)
    a868:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a86c:	d0a00717 	ldw	r2,-32740(gp)
    a870:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a874:	d0a5ce17 	ldw	r2,-26824(gp)
    a878:	10800044 	addi	r2,r2,1
    a87c:	d0a5ce15 	stw	r2,-26824(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a880:	00003106 	br	a948 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    a884:	e0bffe17 	ldw	r2,-8(fp)
    a888:	10800017 	ldw	r2,0(r2)
    a88c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a890:	e0bffe17 	ldw	r2,-8(fp)
    a894:	10800403 	ldbu	r2,16(r2)
    a898:	10803fcc 	andi	r2,r2,255
    a89c:	1005003a 	cmpeq	r2,r2,zero
    a8a0:	1000051e 	bne	r2,zero,a8b8 <alt_tick+0x5c>
    a8a4:	d0a5ce17 	ldw	r2,-26824(gp)
    a8a8:	1004c03a 	cmpne	r2,r2,zero
    a8ac:	1000021e 	bne	r2,zero,a8b8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    a8b0:	e0bffe17 	ldw	r2,-8(fp)
    a8b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a8b8:	e0bffe17 	ldw	r2,-8(fp)
    a8bc:	10c00217 	ldw	r3,8(r2)
    a8c0:	d0a5ce17 	ldw	r2,-26824(gp)
    a8c4:	10c01e36 	bltu	r2,r3,a940 <alt_tick+0xe4>
    a8c8:	e0bffe17 	ldw	r2,-8(fp)
    a8cc:	10800403 	ldbu	r2,16(r2)
    a8d0:	10803fcc 	andi	r2,r2,255
    a8d4:	1004c03a 	cmpne	r2,r2,zero
    a8d8:	1000191e 	bne	r2,zero,a940 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    a8dc:	e0bffe17 	ldw	r2,-8(fp)
    a8e0:	10c00317 	ldw	r3,12(r2)
    a8e4:	e0bffe17 	ldw	r2,-8(fp)
    a8e8:	11000517 	ldw	r4,20(r2)
    a8ec:	183ee83a 	callr	r3
    a8f0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a8f4:	e0bffd17 	ldw	r2,-12(fp)
    a8f8:	1004c03a 	cmpne	r2,r2,zero
    a8fc:	1000031e 	bne	r2,zero,a90c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    a900:	e13ffe17 	ldw	r4,-8(fp)
    a904:	000a7c40 	call	a7c4 <alt_alarm_stop>
    a908:	00000d06 	br	a940 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    a90c:	e0bffe17 	ldw	r2,-8(fp)
    a910:	10c00217 	ldw	r3,8(r2)
    a914:	e0bffd17 	ldw	r2,-12(fp)
    a918:	1887883a 	add	r3,r3,r2
    a91c:	e0bffe17 	ldw	r2,-8(fp)
    a920:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a924:	e0bffe17 	ldw	r2,-8(fp)
    a928:	10c00217 	ldw	r3,8(r2)
    a92c:	d0a5ce17 	ldw	r2,-26824(gp)
    a930:	1880032e 	bgeu	r3,r2,a940 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    a934:	e0fffe17 	ldw	r3,-8(fp)
    a938:	00800044 	movi	r2,1
    a93c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    a940:	e0bfff17 	ldw	r2,-4(fp)
    a944:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a948:	d0e00704 	addi	r3,gp,-32740
    a94c:	e0bffe17 	ldw	r2,-8(fp)
    a950:	10ffcc1e 	bne	r2,r3,a884 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    a954:	e037883a 	mov	sp,fp
    a958:	dfc00117 	ldw	ra,4(sp)
    a95c:	df000017 	ldw	fp,0(sp)
    a960:	dec00204 	addi	sp,sp,8
    a964:	f800283a 	ret

0000a968 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    a968:	deffff04 	addi	sp,sp,-4
    a96c:	df000015 	stw	fp,0(sp)
    a970:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a974:	000170fa 	wrctl	ienable,zero
}
    a978:	e037883a 	mov	sp,fp
    a97c:	df000017 	ldw	fp,0(sp)
    a980:	dec00104 	addi	sp,sp,4
    a984:	f800283a 	ret

0000a988 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a988:	defff904 	addi	sp,sp,-28
    a98c:	dfc00615 	stw	ra,24(sp)
    a990:	df000515 	stw	fp,20(sp)
    a994:	df000504 	addi	fp,sp,20
    a998:	e13ffd15 	stw	r4,-12(fp)
    a99c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a9a0:	e0bffe17 	ldw	r2,-8(fp)
    a9a4:	10800017 	ldw	r2,0(r2)
    a9a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a9ac:	e13ffd17 	ldw	r4,-12(fp)
    a9b0:	000ad6c0 	call	ad6c <strlen>
    a9b4:	10800044 	addi	r2,r2,1
    a9b8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a9bc:	00000d06 	br	a9f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a9c0:	e0bffc17 	ldw	r2,-16(fp)
    a9c4:	11000217 	ldw	r4,8(r2)
    a9c8:	e1bffb17 	ldw	r6,-20(fp)
    a9cc:	e17ffd17 	ldw	r5,-12(fp)
    a9d0:	000ac580 	call	ac58 <memcmp>
    a9d4:	1004c03a 	cmpne	r2,r2,zero
    a9d8:	1000031e 	bne	r2,zero,a9e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a9dc:	e0bffc17 	ldw	r2,-16(fp)
    a9e0:	e0bfff15 	stw	r2,-4(fp)
    a9e4:	00000706 	br	aa04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a9e8:	e0bffc17 	ldw	r2,-16(fp)
    a9ec:	10800017 	ldw	r2,0(r2)
    a9f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a9f4:	e0fffe17 	ldw	r3,-8(fp)
    a9f8:	e0bffc17 	ldw	r2,-16(fp)
    a9fc:	10fff01e 	bne	r2,r3,a9c0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    aa00:	e03fff15 	stw	zero,-4(fp)
    aa04:	e0bfff17 	ldw	r2,-4(fp)
}
    aa08:	e037883a 	mov	sp,fp
    aa0c:	dfc00117 	ldw	ra,4(sp)
    aa10:	df000017 	ldw	fp,0(sp)
    aa14:	dec00204 	addi	sp,sp,8
    aa18:	f800283a 	ret

0000aa1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    aa1c:	defffa04 	addi	sp,sp,-24
    aa20:	dfc00515 	stw	ra,20(sp)
    aa24:	df000415 	stw	fp,16(sp)
    aa28:	df000404 	addi	fp,sp,16
    aa2c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    aa30:	00800074 	movhi	r2,1
    aa34:	10b20f04 	addi	r2,r2,-14276
    aa38:	10800017 	ldw	r2,0(r2)
    aa3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    aa40:	00003306 	br	ab10 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    aa44:	e0bffd17 	ldw	r2,-12(fp)
    aa48:	11000217 	ldw	r4,8(r2)
    aa4c:	000ad6c0 	call	ad6c <strlen>
    aa50:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    aa54:	e0bffd17 	ldw	r2,-12(fp)
    aa58:	10c00217 	ldw	r3,8(r2)
    aa5c:	e0bffc17 	ldw	r2,-16(fp)
    aa60:	1885883a 	add	r2,r3,r2
    aa64:	10bfffc4 	addi	r2,r2,-1
    aa68:	10800003 	ldbu	r2,0(r2)
    aa6c:	10803fcc 	andi	r2,r2,255
    aa70:	1080201c 	xori	r2,r2,128
    aa74:	10bfe004 	addi	r2,r2,-128
    aa78:	10800bd8 	cmpnei	r2,r2,47
    aa7c:	1000031e 	bne	r2,zero,aa8c <alt_find_file+0x70>
    {
      len -= 1;
    aa80:	e0bffc17 	ldw	r2,-16(fp)
    aa84:	10bfffc4 	addi	r2,r2,-1
    aa88:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    aa8c:	e0bffc17 	ldw	r2,-16(fp)
    aa90:	1007883a 	mov	r3,r2
    aa94:	e0bffe17 	ldw	r2,-8(fp)
    aa98:	1885883a 	add	r2,r3,r2
    aa9c:	10800003 	ldbu	r2,0(r2)
    aaa0:	10803fcc 	andi	r2,r2,255
    aaa4:	1080201c 	xori	r2,r2,128
    aaa8:	10bfe004 	addi	r2,r2,-128
    aaac:	10800be0 	cmpeqi	r2,r2,47
    aab0:	10000a1e 	bne	r2,zero,aadc <alt_find_file+0xc0>
    aab4:	e0bffc17 	ldw	r2,-16(fp)
    aab8:	1007883a 	mov	r3,r2
    aabc:	e0bffe17 	ldw	r2,-8(fp)
    aac0:	1885883a 	add	r2,r3,r2
    aac4:	10800003 	ldbu	r2,0(r2)
    aac8:	10803fcc 	andi	r2,r2,255
    aacc:	1080201c 	xori	r2,r2,128
    aad0:	10bfe004 	addi	r2,r2,-128
    aad4:	1004c03a 	cmpne	r2,r2,zero
    aad8:	10000a1e 	bne	r2,zero,ab04 <alt_find_file+0xe8>
    aadc:	e0bffd17 	ldw	r2,-12(fp)
    aae0:	11000217 	ldw	r4,8(r2)
    aae4:	e1bffc17 	ldw	r6,-16(fp)
    aae8:	e17ffe17 	ldw	r5,-8(fp)
    aaec:	000ac580 	call	ac58 <memcmp>
    aaf0:	1004c03a 	cmpne	r2,r2,zero
    aaf4:	1000031e 	bne	r2,zero,ab04 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    aaf8:	e0bffd17 	ldw	r2,-12(fp)
    aafc:	e0bfff15 	stw	r2,-4(fp)
    ab00:	00000806 	br	ab24 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    ab04:	e0bffd17 	ldw	r2,-12(fp)
    ab08:	10800017 	ldw	r2,0(r2)
    ab0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ab10:	00c00074 	movhi	r3,1
    ab14:	18f20f04 	addi	r3,r3,-14276
    ab18:	e0bffd17 	ldw	r2,-12(fp)
    ab1c:	10ffc91e 	bne	r2,r3,aa44 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    ab20:	e03fff15 	stw	zero,-4(fp)
    ab24:	e0bfff17 	ldw	r2,-4(fp)
}
    ab28:	e037883a 	mov	sp,fp
    ab2c:	dfc00117 	ldw	ra,4(sp)
    ab30:	df000017 	ldw	fp,0(sp)
    ab34:	dec00204 	addi	sp,sp,8
    ab38:	f800283a 	ret

0000ab3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    ab3c:	defffa04 	addi	sp,sp,-24
    ab40:	dfc00515 	stw	ra,20(sp)
    ab44:	df000415 	stw	fp,16(sp)
    ab48:	dc000315 	stw	r16,12(sp)
    ab4c:	df000304 	addi	fp,sp,12
    ab50:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    ab54:	00bffa04 	movi	r2,-24
    ab58:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ab5c:	e03ffe15 	stw	zero,-8(fp)
    ab60:	00002006 	br	abe4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    ab64:	e13ffe17 	ldw	r4,-8(fp)
    ab68:	04000074 	movhi	r16,1
    ab6c:	8430af04 	addi	r16,r16,-15684
    ab70:	01400304 	movi	r5,12
    ab74:	000849c0 	call	849c <__mulsi3>
    ab78:	1405883a 	add	r2,r2,r16
    ab7c:	10800017 	ldw	r2,0(r2)
    ab80:	1004c03a 	cmpne	r2,r2,zero
    ab84:	1000141e 	bne	r2,zero,abd8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    ab88:	e13ffe17 	ldw	r4,-8(fp)
    ab8c:	04000074 	movhi	r16,1
    ab90:	8430af04 	addi	r16,r16,-15684
    ab94:	01400304 	movi	r5,12
    ab98:	000849c0 	call	849c <__mulsi3>
    ab9c:	1407883a 	add	r3,r2,r16
    aba0:	e0bfff17 	ldw	r2,-4(fp)
    aba4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    aba8:	00800074 	movhi	r2,1
    abac:	10b21304 	addi	r2,r2,-14260
    abb0:	10c00017 	ldw	r3,0(r2)
    abb4:	e0bffe17 	ldw	r2,-8(fp)
    abb8:	1880040e 	bge	r3,r2,abcc <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    abbc:	00c00074 	movhi	r3,1
    abc0:	18f21304 	addi	r3,r3,-14260
    abc4:	e0bffe17 	ldw	r2,-8(fp)
    abc8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    abcc:	e0bffe17 	ldw	r2,-8(fp)
    abd0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    abd4:	00000606 	br	abf0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    abd8:	e0bffe17 	ldw	r2,-8(fp)
    abdc:	10800044 	addi	r2,r2,1
    abe0:	e0bffe15 	stw	r2,-8(fp)
    abe4:	e0bffe17 	ldw	r2,-8(fp)
    abe8:	10800810 	cmplti	r2,r2,32
    abec:	103fdd1e 	bne	r2,zero,ab64 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    abf0:	e0bffd17 	ldw	r2,-12(fp)
}
    abf4:	e037883a 	mov	sp,fp
    abf8:	dfc00217 	ldw	ra,8(sp)
    abfc:	df000117 	ldw	fp,4(sp)
    ac00:	dc000017 	ldw	r16,0(sp)
    ac04:	dec00304 	addi	sp,sp,12
    ac08:	f800283a 	ret

0000ac0c <atexit>:
    ac0c:	200b883a 	mov	r5,r4
    ac10:	000d883a 	mov	r6,zero
    ac14:	0009883a 	mov	r4,zero
    ac18:	000f883a 	mov	r7,zero
    ac1c:	000ade01 	jmpi	ade0 <__register_exitproc>

0000ac20 <exit>:
    ac20:	defffe04 	addi	sp,sp,-8
    ac24:	000b883a 	mov	r5,zero
    ac28:	dc000015 	stw	r16,0(sp)
    ac2c:	dfc00115 	stw	ra,4(sp)
    ac30:	2021883a 	mov	r16,r4
    ac34:	000af180 	call	af18 <__call_exitprocs>
    ac38:	00800074 	movhi	r2,1
    ac3c:	10b21904 	addi	r2,r2,-14236
    ac40:	11000017 	ldw	r4,0(r2)
    ac44:	20800f17 	ldw	r2,60(r4)
    ac48:	10000126 	beq	r2,zero,ac50 <exit+0x30>
    ac4c:	103ee83a 	callr	r2
    ac50:	8009883a 	mov	r4,r16
    ac54:	000b1080 	call	b108 <_exit>

0000ac58 <memcmp>:
    ac58:	00c000c4 	movi	r3,3
    ac5c:	1980032e 	bgeu	r3,r6,ac6c <memcmp+0x14>
    ac60:	2144b03a 	or	r2,r4,r5
    ac64:	10c4703a 	and	r2,r2,r3
    ac68:	10000f26 	beq	r2,zero,aca8 <memcmp+0x50>
    ac6c:	31ffffc4 	addi	r7,r6,-1
    ac70:	3000061e 	bne	r6,zero,ac8c <memcmp+0x34>
    ac74:	00000a06 	br	aca0 <memcmp+0x48>
    ac78:	39ffffc4 	addi	r7,r7,-1
    ac7c:	00bfffc4 	movi	r2,-1
    ac80:	21000044 	addi	r4,r4,1
    ac84:	29400044 	addi	r5,r5,1
    ac88:	38800526 	beq	r7,r2,aca0 <memcmp+0x48>
    ac8c:	20c00003 	ldbu	r3,0(r4)
    ac90:	28800003 	ldbu	r2,0(r5)
    ac94:	18bff826 	beq	r3,r2,ac78 <memcmp+0x20>
    ac98:	1885c83a 	sub	r2,r3,r2
    ac9c:	f800283a 	ret
    aca0:	0005883a 	mov	r2,zero
    aca4:	f800283a 	ret
    aca8:	180f883a 	mov	r7,r3
    acac:	20c00017 	ldw	r3,0(r4)
    acb0:	28800017 	ldw	r2,0(r5)
    acb4:	18bfed1e 	bne	r3,r2,ac6c <memcmp+0x14>
    acb8:	31bfff04 	addi	r6,r6,-4
    acbc:	21000104 	addi	r4,r4,4
    acc0:	29400104 	addi	r5,r5,4
    acc4:	39bff936 	bltu	r7,r6,acac <memcmp+0x54>
    acc8:	003fe806 	br	ac6c <memcmp+0x14>

0000accc <memcpy>:
    accc:	01c003c4 	movi	r7,15
    acd0:	2007883a 	mov	r3,r4
    acd4:	3980032e 	bgeu	r7,r6,ace4 <memcpy+0x18>
    acd8:	2904b03a 	or	r2,r5,r4
    acdc:	108000cc 	andi	r2,r2,3
    ace0:	10000926 	beq	r2,zero,ad08 <memcpy+0x3c>
    ace4:	30000626 	beq	r6,zero,ad00 <memcpy+0x34>
    ace8:	30cd883a 	add	r6,r6,r3
    acec:	28800003 	ldbu	r2,0(r5)
    acf0:	29400044 	addi	r5,r5,1
    acf4:	18800005 	stb	r2,0(r3)
    acf8:	18c00044 	addi	r3,r3,1
    acfc:	30fffb1e 	bne	r6,r3,acec <memcpy+0x20>
    ad00:	2005883a 	mov	r2,r4
    ad04:	f800283a 	ret
    ad08:	3811883a 	mov	r8,r7
    ad0c:	200f883a 	mov	r7,r4
    ad10:	28c00017 	ldw	r3,0(r5)
    ad14:	31bffc04 	addi	r6,r6,-16
    ad18:	38c00015 	stw	r3,0(r7)
    ad1c:	28800117 	ldw	r2,4(r5)
    ad20:	38800115 	stw	r2,4(r7)
    ad24:	28c00217 	ldw	r3,8(r5)
    ad28:	38c00215 	stw	r3,8(r7)
    ad2c:	28800317 	ldw	r2,12(r5)
    ad30:	29400404 	addi	r5,r5,16
    ad34:	38800315 	stw	r2,12(r7)
    ad38:	39c00404 	addi	r7,r7,16
    ad3c:	41bff436 	bltu	r8,r6,ad10 <memcpy+0x44>
    ad40:	008000c4 	movi	r2,3
    ad44:	1180072e 	bgeu	r2,r6,ad64 <memcpy+0x98>
    ad48:	1007883a 	mov	r3,r2
    ad4c:	28800017 	ldw	r2,0(r5)
    ad50:	31bfff04 	addi	r6,r6,-4
    ad54:	29400104 	addi	r5,r5,4
    ad58:	38800015 	stw	r2,0(r7)
    ad5c:	39c00104 	addi	r7,r7,4
    ad60:	19bffa36 	bltu	r3,r6,ad4c <memcpy+0x80>
    ad64:	3807883a 	mov	r3,r7
    ad68:	003fde06 	br	ace4 <memcpy+0x18>

0000ad6c <strlen>:
    ad6c:	208000cc 	andi	r2,r4,3
    ad70:	2011883a 	mov	r8,r4
    ad74:	1000161e 	bne	r2,zero,add0 <strlen+0x64>
    ad78:	20c00017 	ldw	r3,0(r4)
    ad7c:	017fbff4 	movhi	r5,65279
    ad80:	297fbfc4 	addi	r5,r5,-257
    ad84:	01e02074 	movhi	r7,32897
    ad88:	39e02004 	addi	r7,r7,-32640
    ad8c:	1945883a 	add	r2,r3,r5
    ad90:	11c4703a 	and	r2,r2,r7
    ad94:	00c6303a 	nor	r3,zero,r3
    ad98:	1886703a 	and	r3,r3,r2
    ad9c:	18000c1e 	bne	r3,zero,add0 <strlen+0x64>
    ada0:	280d883a 	mov	r6,r5
    ada4:	380b883a 	mov	r5,r7
    ada8:	21000104 	addi	r4,r4,4
    adac:	20800017 	ldw	r2,0(r4)
    adb0:	1187883a 	add	r3,r2,r6
    adb4:	1946703a 	and	r3,r3,r5
    adb8:	0084303a 	nor	r2,zero,r2
    adbc:	10c4703a 	and	r2,r2,r3
    adc0:	103ff926 	beq	r2,zero,ada8 <strlen+0x3c>
    adc4:	20800007 	ldb	r2,0(r4)
    adc8:	10000326 	beq	r2,zero,add8 <strlen+0x6c>
    adcc:	21000044 	addi	r4,r4,1
    add0:	20800007 	ldb	r2,0(r4)
    add4:	103ffd1e 	bne	r2,zero,adcc <strlen+0x60>
    add8:	2205c83a 	sub	r2,r4,r8
    addc:	f800283a 	ret

0000ade0 <__register_exitproc>:
    ade0:	defffa04 	addi	sp,sp,-24
    ade4:	00800074 	movhi	r2,1
    ade8:	10b21904 	addi	r2,r2,-14236
    adec:	dc000015 	stw	r16,0(sp)
    adf0:	14000017 	ldw	r16,0(r2)
    adf4:	dd000415 	stw	r20,16(sp)
    adf8:	2829883a 	mov	r20,r5
    adfc:	81405217 	ldw	r5,328(r16)
    ae00:	dcc00315 	stw	r19,12(sp)
    ae04:	dc800215 	stw	r18,8(sp)
    ae08:	dc400115 	stw	r17,4(sp)
    ae0c:	dfc00515 	stw	ra,20(sp)
    ae10:	2023883a 	mov	r17,r4
    ae14:	3027883a 	mov	r19,r6
    ae18:	3825883a 	mov	r18,r7
    ae1c:	28002526 	beq	r5,zero,aeb4 <__register_exitproc+0xd4>
    ae20:	29000117 	ldw	r4,4(r5)
    ae24:	008007c4 	movi	r2,31
    ae28:	11002716 	blt	r2,r4,aec8 <__register_exitproc+0xe8>
    ae2c:	8800101e 	bne	r17,zero,ae70 <__register_exitproc+0x90>
    ae30:	2105883a 	add	r2,r4,r4
    ae34:	1085883a 	add	r2,r2,r2
    ae38:	20c00044 	addi	r3,r4,1
    ae3c:	1145883a 	add	r2,r2,r5
    ae40:	0009883a 	mov	r4,zero
    ae44:	15000215 	stw	r20,8(r2)
    ae48:	28c00115 	stw	r3,4(r5)
    ae4c:	2005883a 	mov	r2,r4
    ae50:	dfc00517 	ldw	ra,20(sp)
    ae54:	dd000417 	ldw	r20,16(sp)
    ae58:	dcc00317 	ldw	r19,12(sp)
    ae5c:	dc800217 	ldw	r18,8(sp)
    ae60:	dc400117 	ldw	r17,4(sp)
    ae64:	dc000017 	ldw	r16,0(sp)
    ae68:	dec00604 	addi	sp,sp,24
    ae6c:	f800283a 	ret
    ae70:	29802204 	addi	r6,r5,136
    ae74:	00800044 	movi	r2,1
    ae78:	110e983a 	sll	r7,r2,r4
    ae7c:	30c04017 	ldw	r3,256(r6)
    ae80:	2105883a 	add	r2,r4,r4
    ae84:	1085883a 	add	r2,r2,r2
    ae88:	1185883a 	add	r2,r2,r6
    ae8c:	19c6b03a 	or	r3,r3,r7
    ae90:	14802015 	stw	r18,128(r2)
    ae94:	14c00015 	stw	r19,0(r2)
    ae98:	00800084 	movi	r2,2
    ae9c:	30c04015 	stw	r3,256(r6)
    aea0:	88bfe31e 	bne	r17,r2,ae30 <__register_exitproc+0x50>
    aea4:	30804117 	ldw	r2,260(r6)
    aea8:	11c4b03a 	or	r2,r2,r7
    aeac:	30804115 	stw	r2,260(r6)
    aeb0:	003fdf06 	br	ae30 <__register_exitproc+0x50>
    aeb4:	00800074 	movhi	r2,1
    aeb8:	10b81f04 	addi	r2,r2,-8068
    aebc:	100b883a 	mov	r5,r2
    aec0:	80805215 	stw	r2,328(r16)
    aec4:	003fd606 	br	ae20 <__register_exitproc+0x40>
    aec8:	00800034 	movhi	r2,0
    aecc:	10800004 	addi	r2,r2,0
    aed0:	1000021e 	bne	r2,zero,aedc <__register_exitproc+0xfc>
    aed4:	013fffc4 	movi	r4,-1
    aed8:	003fdc06 	br	ae4c <__register_exitproc+0x6c>
    aedc:	01006404 	movi	r4,400
    aee0:	103ee83a 	callr	r2
    aee4:	1007883a 	mov	r3,r2
    aee8:	103ffa26 	beq	r2,zero,aed4 <__register_exitproc+0xf4>
    aeec:	80805217 	ldw	r2,328(r16)
    aef0:	180b883a 	mov	r5,r3
    aef4:	18000115 	stw	zero,4(r3)
    aef8:	18800015 	stw	r2,0(r3)
    aefc:	80c05215 	stw	r3,328(r16)
    af00:	18006215 	stw	zero,392(r3)
    af04:	18006315 	stw	zero,396(r3)
    af08:	0009883a 	mov	r4,zero
    af0c:	883fc826 	beq	r17,zero,ae30 <__register_exitproc+0x50>
    af10:	003fd706 	br	ae70 <__register_exitproc+0x90>

0000af14 <register_fini>:
    af14:	f800283a 	ret

0000af18 <__call_exitprocs>:
    af18:	00800074 	movhi	r2,1
    af1c:	10b21904 	addi	r2,r2,-14236
    af20:	10800017 	ldw	r2,0(r2)
    af24:	defff304 	addi	sp,sp,-52
    af28:	df000b15 	stw	fp,44(sp)
    af2c:	d8800115 	stw	r2,4(sp)
    af30:	00800034 	movhi	r2,0
    af34:	10800004 	addi	r2,r2,0
    af38:	1005003a 	cmpeq	r2,r2,zero
    af3c:	d8800215 	stw	r2,8(sp)
    af40:	d8800117 	ldw	r2,4(sp)
    af44:	dd400815 	stw	r21,32(sp)
    af48:	dd000715 	stw	r20,28(sp)
    af4c:	10805204 	addi	r2,r2,328
    af50:	dfc00c15 	stw	ra,48(sp)
    af54:	ddc00a15 	stw	r23,40(sp)
    af58:	dd800915 	stw	r22,36(sp)
    af5c:	dcc00615 	stw	r19,24(sp)
    af60:	dc800515 	stw	r18,20(sp)
    af64:	dc400415 	stw	r17,16(sp)
    af68:	dc000315 	stw	r16,12(sp)
    af6c:	282b883a 	mov	r21,r5
    af70:	2039883a 	mov	fp,r4
    af74:	d8800015 	stw	r2,0(sp)
    af78:	2829003a 	cmpeq	r20,r5,zero
    af7c:	d8800117 	ldw	r2,4(sp)
    af80:	14405217 	ldw	r17,328(r2)
    af84:	88001026 	beq	r17,zero,afc8 <__call_exitprocs+0xb0>
    af88:	ddc00017 	ldw	r23,0(sp)
    af8c:	88800117 	ldw	r2,4(r17)
    af90:	8c802204 	addi	r18,r17,136
    af94:	143fffc4 	addi	r16,r2,-1
    af98:	80000916 	blt	r16,zero,afc0 <__call_exitprocs+0xa8>
    af9c:	05bfffc4 	movi	r22,-1
    afa0:	a000151e 	bne	r20,zero,aff8 <__call_exitprocs+0xe0>
    afa4:	8409883a 	add	r4,r16,r16
    afa8:	2105883a 	add	r2,r4,r4
    afac:	1485883a 	add	r2,r2,r18
    afb0:	10c02017 	ldw	r3,128(r2)
    afb4:	a8c01126 	beq	r21,r3,affc <__call_exitprocs+0xe4>
    afb8:	843fffc4 	addi	r16,r16,-1
    afbc:	85bff81e 	bne	r16,r22,afa0 <__call_exitprocs+0x88>
    afc0:	d8800217 	ldw	r2,8(sp)
    afc4:	10003126 	beq	r2,zero,b08c <__call_exitprocs+0x174>
    afc8:	dfc00c17 	ldw	ra,48(sp)
    afcc:	df000b17 	ldw	fp,44(sp)
    afd0:	ddc00a17 	ldw	r23,40(sp)
    afd4:	dd800917 	ldw	r22,36(sp)
    afd8:	dd400817 	ldw	r21,32(sp)
    afdc:	dd000717 	ldw	r20,28(sp)
    afe0:	dcc00617 	ldw	r19,24(sp)
    afe4:	dc800517 	ldw	r18,20(sp)
    afe8:	dc400417 	ldw	r17,16(sp)
    afec:	dc000317 	ldw	r16,12(sp)
    aff0:	dec00d04 	addi	sp,sp,52
    aff4:	f800283a 	ret
    aff8:	8409883a 	add	r4,r16,r16
    affc:	88c00117 	ldw	r3,4(r17)
    b000:	2105883a 	add	r2,r4,r4
    b004:	1445883a 	add	r2,r2,r17
    b008:	18ffffc4 	addi	r3,r3,-1
    b00c:	11800217 	ldw	r6,8(r2)
    b010:	1c001526 	beq	r3,r16,b068 <__call_exitprocs+0x150>
    b014:	10000215 	stw	zero,8(r2)
    b018:	303fe726 	beq	r6,zero,afb8 <__call_exitprocs+0xa0>
    b01c:	00c00044 	movi	r3,1
    b020:	1c06983a 	sll	r3,r3,r16
    b024:	90804017 	ldw	r2,256(r18)
    b028:	8cc00117 	ldw	r19,4(r17)
    b02c:	1884703a 	and	r2,r3,r2
    b030:	10001426 	beq	r2,zero,b084 <__call_exitprocs+0x16c>
    b034:	90804117 	ldw	r2,260(r18)
    b038:	1884703a 	and	r2,r3,r2
    b03c:	10000c1e 	bne	r2,zero,b070 <__call_exitprocs+0x158>
    b040:	2105883a 	add	r2,r4,r4
    b044:	1485883a 	add	r2,r2,r18
    b048:	11400017 	ldw	r5,0(r2)
    b04c:	e009883a 	mov	r4,fp
    b050:	303ee83a 	callr	r6
    b054:	88800117 	ldw	r2,4(r17)
    b058:	98bfc81e 	bne	r19,r2,af7c <__call_exitprocs+0x64>
    b05c:	b8800017 	ldw	r2,0(r23)
    b060:	147fd526 	beq	r2,r17,afb8 <__call_exitprocs+0xa0>
    b064:	003fc506 	br	af7c <__call_exitprocs+0x64>
    b068:	8c000115 	stw	r16,4(r17)
    b06c:	003fea06 	br	b018 <__call_exitprocs+0x100>
    b070:	2105883a 	add	r2,r4,r4
    b074:	1485883a 	add	r2,r2,r18
    b078:	11000017 	ldw	r4,0(r2)
    b07c:	303ee83a 	callr	r6
    b080:	003ff406 	br	b054 <__call_exitprocs+0x13c>
    b084:	303ee83a 	callr	r6
    b088:	003ff206 	br	b054 <__call_exitprocs+0x13c>
    b08c:	88800117 	ldw	r2,4(r17)
    b090:	1000081e 	bne	r2,zero,b0b4 <__call_exitprocs+0x19c>
    b094:	89000017 	ldw	r4,0(r17)
    b098:	20000726 	beq	r4,zero,b0b8 <__call_exitprocs+0x1a0>
    b09c:	b9000015 	stw	r4,0(r23)
    b0a0:	8809883a 	mov	r4,r17
    b0a4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    b0a8:	bc400017 	ldw	r17,0(r23)
    b0ac:	883fb71e 	bne	r17,zero,af8c <__call_exitprocs+0x74>
    b0b0:	003fc506 	br	afc8 <__call_exitprocs+0xb0>
    b0b4:	89000017 	ldw	r4,0(r17)
    b0b8:	882f883a 	mov	r23,r17
    b0bc:	2023883a 	mov	r17,r4
    b0c0:	883fb21e 	bne	r17,zero,af8c <__call_exitprocs+0x74>
    b0c4:	003fc006 	br	afc8 <__call_exitprocs+0xb0>

0000b0c8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    b0c8:	defffd04 	addi	sp,sp,-12
    b0cc:	df000215 	stw	fp,8(sp)
    b0d0:	df000204 	addi	fp,sp,8
    b0d4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    b0d8:	e0bfff17 	ldw	r2,-4(fp)
    b0dc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b0e0:	e0bffe17 	ldw	r2,-8(fp)
    b0e4:	1005003a 	cmpeq	r2,r2,zero
    b0e8:	1000021e 	bne	r2,zero,b0f4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    b0ec:	002af070 	cmpltui	zero,zero,43969
    b0f0:	00000106 	br	b0f8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    b0f4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    b0f8:	e037883a 	mov	sp,fp
    b0fc:	df000017 	ldw	fp,0(sp)
    b100:	dec00104 	addi	sp,sp,4
    b104:	f800283a 	ret

0000b108 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b108:	defffd04 	addi	sp,sp,-12
    b10c:	dfc00215 	stw	ra,8(sp)
    b110:	df000115 	stw	fp,4(sp)
    b114:	df000104 	addi	fp,sp,4
    b118:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    b11c:	e13fff17 	ldw	r4,-4(fp)
    b120:	000b0c80 	call	b0c8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b124:	003fff06 	br	b124 <_exit+0x1c>
    b128:	0000af14 	movui	zero,700
