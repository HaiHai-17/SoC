
bai61.elf:     file format elf32-littlenios2
bai61.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000031dc memsz 0x000031dc flags r-x
    LOAD off    0x000041fc vaddr 0x0000b1fc paddr 0x0000c8f4 align 2**12
         filesz 0x000016f8 memsz 0x000016f8 flags rw-
    LOAD off    0x00005fec vaddr 0x0000dfec paddr 0x0000dfec align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003004  000081b4  000081b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  0000b1b8  0000b1b8  000041b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016f8  0000b1fc  0000c8f4  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  0000dfec  0000dfec  00005fec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000058f4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005b8  00000000  00000000  00005920  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000008dc  00000000  00000000  00005ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000afc5  00000000  00000000  000067b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029a5  00000000  00000000  00011779  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007063  00000000  00000000  0001411e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a14  00000000  00000000  0001b184  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000bfa  00000000  00000000  0001bb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ff0  00000000  00000000  0001c792  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001d784  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001d798  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001f457  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001f45a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001f466  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001f467  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001f468  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001f473  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001f47e  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0001f489  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000011  00000000  00000000  0001f48f  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002ce2d  00000000  00000000  0001f4a0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b4 l    d  .text	00000000 .text
0000b1b8 l    d  .rodata	00000000 .rodata
0000b1fc l    d  .rwdata	00000000 .rwdata
0000dfec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000081ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 bai61.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000085e0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b1fc l     O .rwdata	00001060 jtag_uart_0
0000c25c l     O .rwdata	000000c4 uart_0
00008750 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00008990 l     F .text	00000228 altera_avalon_jtag_uart_irq
00008bb8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000093f4 l     F .text	0000009c altera_avalon_uart_irq
00009490 l     F .text	000000e0 altera_avalon_uart_rxirq
00009570 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000995c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00009b84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00009e38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009eb4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009f94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a3a4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000a4f4 l     F .text	000000f8 alt_file_locked
0000a778 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000c4c8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000afa0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000b154 l     F .text	00000040 alt_sim_halt
0000864c g     F .text	0000006c alt_main
0000e008 g     O .bss	00000100 alt_irq
0000c8f4 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000e004 g     O .bss	00000004 errno
0000dff0 g     O .bss	00000004 alt_argv
000148c8 g       *ABS*	00000000 _gp
0000c348 g     O .rwdata	00000180 alt_fd_list
0000aa14 g     F .text	00000094 alt_find_dev
0000ad58 g     F .text	000000a0 memcpy
0000a47c g     F .text	00000078 alt_io_redirect
0000b1b8 g       *ABS*	00000000 __DTOR_END__
00008dd0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000c8d8 g     O .rwdata	00000004 alt_max_fd
0000c8f0 g     O .rwdata	00000004 _global_impure_ptr
0000e298 g       *ABS*	00000000 __bss_end
0000a2ac g     F .text	000000f8 alt_iic_isr_register
0000a8e8 g     F .text	0000010c alt_tick
0000932c g     F .text	000000c8 altera_avalon_uart_init
0000a264 g     F .text	00000048 alt_ic_irq_enabled
0000a850 g     F .text	00000098 alt_alarm_stop
0000dff8 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000c8 alt_irq_handler
0000c320 g     O .rwdata	00000028 alt_dev_null
00009e98 g     F .text	0000001c alt_dcache_flush_all
0000c8f4 g       *ABS*	00000000 __ram_rwdata_end
0000c8d0 g     O .rwdata	00000008 alt_dev_list
0000b1fc g       *ABS*	00000000 __ram_rodata_end
0000e298 g       *ABS*	00000000 end
000099bc g     F .text	000001c8 altera_avalon_uart_write
000088d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000b1b4 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000928c g     F .text	00000058 altera_avalon_uart_write_fd
000092e4 g     F .text	00000048 altera_avalon_uart_close_fd
00008ff4 g     F .text	00000240 altera_avalon_jtag_uart_write
0000afa4 g     F .text	000001b0 __call_exitprocs
000081b4 g     F .text	0000003c _start
0000dffc g     O .bss	00000004 _alt_tick_rate
0000e000 g     O .bss	00000004 _alt_nticks
000086ec g     F .text	00000064 alt_sys_init
0000ae6c g     F .text	00000134 __register_exitproc
00008c68 g     F .text	00000074 altera_avalon_jtag_uart_close
00008528 g     F .text	00000038 __mulsi3
0000b1fc g       *ABS*	00000000 __ram_rwdata_start
0000b1b8 g       *ABS*	00000000 __ram_rodata_start
00008788 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000abc8 g     F .text	000000d0 alt_get_fd
0000ace4 g     F .text	00000074 memcmp
00008838 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000e298 g       *ABS*	00000000 __alt_stack_base
00008880 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000aaa8 g     F .text	00000120 alt_find_file
00009ee0 g     F .text	000000b4 alt_dev_llist_insert
0000dfec g       *ABS*	00000000 __bss_start
00008244 g     F .text	000002e4 main
0000dff4 g     O .bss	00000004 alt_envp
000087e0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000e108 g     O .bss	00000190 _atexit0
0000c8dc g     O .rwdata	00000004 alt_errno
0000b1b8 g       *ABS*	00000000 __CTOR_END__
0000b1b8 g       *ABS*	00000000 __flash_rodata_start
0000b1b8 g       *ABS*	00000000 __DTOR_LIST__
000081f0 g     F .text	00000054 delay
000086b8 g     F .text	00000034 alt_irq_init
0000a7d8 g     F .text	00000078 alt_release_fd
0000ac98 g     F .text	00000014 atexit
0000c8ec g     O .rwdata	00000004 _impure_ptr
0000dfec g     O .bss	00000004 alt_argc
0000a058 g     F .text	00000064 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000c8c8 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a0d8 g     F .text	00000050 alt_ic_isr_register
0000c8f4 g       *ABS*	00000000 _edata
00009234 g     F .text	00000058 altera_avalon_uart_read_fd
0000e298 g       *ABS*	00000000 _end
000081b4 g       *ABS*	00000000 __ram_exceptions_end
00008cdc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000a1c4 g     F .text	000000a0 alt_ic_irq_disable
0000a9f4 g     F .text	00000020 altera_nios2_qsys_irq_init
0000acac g     F .text	00000038 exit
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
000096cc g     F .text	00000060 altera_avalon_uart_close
0000b194 g     F .text	00000020 _exit
00009be4 g     F .text	00000154 alt_alarm_start
0000adf8 g     F .text	00000074 strlen
0000a5ec g     F .text	0000018c open
0000a0bc g     F .text	0000001c alt_icache_flush_all
0000c8e0 g     O .rwdata	00000004 alt_priority_mask
0000a128 g     F .text	0000009c alt_ic_irq_enable
0000972c g     F .text	00000230 altera_avalon_uart_read
0000c8e4 g     O .rwdata	00000008 alt_alarm_list
00009ff4 g     F .text	00000064 _do_ctors
00009d38 g     F .text	00000100 close
00008560 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606d14 	ori	at,at,33204
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    80fc:	0005313a 	rdctl	r2,ipending
    8100:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    8108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    810c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8110:	00800044 	movi	r2,1
    8114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8118:	e0ffff17 	ldw	r3,-4(fp)
    811c:	e0bffe17 	ldw	r2,-8(fp)
    8120:	1884703a 	and	r2,r3,r2
    8124:	1005003a 	cmpeq	r2,r2,zero
    8128:	1000161e 	bne	r2,zero,8184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	e0bffd17 	ldw	r2,-12(fp)
    8130:	00c00074 	movhi	r3,1
    8134:	18f80204 	addi	r3,r3,-8184
    8138:	100490fa 	slli	r2,r2,3
    813c:	10c5883a 	add	r2,r2,r3
    8140:	11400017 	ldw	r5,0(r2)
    8144:	e0bffd17 	ldw	r2,-12(fp)
    8148:	00c00074 	movhi	r3,1
    814c:	18f80204 	addi	r3,r3,-8184
    8150:	100490fa 	slli	r2,r2,3
    8154:	10c5883a 	add	r2,r2,r3
    8158:	10800104 	addi	r2,r2,4
    815c:	11000017 	ldw	r4,0(r2)
    8160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8164:	0005313a 	rdctl	r2,ipending
    8168:	e0bffb15 	stw	r2,-20(fp)

  return active;
    816c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    8174:	e0bfff17 	ldw	r2,-4(fp)
    8178:	1004c03a 	cmpne	r2,r2,zero
    817c:	103fe31e 	bne	r2,zero,810c <alt_irq_handler+0x20>
    8180:	00000706 	br	81a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8184:	e0bffe17 	ldw	r2,-8(fp)
    8188:	1085883a 	add	r2,r2,r2
    818c:	e0bffe15 	stw	r2,-8(fp)
      i++;
    8190:	e0bffd17 	ldw	r2,-12(fp)
    8194:	10800044 	addi	r2,r2,1
    8198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    819c:	003fde06 	br	8118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a0:	e037883a 	mov	sp,fp
    81a4:	dfc00117 	ldw	ra,4(sp)
    81a8:	df000017 	ldw	fp,0(sp)
    81ac:	dec00204 	addi	sp,sp,8
    81b0:	f800283a 	ret

Disassembly of section .text:

000081b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    81bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c0:	d6923214 	ori	gp,gp,18632
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81c8:	10b7fb14 	ori	r2,r2,57324

    movhi r3, %hi(__bss_end)
    81cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d0:	18f8a614 	ori	r3,r3,58008

    beq r2, r3, 1f
    81d4:	10c00326 	beq	r2,r3,81e4 <_start+0x30>

0:
    stw zero, (r2)
    81d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e0:	10fffd36 	bltu	r2,r3,81d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e4:	00085600 	call	8560 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81e8:	000864c0 	call	864c <alt_main>

000081ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81ec:	003fff06 	br	81ec <alt_after_alt_main>

000081f0 <delay>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_uart_regs.h"
#include <stdint.h>

void delay(int a) {
    81f0:	defffc04 	addi	sp,sp,-16
    81f4:	dfc00315 	stw	ra,12(sp)
    81f8:	df000215 	stw	fp,8(sp)
    81fc:	df000204 	addi	fp,sp,8
    8200:	e13fff15 	stw	r4,-4(fp)
    volatile int i = 0;
    8204:	e03ffe15 	stw	zero,-8(fp)
    while(i < a * 1000) {
    8208:	00000306 	br	8218 <delay+0x28>
        i++;
    820c:	e0bffe17 	ldw	r2,-8(fp)
    8210:	10800044 	addi	r2,r2,1
    8214:	e0bffe15 	stw	r2,-8(fp)
#include "altera_avalon_uart_regs.h"
#include <stdint.h>

void delay(int a) {
    volatile int i = 0;
    while(i < a * 1000) {
    8218:	e13fff17 	ldw	r4,-4(fp)
    821c:	0140fa04 	movi	r5,1000
    8220:	00085280 	call	8528 <__mulsi3>
    8224:	1007883a 	mov	r3,r2
    8228:	e0bffe17 	ldw	r2,-8(fp)
    822c:	10fff716 	blt	r2,r3,820c <delay+0x1c>
        i++;
    }
}
    8230:	e037883a 	mov	sp,fp
    8234:	dfc00117 	ldw	ra,4(sp)
    8238:	df000017 	ldw	fp,0(sp)
    823c:	dec00204 	addi	sp,sp,8
    8240:	f800283a 	ret

00008244 <main>:

int main() {
    8244:	defff004 	addi	sp,sp,-64
    8248:	dfc00f15 	stw	ra,60(sp)
    824c:	df000e15 	stw	fp,56(sp)
    8250:	df000e04 	addi	fp,sp,56
    char rxData;
    int leftSent = 0;
    8254:	e03ff915 	stw	zero,-28(fp)
    int downSent = 0;
    8258:	e03ff815 	stw	zero,-32(fp)
    int rightSent = 0;
    825c:	e03ff715 	stw	zero,-36(fp)
    int upSent = 0;
    8260:	e03ff615 	stw	zero,-40(fp)
    8264:	00000006 	br	8268 <main+0x24>

    while (1) {
        rxData = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    8268:	00800074 	movhi	r2,1
    826c:	10840804 	addi	r2,r2,4128
    8270:	10800037 	ldwio	r2,0(r2)
    8274:	e0bffa05 	stb	r2,-24(fp)

        if (rxData == 'A' && leftSent == 0) {
    8278:	e0bffa07 	ldb	r2,-24(fp)
    827c:	10801058 	cmpnei	r2,r2,65
    8280:	1000241e 	bne	r2,zero,8314 <main+0xd0>
    8284:	e0bff917 	ldw	r2,-28(fp)
    8288:	1004c03a 	cmpne	r2,r2,zero
    828c:	1000211e 	bne	r2,zero,8314 <main+0xd0>
            char left[] = {'L', 'e', 'f', 't', '\n'};
    8290:	00801304 	movi	r2,76
    8294:	e0bffa45 	stb	r2,-23(fp)
    8298:	00801944 	movi	r2,101
    829c:	e0bffa85 	stb	r2,-22(fp)
    82a0:	00801984 	movi	r2,102
    82a4:	e0bffac5 	stb	r2,-21(fp)
    82a8:	00801d04 	movi	r2,116
    82ac:	e0bffb05 	stb	r2,-20(fp)
    82b0:	00800284 	movi	r2,10
    82b4:	e0bffb45 	stb	r2,-19(fp)
            int i;
            for (i = 0; i < sizeof(left)/sizeof(left[0]); i++) {
    82b8:	e03ff515 	stw	zero,-44(fp)
    82bc:	00000f06 	br	82fc <main+0xb8>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, left[i]);
    82c0:	e0fff517 	ldw	r3,-44(fp)
    82c4:	e0bffa44 	addi	r2,fp,-23
    82c8:	10c5883a 	add	r2,r2,r3
    82cc:	10800003 	ldbu	r2,0(r2)
    82d0:	10c03fcc 	andi	r3,r2,255
    82d4:	18c0201c 	xori	r3,r3,128
    82d8:	18ffe004 	addi	r3,r3,-128
    82dc:	00800074 	movhi	r2,1
    82e0:	10840904 	addi	r2,r2,4132
    82e4:	10c00035 	stwio	r3,0(r2)
                delay(1);
    82e8:	01000044 	movi	r4,1
    82ec:	00081f00 	call	81f0 <delay>
        rxData = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);

        if (rxData == 'A' && leftSent == 0) {
            char left[] = {'L', 'e', 'f', 't', '\n'};
            int i;
            for (i = 0; i < sizeof(left)/sizeof(left[0]); i++) {
    82f0:	e0bff517 	ldw	r2,-44(fp)
    82f4:	10800044 	addi	r2,r2,1
    82f8:	e0bff515 	stw	r2,-44(fp)
    82fc:	e0bff517 	ldw	r2,-44(fp)
    8300:	10800170 	cmpltui	r2,r2,5
    8304:	103fee1e 	bne	r2,zero,82c0 <main+0x7c>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, left[i]);
                delay(1);
            }
            leftSent = 1;
    8308:	00800044 	movi	r2,1
    830c:	e0bff915 	stw	r2,-28(fp)
    int upSent = 0;

    while (1) {
        rxData = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);

        if (rxData == 'A' && leftSent == 0) {
    8310:	00007406 	br	84e4 <main+0x2a0>
            for (i = 0; i < sizeof(left)/sizeof(left[0]); i++) {
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, left[i]);
                delay(1);
            }
            leftSent = 1;
        } else if (rxData == 'S' && downSent == 0) {
    8314:	e0bffa07 	ldb	r2,-24(fp)
    8318:	108014d8 	cmpnei	r2,r2,83
    831c:	1000241e 	bne	r2,zero,83b0 <main+0x16c>
    8320:	e0bff817 	ldw	r2,-32(fp)
    8324:	1004c03a 	cmpne	r2,r2,zero
    8328:	1000211e 	bne	r2,zero,83b0 <main+0x16c>
            char down[] = {'D', 'o', 'w', 'n', '\n'};
    832c:	00801104 	movi	r2,68
    8330:	e0bffb85 	stb	r2,-18(fp)
    8334:	00801bc4 	movi	r2,111
    8338:	e0bffbc5 	stb	r2,-17(fp)
    833c:	00801dc4 	movi	r2,119
    8340:	e0bffc05 	stb	r2,-16(fp)
    8344:	00801b84 	movi	r2,110
    8348:	e0bffc45 	stb	r2,-15(fp)
    834c:	00800284 	movi	r2,10
    8350:	e0bffc85 	stb	r2,-14(fp)
            int i;
            for (i = 0; i < sizeof(down)/sizeof(down[0]); i++) {
    8354:	e03ff415 	stw	zero,-48(fp)
    8358:	00000f06 	br	8398 <main+0x154>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, down[i]);
    835c:	e0fff417 	ldw	r3,-48(fp)
    8360:	e0bffb84 	addi	r2,fp,-18
    8364:	10c5883a 	add	r2,r2,r3
    8368:	10800003 	ldbu	r2,0(r2)
    836c:	10c03fcc 	andi	r3,r2,255
    8370:	18c0201c 	xori	r3,r3,128
    8374:	18ffe004 	addi	r3,r3,-128
    8378:	00800074 	movhi	r2,1
    837c:	10840904 	addi	r2,r2,4132
    8380:	10c00035 	stwio	r3,0(r2)
                delay(1);
    8384:	01000044 	movi	r4,1
    8388:	00081f00 	call	81f0 <delay>
            }
            leftSent = 1;
        } else if (rxData == 'S' && downSent == 0) {
            char down[] = {'D', 'o', 'w', 'n', '\n'};
            int i;
            for (i = 0; i < sizeof(down)/sizeof(down[0]); i++) {
    838c:	e0bff417 	ldw	r2,-48(fp)
    8390:	10800044 	addi	r2,r2,1
    8394:	e0bff415 	stw	r2,-48(fp)
    8398:	e0bff417 	ldw	r2,-48(fp)
    839c:	10800170 	cmpltui	r2,r2,5
    83a0:	103fee1e 	bne	r2,zero,835c <main+0x118>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, down[i]);
                delay(1);
            }
            downSent = 1;
    83a4:	00800044 	movi	r2,1
    83a8:	e0bff815 	stw	r2,-32(fp)
            for (i = 0; i < sizeof(left)/sizeof(left[0]); i++) {
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, left[i]);
                delay(1);
            }
            leftSent = 1;
        } else if (rxData == 'S' && downSent == 0) {
    83ac:	00004d06 	br	84e4 <main+0x2a0>
            for (i = 0; i < sizeof(down)/sizeof(down[0]); i++) {
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, down[i]);
                delay(1);
            }
            downSent = 1;
        } else if (rxData == 'D' && rightSent == 0) {
    83b0:	e0bffa07 	ldb	r2,-24(fp)
    83b4:	10801118 	cmpnei	r2,r2,68
    83b8:	1000281e 	bne	r2,zero,845c <main+0x218>
    83bc:	e0bff717 	ldw	r2,-36(fp)
    83c0:	1004c03a 	cmpne	r2,r2,zero
    83c4:	1000251e 	bne	r2,zero,845c <main+0x218>
            char right[] = {'R', 'i', 'g', 'h', 't', ' ', '\n'};
    83c8:	00801484 	movi	r2,82
    83cc:	e0bffcc5 	stb	r2,-13(fp)
    83d0:	00801a44 	movi	r2,105
    83d4:	e0bffd05 	stb	r2,-12(fp)
    83d8:	008019c4 	movi	r2,103
    83dc:	e0bffd45 	stb	r2,-11(fp)
    83e0:	00801a04 	movi	r2,104
    83e4:	e0bffd85 	stb	r2,-10(fp)
    83e8:	00801d04 	movi	r2,116
    83ec:	e0bffdc5 	stb	r2,-9(fp)
    83f0:	00800804 	movi	r2,32
    83f4:	e0bffe05 	stb	r2,-8(fp)
    83f8:	00800284 	movi	r2,10
    83fc:	e0bffe45 	stb	r2,-7(fp)
            int i;
            for (i = 0; i < sizeof(right)/sizeof(right[0]); i++) {
    8400:	e03ff315 	stw	zero,-52(fp)
    8404:	00000f06 	br	8444 <main+0x200>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, right[i]);
    8408:	e0fff317 	ldw	r3,-52(fp)
    840c:	e0bffcc4 	addi	r2,fp,-13
    8410:	10c5883a 	add	r2,r2,r3
    8414:	10800003 	ldbu	r2,0(r2)
    8418:	10c03fcc 	andi	r3,r2,255
    841c:	18c0201c 	xori	r3,r3,128
    8420:	18ffe004 	addi	r3,r3,-128
    8424:	00800074 	movhi	r2,1
    8428:	10840904 	addi	r2,r2,4132
    842c:	10c00035 	stwio	r3,0(r2)
                delay(1);
    8430:	01000044 	movi	r4,1
    8434:	00081f00 	call	81f0 <delay>
            }
            downSent = 1;
        } else if (rxData == 'D' && rightSent == 0) {
            char right[] = {'R', 'i', 'g', 'h', 't', ' ', '\n'};
            int i;
            for (i = 0; i < sizeof(right)/sizeof(right[0]); i++) {
    8438:	e0bff317 	ldw	r2,-52(fp)
    843c:	10800044 	addi	r2,r2,1
    8440:	e0bff315 	stw	r2,-52(fp)
    8444:	e0bff317 	ldw	r2,-52(fp)
    8448:	108001f0 	cmpltui	r2,r2,7
    844c:	103fee1e 	bne	r2,zero,8408 <main+0x1c4>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, right[i]);
                delay(1);
            }
            rightSent = 1;
    8450:	00800044 	movi	r2,1
    8454:	e0bff715 	stw	r2,-36(fp)
            for (i = 0; i < sizeof(down)/sizeof(down[0]); i++) {
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, down[i]);
                delay(1);
            }
            downSent = 1;
        } else if (rxData == 'D' && rightSent == 0) {
    8458:	00002206 	br	84e4 <main+0x2a0>
            for (i = 0; i < sizeof(right)/sizeof(right[0]); i++) {
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, right[i]);
                delay(1);
            }
            rightSent = 1;
        } else if (rxData == 'W' && upSent == 0) {
    845c:	e0bffa07 	ldb	r2,-24(fp)
    8460:	108015d8 	cmpnei	r2,r2,87
    8464:	10001f1e 	bne	r2,zero,84e4 <main+0x2a0>
    8468:	e0bff617 	ldw	r2,-40(fp)
    846c:	1004c03a 	cmpne	r2,r2,zero
    8470:	10001c1e 	bne	r2,zero,84e4 <main+0x2a0>
            char up[] = {'U', 'p', '\n'};
    8474:	00801544 	movi	r2,85
    8478:	e0bffe85 	stb	r2,-6(fp)
    847c:	00801c04 	movi	r2,112
    8480:	e0bffec5 	stb	r2,-5(fp)
    8484:	00800284 	movi	r2,10
    8488:	e0bfff05 	stb	r2,-4(fp)
            int i;
            for (i = 0; i < sizeof(up)/sizeof(up[0]); i++) {
    848c:	e03ff215 	stw	zero,-56(fp)
    8490:	00000f06 	br	84d0 <main+0x28c>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, up[i]);
    8494:	e0fff217 	ldw	r3,-56(fp)
    8498:	e0bffe84 	addi	r2,fp,-6
    849c:	10c5883a 	add	r2,r2,r3
    84a0:	10800003 	ldbu	r2,0(r2)
    84a4:	10c03fcc 	andi	r3,r2,255
    84a8:	18c0201c 	xori	r3,r3,128
    84ac:	18ffe004 	addi	r3,r3,-128
    84b0:	00800074 	movhi	r2,1
    84b4:	10840904 	addi	r2,r2,4132
    84b8:	10c00035 	stwio	r3,0(r2)
                delay(1);
    84bc:	01000044 	movi	r4,1
    84c0:	00081f00 	call	81f0 <delay>
            }
            rightSent = 1;
        } else if (rxData == 'W' && upSent == 0) {
            char up[] = {'U', 'p', '\n'};
            int i;
            for (i = 0; i < sizeof(up)/sizeof(up[0]); i++) {
    84c4:	e0bff217 	ldw	r2,-56(fp)
    84c8:	10800044 	addi	r2,r2,1
    84cc:	e0bff215 	stw	r2,-56(fp)
    84d0:	e0bff217 	ldw	r2,-56(fp)
    84d4:	108000f0 	cmpltui	r2,r2,3
    84d8:	103fee1e 	bne	r2,zero,8494 <main+0x250>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, up[i]);
                delay(1);
            }
            upSent = 1;
    84dc:	00800044 	movi	r2,1
    84e0:	e0bff615 	stw	r2,-40(fp)
        }

        if (rxData != 'A') {
    84e4:	e0bffa07 	ldb	r2,-24(fp)
    84e8:	10801060 	cmpeqi	r2,r2,65
    84ec:	1000011e 	bne	r2,zero,84f4 <main+0x2b0>
            leftSent = 0;
    84f0:	e03ff915 	stw	zero,-28(fp)
        }
        if (rxData != 'S') {
    84f4:	e0bffa07 	ldb	r2,-24(fp)
    84f8:	108014e0 	cmpeqi	r2,r2,83
    84fc:	1000011e 	bne	r2,zero,8504 <main+0x2c0>
            downSent = 0;
    8500:	e03ff815 	stw	zero,-32(fp)
        }
        if (rxData != 'D') {
    8504:	e0bffa07 	ldb	r2,-24(fp)
    8508:	10801120 	cmpeqi	r2,r2,68
    850c:	1000011e 	bne	r2,zero,8514 <main+0x2d0>
            rightSent = 0;
    8510:	e03ff715 	stw	zero,-36(fp)
        }
        if (rxData != 'W') {
    8514:	e0bffa07 	ldb	r2,-24(fp)
    8518:	108015e0 	cmpeqi	r2,r2,87
    851c:	103f521e 	bne	r2,zero,8268 <main+0x24>
            upSent = 0;
    8520:	e03ff615 	stw	zero,-40(fp)
        }
    }
    8524:	003f5006 	br	8268 <main+0x24>

00008528 <__mulsi3>:
    8528:	20000a26 	beq	r4,zero,8554 <__mulsi3+0x2c>
    852c:	0007883a 	mov	r3,zero
    8530:	2080004c 	andi	r2,r4,1
    8534:	1005003a 	cmpeq	r2,r2,zero
    8538:	2008d07a 	srli	r4,r4,1
    853c:	1000011e 	bne	r2,zero,8544 <__mulsi3+0x1c>
    8540:	1947883a 	add	r3,r3,r5
    8544:	294b883a 	add	r5,r5,r5
    8548:	203ff91e 	bne	r4,zero,8530 <__mulsi3+0x8>
    854c:	1805883a 	mov	r2,r3
    8550:	f800283a 	ret
    8554:	0007883a 	mov	r3,zero
    8558:	1805883a 	mov	r2,r3
    855c:	f800283a 	ret

00008560 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8560:	defffe04 	addi	sp,sp,-8
    8564:	dfc00115 	stw	ra,4(sp)
    8568:	df000015 	stw	fp,0(sp)
    856c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8570:	01000074 	movhi	r4,1
    8574:	21323d04 	addi	r4,r4,-14092
    8578:	01400074 	movhi	r5,1
    857c:	296c7f04 	addi	r5,r5,-19972
    8580:	01800074 	movhi	r6,1
    8584:	31b23d04 	addi	r6,r6,-14092
    8588:	00085e00 	call	85e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    858c:	01000074 	movhi	r4,1
    8590:	21200804 	addi	r4,r4,-32736
    8594:	01400074 	movhi	r5,1
    8598:	29600804 	addi	r5,r5,-32736
    859c:	01800074 	movhi	r6,1
    85a0:	31a06d04 	addi	r6,r6,-32332
    85a4:	00085e00 	call	85e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    85a8:	01000074 	movhi	r4,1
    85ac:	212c6e04 	addi	r4,r4,-20040
    85b0:	01400074 	movhi	r5,1
    85b4:	296c6e04 	addi	r5,r5,-20040
    85b8:	01800074 	movhi	r6,1
    85bc:	31ac7f04 	addi	r6,r6,-19972
    85c0:	00085e00 	call	85e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    85c4:	0009e980 	call	9e98 <alt_dcache_flush_all>
  alt_icache_flush_all();
    85c8:	000a0bc0 	call	a0bc <alt_icache_flush_all>
}
    85cc:	e037883a 	mov	sp,fp
    85d0:	dfc00117 	ldw	ra,4(sp)
    85d4:	df000017 	ldw	fp,0(sp)
    85d8:	dec00204 	addi	sp,sp,8
    85dc:	f800283a 	ret

000085e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    85e0:	defffc04 	addi	sp,sp,-16
    85e4:	df000315 	stw	fp,12(sp)
    85e8:	df000304 	addi	fp,sp,12
    85ec:	e13ffd15 	stw	r4,-12(fp)
    85f0:	e17ffe15 	stw	r5,-8(fp)
    85f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    85f8:	e0fffe17 	ldw	r3,-8(fp)
    85fc:	e0bffd17 	ldw	r2,-12(fp)
    8600:	18800e26 	beq	r3,r2,863c <alt_load_section+0x5c>
  {
    while( to != end )
    8604:	00000a06 	br	8630 <alt_load_section+0x50>
    {
      *to++ = *from++;
    8608:	e0bffd17 	ldw	r2,-12(fp)
    860c:	10c00017 	ldw	r3,0(r2)
    8610:	e0bffe17 	ldw	r2,-8(fp)
    8614:	10c00015 	stw	r3,0(r2)
    8618:	e0bffe17 	ldw	r2,-8(fp)
    861c:	10800104 	addi	r2,r2,4
    8620:	e0bffe15 	stw	r2,-8(fp)
    8624:	e0bffd17 	ldw	r2,-12(fp)
    8628:	10800104 	addi	r2,r2,4
    862c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8630:	e0fffe17 	ldw	r3,-8(fp)
    8634:	e0bfff17 	ldw	r2,-4(fp)
    8638:	18bff31e 	bne	r3,r2,8608 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    863c:	e037883a 	mov	sp,fp
    8640:	df000017 	ldw	fp,0(sp)
    8644:	dec00104 	addi	sp,sp,4
    8648:	f800283a 	ret

0000864c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    864c:	defffd04 	addi	sp,sp,-12
    8650:	dfc00215 	stw	ra,8(sp)
    8654:	df000115 	stw	fp,4(sp)
    8658:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    865c:	0009883a 	mov	r4,zero
    8660:	00086b80 	call	86b8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8664:	00086ec0 	call	86ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8668:	01000074 	movhi	r4,1
    866c:	212c6e04 	addi	r4,r4,-20040
    8670:	01400074 	movhi	r5,1
    8674:	296c6e04 	addi	r5,r5,-20040
    8678:	01800074 	movhi	r6,1
    867c:	31ac6e04 	addi	r6,r6,-20040
    8680:	000a47c0 	call	a47c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8684:	0009ff40 	call	9ff4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8688:	01000074 	movhi	r4,1
    868c:	21281604 	addi	r4,r4,-24488
    8690:	000ac980 	call	ac98 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8694:	d125c917 	ldw	r4,-26844(gp)
    8698:	d165ca17 	ldw	r5,-26840(gp)
    869c:	d1a5cb17 	ldw	r6,-26836(gp)
    86a0:	00082440 	call	8244 <main>
    86a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    86a8:	01000044 	movi	r4,1
    86ac:	0009d380 	call	9d38 <close>
  exit (result);
    86b0:	e13fff17 	ldw	r4,-4(fp)
    86b4:	000acac0 	call	acac <exit>

000086b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    86b8:	defffd04 	addi	sp,sp,-12
    86bc:	dfc00215 	stw	ra,8(sp)
    86c0:	df000115 	stw	fp,4(sp)
    86c4:	df000104 	addi	fp,sp,4
    86c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    86cc:	000a9f40 	call	a9f4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    86d0:	00800044 	movi	r2,1
    86d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    86d8:	e037883a 	mov	sp,fp
    86dc:	dfc00117 	ldw	ra,4(sp)
    86e0:	df000017 	ldw	fp,0(sp)
    86e4:	dec00204 	addi	sp,sp,8
    86e8:	f800283a 	ret

000086ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    86ec:	defffe04 	addi	sp,sp,-8
    86f0:	dfc00115 	stw	ra,4(sp)
    86f4:	df000015 	stw	fp,0(sp)
    86f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    86fc:	01000074 	movhi	r4,1
    8700:	212c8904 	addi	r4,r4,-19932
    8704:	000b883a 	mov	r5,zero
    8708:	000d883a 	mov	r6,zero
    870c:	00088d00 	call	88d0 <altera_avalon_jtag_uart_init>
    8710:	01000074 	movhi	r4,1
    8714:	212c7f04 	addi	r4,r4,-19972
    8718:	00087500 	call	8750 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    871c:	01000074 	movhi	r4,1
    8720:	2130a104 	addi	r4,r4,-15740
    8724:	000b883a 	mov	r5,zero
    8728:	01800044 	movi	r6,1
    872c:	000932c0 	call	932c <altera_avalon_uart_init>
    8730:	01000074 	movhi	r4,1
    8734:	21309704 	addi	r4,r4,-15780
    8738:	00087500 	call	8750 <alt_dev_reg>
}
    873c:	e037883a 	mov	sp,fp
    8740:	dfc00117 	ldw	ra,4(sp)
    8744:	df000017 	ldw	fp,0(sp)
    8748:	dec00204 	addi	sp,sp,8
    874c:	f800283a 	ret

00008750 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8750:	defffd04 	addi	sp,sp,-12
    8754:	dfc00215 	stw	ra,8(sp)
    8758:	df000115 	stw	fp,4(sp)
    875c:	df000104 	addi	fp,sp,4
    8760:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8764:	e13fff17 	ldw	r4,-4(fp)
    8768:	01400074 	movhi	r5,1
    876c:	29723404 	addi	r5,r5,-14128
    8770:	0009ee00 	call	9ee0 <alt_dev_llist_insert>
}
    8774:	e037883a 	mov	sp,fp
    8778:	dfc00117 	ldw	ra,4(sp)
    877c:	df000017 	ldw	fp,0(sp)
    8780:	dec00204 	addi	sp,sp,8
    8784:	f800283a 	ret

00008788 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8788:	defffa04 	addi	sp,sp,-24
    878c:	dfc00515 	stw	ra,20(sp)
    8790:	df000415 	stw	fp,16(sp)
    8794:	df000404 	addi	fp,sp,16
    8798:	e13ffd15 	stw	r4,-12(fp)
    879c:	e17ffe15 	stw	r5,-8(fp)
    87a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    87a4:	e0bffd17 	ldw	r2,-12(fp)
    87a8:	10800017 	ldw	r2,0(r2)
    87ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    87b0:	e0bffc17 	ldw	r2,-16(fp)
    87b4:	11000a04 	addi	r4,r2,40
    87b8:	e0bffd17 	ldw	r2,-12(fp)
    87bc:	11c00217 	ldw	r7,8(r2)
    87c0:	e17ffe17 	ldw	r5,-8(fp)
    87c4:	e1bfff17 	ldw	r6,-4(fp)
    87c8:	0008dd00 	call	8dd0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    87cc:	e037883a 	mov	sp,fp
    87d0:	dfc00117 	ldw	ra,4(sp)
    87d4:	df000017 	ldw	fp,0(sp)
    87d8:	dec00204 	addi	sp,sp,8
    87dc:	f800283a 	ret

000087e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    87e0:	defffa04 	addi	sp,sp,-24
    87e4:	dfc00515 	stw	ra,20(sp)
    87e8:	df000415 	stw	fp,16(sp)
    87ec:	df000404 	addi	fp,sp,16
    87f0:	e13ffd15 	stw	r4,-12(fp)
    87f4:	e17ffe15 	stw	r5,-8(fp)
    87f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    87fc:	e0bffd17 	ldw	r2,-12(fp)
    8800:	10800017 	ldw	r2,0(r2)
    8804:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8808:	e0bffc17 	ldw	r2,-16(fp)
    880c:	11000a04 	addi	r4,r2,40
    8810:	e0bffd17 	ldw	r2,-12(fp)
    8814:	11c00217 	ldw	r7,8(r2)
    8818:	e17ffe17 	ldw	r5,-8(fp)
    881c:	e1bfff17 	ldw	r6,-4(fp)
    8820:	0008ff40 	call	8ff4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8824:	e037883a 	mov	sp,fp
    8828:	dfc00117 	ldw	ra,4(sp)
    882c:	df000017 	ldw	fp,0(sp)
    8830:	dec00204 	addi	sp,sp,8
    8834:	f800283a 	ret

00008838 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    8838:	defffc04 	addi	sp,sp,-16
    883c:	dfc00315 	stw	ra,12(sp)
    8840:	df000215 	stw	fp,8(sp)
    8844:	df000204 	addi	fp,sp,8
    8848:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    884c:	e0bfff17 	ldw	r2,-4(fp)
    8850:	10800017 	ldw	r2,0(r2)
    8854:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    8858:	e0bffe17 	ldw	r2,-8(fp)
    885c:	11000a04 	addi	r4,r2,40
    8860:	e0bfff17 	ldw	r2,-4(fp)
    8864:	11400217 	ldw	r5,8(r2)
    8868:	0008c680 	call	8c68 <altera_avalon_jtag_uart_close>
}
    886c:	e037883a 	mov	sp,fp
    8870:	dfc00117 	ldw	ra,4(sp)
    8874:	df000017 	ldw	fp,0(sp)
    8878:	dec00204 	addi	sp,sp,8
    887c:	f800283a 	ret

00008880 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    8880:	defffa04 	addi	sp,sp,-24
    8884:	dfc00515 	stw	ra,20(sp)
    8888:	df000415 	stw	fp,16(sp)
    888c:	df000404 	addi	fp,sp,16
    8890:	e13ffd15 	stw	r4,-12(fp)
    8894:	e17ffe15 	stw	r5,-8(fp)
    8898:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    889c:	e0bffd17 	ldw	r2,-12(fp)
    88a0:	10800017 	ldw	r2,0(r2)
    88a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    88a8:	e0bffc17 	ldw	r2,-16(fp)
    88ac:	11000a04 	addi	r4,r2,40
    88b0:	e17ffe17 	ldw	r5,-8(fp)
    88b4:	e1bfff17 	ldw	r6,-4(fp)
    88b8:	0008cdc0 	call	8cdc <altera_avalon_jtag_uart_ioctl>
}
    88bc:	e037883a 	mov	sp,fp
    88c0:	dfc00117 	ldw	ra,4(sp)
    88c4:	df000017 	ldw	fp,0(sp)
    88c8:	dec00204 	addi	sp,sp,8
    88cc:	f800283a 	ret

000088d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    88d0:	defffa04 	addi	sp,sp,-24
    88d4:	dfc00515 	stw	ra,20(sp)
    88d8:	df000415 	stw	fp,16(sp)
    88dc:	df000404 	addi	fp,sp,16
    88e0:	e13ffd15 	stw	r4,-12(fp)
    88e4:	e17ffe15 	stw	r5,-8(fp)
    88e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    88ec:	e0fffd17 	ldw	r3,-12(fp)
    88f0:	00800044 	movi	r2,1
    88f4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    88f8:	e0bffd17 	ldw	r2,-12(fp)
    88fc:	10800017 	ldw	r2,0(r2)
    8900:	11000104 	addi	r4,r2,4
    8904:	e0bffd17 	ldw	r2,-12(fp)
    8908:	10800817 	ldw	r2,32(r2)
    890c:	1007883a 	mov	r3,r2
    8910:	2005883a 	mov	r2,r4
    8914:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    8918:	e13ffe17 	ldw	r4,-8(fp)
    891c:	e17fff17 	ldw	r5,-4(fp)
    8920:	d8000015 	stw	zero,0(sp)
    8924:	01800074 	movhi	r6,1
    8928:	31a26404 	addi	r6,r6,-30320
    892c:	e1fffd17 	ldw	r7,-12(fp)
    8930:	000a0d80 	call	a0d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    8934:	e0bffd17 	ldw	r2,-12(fp)
    8938:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    893c:	e0bffd17 	ldw	r2,-12(fp)
    8940:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    8944:	00800074 	movhi	r2,1
    8948:	10b7ff04 	addi	r2,r2,-8196
    894c:	10800017 	ldw	r2,0(r2)
    8950:	100b883a 	mov	r5,r2
    8954:	01800074 	movhi	r6,1
    8958:	31a2ee04 	addi	r6,r6,-29768
    895c:	e1fffd17 	ldw	r7,-12(fp)
    8960:	0009be40 	call	9be4 <alt_alarm_start>
    8964:	1004403a 	cmpge	r2,r2,zero
    8968:	1000041e 	bne	r2,zero,897c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    896c:	e0fffd17 	ldw	r3,-12(fp)
    8970:	00a00034 	movhi	r2,32768
    8974:	10bfffc4 	addi	r2,r2,-1
    8978:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    897c:	e037883a 	mov	sp,fp
    8980:	dfc00117 	ldw	ra,4(sp)
    8984:	df000017 	ldw	fp,0(sp)
    8988:	dec00204 	addi	sp,sp,8
    898c:	f800283a 	ret

00008990 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    8990:	defff804 	addi	sp,sp,-32
    8994:	df000715 	stw	fp,28(sp)
    8998:	df000704 	addi	fp,sp,28
    899c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    89a0:	e0bfff17 	ldw	r2,-4(fp)
    89a4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    89a8:	e0bffe17 	ldw	r2,-8(fp)
    89ac:	10800017 	ldw	r2,0(r2)
    89b0:	e0bffd15 	stw	r2,-12(fp)
    89b4:	00000006 	br	89b8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    89b8:	e0bffd17 	ldw	r2,-12(fp)
    89bc:	10800104 	addi	r2,r2,4
    89c0:	10800037 	ldwio	r2,0(r2)
    89c4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    89c8:	e0bffc17 	ldw	r2,-16(fp)
    89cc:	1080c00c 	andi	r2,r2,768
    89d0:	1005003a 	cmpeq	r2,r2,zero
    89d4:	1000741e 	bne	r2,zero,8ba8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    89d8:	e0bffc17 	ldw	r2,-16(fp)
    89dc:	1080400c 	andi	r2,r2,256
    89e0:	1005003a 	cmpeq	r2,r2,zero
    89e4:	1000351e 	bne	r2,zero,8abc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    89e8:	00800074 	movhi	r2,1
    89ec:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    89f0:	e0bffe17 	ldw	r2,-8(fp)
    89f4:	10800a17 	ldw	r2,40(r2)
    89f8:	10800044 	addi	r2,r2,1
    89fc:	1081ffcc 	andi	r2,r2,2047
    8a00:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    8a04:	e0bffe17 	ldw	r2,-8(fp)
    8a08:	10c00b17 	ldw	r3,44(r2)
    8a0c:	e0bffa17 	ldw	r2,-24(fp)
    8a10:	18801626 	beq	r3,r2,8a6c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8a14:	e0bffd17 	ldw	r2,-12(fp)
    8a18:	10800037 	ldwio	r2,0(r2)
    8a1c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    8a20:	e0bffb17 	ldw	r2,-20(fp)
    8a24:	10a0000c 	andi	r2,r2,32768
    8a28:	1005003a 	cmpeq	r2,r2,zero
    8a2c:	10000f1e 	bne	r2,zero,8a6c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8a30:	e0bffe17 	ldw	r2,-8(fp)
    8a34:	10c00a17 	ldw	r3,40(r2)
    8a38:	e0bffb17 	ldw	r2,-20(fp)
    8a3c:	1009883a 	mov	r4,r2
    8a40:	e0bffe17 	ldw	r2,-8(fp)
    8a44:	1885883a 	add	r2,r3,r2
    8a48:	10800e04 	addi	r2,r2,56
    8a4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8a50:	e0bffe17 	ldw	r2,-8(fp)
    8a54:	10800a17 	ldw	r2,40(r2)
    8a58:	10800044 	addi	r2,r2,1
    8a5c:	10c1ffcc 	andi	r3,r2,2047
    8a60:	e0bffe17 	ldw	r2,-8(fp)
    8a64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    8a68:	003fe106 	br	89f0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    8a6c:	e0bffb17 	ldw	r2,-20(fp)
    8a70:	10bfffec 	andhi	r2,r2,65535
    8a74:	1005003a 	cmpeq	r2,r2,zero
    8a78:	1000101e 	bne	r2,zero,8abc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8a7c:	e0bffe17 	ldw	r2,-8(fp)
    8a80:	10c00817 	ldw	r3,32(r2)
    8a84:	00bfff84 	movi	r2,-2
    8a88:	1886703a 	and	r3,r3,r2
    8a8c:	e0bffe17 	ldw	r2,-8(fp)
    8a90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    8a94:	e0bffd17 	ldw	r2,-12(fp)
    8a98:	11000104 	addi	r4,r2,4
    8a9c:	e0bffe17 	ldw	r2,-8(fp)
    8aa0:	10800817 	ldw	r2,32(r2)
    8aa4:	1007883a 	mov	r3,r2
    8aa8:	2005883a 	mov	r2,r4
    8aac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8ab0:	e0bffd17 	ldw	r2,-12(fp)
    8ab4:	10800104 	addi	r2,r2,4
    8ab8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    8abc:	e0bffc17 	ldw	r2,-16(fp)
    8ac0:	1080800c 	andi	r2,r2,512
    8ac4:	1005003a 	cmpeq	r2,r2,zero
    8ac8:	103fbb1e 	bne	r2,zero,89b8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    8acc:	e0bffc17 	ldw	r2,-16(fp)
    8ad0:	10bfffec 	andhi	r2,r2,65535
    8ad4:	1004d43a 	srli	r2,r2,16
    8ad8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    8adc:	00001506 	br	8b34 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    8ae0:	e13ffd17 	ldw	r4,-12(fp)
    8ae4:	e0bffe17 	ldw	r2,-8(fp)
    8ae8:	10c00d17 	ldw	r3,52(r2)
    8aec:	e0bffe17 	ldw	r2,-8(fp)
    8af0:	1885883a 	add	r2,r3,r2
    8af4:	10820e04 	addi	r2,r2,2104
    8af8:	10800003 	ldbu	r2,0(r2)
    8afc:	10c03fcc 	andi	r3,r2,255
    8b00:	18c0201c 	xori	r3,r3,128
    8b04:	18ffe004 	addi	r3,r3,-128
    8b08:	2005883a 	mov	r2,r4
    8b0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8b10:	e0bffe17 	ldw	r2,-8(fp)
    8b14:	10800d17 	ldw	r2,52(r2)
    8b18:	10800044 	addi	r2,r2,1
    8b1c:	10c1ffcc 	andi	r3,r2,2047
    8b20:	e0bffe17 	ldw	r2,-8(fp)
    8b24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    8b28:	e0bff917 	ldw	r2,-28(fp)
    8b2c:	10bfffc4 	addi	r2,r2,-1
    8b30:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    8b34:	e0bff917 	ldw	r2,-28(fp)
    8b38:	1005003a 	cmpeq	r2,r2,zero
    8b3c:	1000051e 	bne	r2,zero,8b54 <altera_avalon_jtag_uart_irq+0x1c4>
    8b40:	e0bffe17 	ldw	r2,-8(fp)
    8b44:	10c00d17 	ldw	r3,52(r2)
    8b48:	e0bffe17 	ldw	r2,-8(fp)
    8b4c:	10800c17 	ldw	r2,48(r2)
    8b50:	18bfe31e 	bne	r3,r2,8ae0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    8b54:	e0bff917 	ldw	r2,-28(fp)
    8b58:	1005003a 	cmpeq	r2,r2,zero
    8b5c:	103f961e 	bne	r2,zero,89b8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    8b60:	e0bffe17 	ldw	r2,-8(fp)
    8b64:	10c00817 	ldw	r3,32(r2)
    8b68:	00bfff44 	movi	r2,-3
    8b6c:	1886703a 	and	r3,r3,r2
    8b70:	e0bffe17 	ldw	r2,-8(fp)
    8b74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8b78:	e0bffe17 	ldw	r2,-8(fp)
    8b7c:	10800017 	ldw	r2,0(r2)
    8b80:	11000104 	addi	r4,r2,4
    8b84:	e0bffe17 	ldw	r2,-8(fp)
    8b88:	10800817 	ldw	r2,32(r2)
    8b8c:	1007883a 	mov	r3,r2
    8b90:	2005883a 	mov	r2,r4
    8b94:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8b98:	e0bffd17 	ldw	r2,-12(fp)
    8b9c:	10800104 	addi	r2,r2,4
    8ba0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    8ba4:	003f8406 	br	89b8 <altera_avalon_jtag_uart_irq+0x28>
}
    8ba8:	e037883a 	mov	sp,fp
    8bac:	df000017 	ldw	fp,0(sp)
    8bb0:	dec00104 	addi	sp,sp,4
    8bb4:	f800283a 	ret

00008bb8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    8bb8:	defffc04 	addi	sp,sp,-16
    8bbc:	df000315 	stw	fp,12(sp)
    8bc0:	df000304 	addi	fp,sp,12
    8bc4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    8bc8:	e0bfff17 	ldw	r2,-4(fp)
    8bcc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    8bd0:	e0bffe17 	ldw	r2,-8(fp)
    8bd4:	10800017 	ldw	r2,0(r2)
    8bd8:	10800104 	addi	r2,r2,4
    8bdc:	10800037 	ldwio	r2,0(r2)
    8be0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    8be4:	e0bffd17 	ldw	r2,-12(fp)
    8be8:	1081000c 	andi	r2,r2,1024
    8bec:	1005003a 	cmpeq	r2,r2,zero
    8bf0:	10000c1e 	bne	r2,zero,8c24 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    8bf4:	e0bffe17 	ldw	r2,-8(fp)
    8bf8:	10800017 	ldw	r2,0(r2)
    8bfc:	11000104 	addi	r4,r2,4
    8c00:	e0bffe17 	ldw	r2,-8(fp)
    8c04:	10800817 	ldw	r2,32(r2)
    8c08:	10810014 	ori	r2,r2,1024
    8c0c:	1007883a 	mov	r3,r2
    8c10:	2005883a 	mov	r2,r4
    8c14:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    8c18:	e0bffe17 	ldw	r2,-8(fp)
    8c1c:	10000915 	stw	zero,36(r2)
    8c20:	00000a06 	br	8c4c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    8c24:	e0bffe17 	ldw	r2,-8(fp)
    8c28:	10c00917 	ldw	r3,36(r2)
    8c2c:	00a00034 	movhi	r2,32768
    8c30:	10bfff04 	addi	r2,r2,-4
    8c34:	10c00536 	bltu	r2,r3,8c4c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    8c38:	e0bffe17 	ldw	r2,-8(fp)
    8c3c:	10800917 	ldw	r2,36(r2)
    8c40:	10c00044 	addi	r3,r2,1
    8c44:	e0bffe17 	ldw	r2,-8(fp)
    8c48:	10c00915 	stw	r3,36(r2)
    8c4c:	00800074 	movhi	r2,1
    8c50:	10b7ff04 	addi	r2,r2,-8196
    8c54:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    8c58:	e037883a 	mov	sp,fp
    8c5c:	df000017 	ldw	fp,0(sp)
    8c60:	dec00104 	addi	sp,sp,4
    8c64:	f800283a 	ret

00008c68 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    8c68:	defffc04 	addi	sp,sp,-16
    8c6c:	df000315 	stw	fp,12(sp)
    8c70:	df000304 	addi	fp,sp,12
    8c74:	e13ffd15 	stw	r4,-12(fp)
    8c78:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8c7c:	00000706 	br	8c9c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    8c80:	e0bffe17 	ldw	r2,-8(fp)
    8c84:	1090000c 	andi	r2,r2,16384
    8c88:	1005003a 	cmpeq	r2,r2,zero
    8c8c:	1000031e 	bne	r2,zero,8c9c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    8c90:	00bffd44 	movi	r2,-11
    8c94:	e0bfff15 	stw	r2,-4(fp)
    8c98:	00000b06 	br	8cc8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8c9c:	e0bffd17 	ldw	r2,-12(fp)
    8ca0:	10c00d17 	ldw	r3,52(r2)
    8ca4:	e0bffd17 	ldw	r2,-12(fp)
    8ca8:	10800c17 	ldw	r2,48(r2)
    8cac:	18800526 	beq	r3,r2,8cc4 <altera_avalon_jtag_uart_close+0x5c>
    8cb0:	e0bffd17 	ldw	r2,-12(fp)
    8cb4:	10c00917 	ldw	r3,36(r2)
    8cb8:	e0bffd17 	ldw	r2,-12(fp)
    8cbc:	10800117 	ldw	r2,4(r2)
    8cc0:	18bfef36 	bltu	r3,r2,8c80 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    8cc4:	e03fff15 	stw	zero,-4(fp)
    8cc8:	e0bfff17 	ldw	r2,-4(fp)
}
    8ccc:	e037883a 	mov	sp,fp
    8cd0:	df000017 	ldw	fp,0(sp)
    8cd4:	dec00104 	addi	sp,sp,4
    8cd8:	f800283a 	ret

00008cdc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    8cdc:	defff804 	addi	sp,sp,-32
    8ce0:	df000715 	stw	fp,28(sp)
    8ce4:	df000704 	addi	fp,sp,28
    8ce8:	e13ffb15 	stw	r4,-20(fp)
    8cec:	e17ffc15 	stw	r5,-16(fp)
    8cf0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    8cf4:	00bff9c4 	movi	r2,-25
    8cf8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    8cfc:	e0bffc17 	ldw	r2,-16(fp)
    8d00:	e0bfff15 	stw	r2,-4(fp)
    8d04:	e0ffff17 	ldw	r3,-4(fp)
    8d08:	189a8060 	cmpeqi	r2,r3,27137
    8d0c:	1000041e 	bne	r2,zero,8d20 <altera_avalon_jtag_uart_ioctl+0x44>
    8d10:	e0ffff17 	ldw	r3,-4(fp)
    8d14:	189a80a0 	cmpeqi	r2,r3,27138
    8d18:	10001b1e 	bne	r2,zero,8d88 <altera_avalon_jtag_uart_ioctl+0xac>
    8d1c:	00002706 	br	8dbc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    8d20:	e0bffb17 	ldw	r2,-20(fp)
    8d24:	10c00117 	ldw	r3,4(r2)
    8d28:	00a00034 	movhi	r2,32768
    8d2c:	10bfffc4 	addi	r2,r2,-1
    8d30:	18802226 	beq	r3,r2,8dbc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    8d34:	e0bffd17 	ldw	r2,-12(fp)
    8d38:	10800017 	ldw	r2,0(r2)
    8d3c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    8d40:	e0bff917 	ldw	r2,-28(fp)
    8d44:	10800090 	cmplti	r2,r2,2
    8d48:	1000071e 	bne	r2,zero,8d68 <altera_avalon_jtag_uart_ioctl+0x8c>
    8d4c:	e0fff917 	ldw	r3,-28(fp)
    8d50:	00a00034 	movhi	r2,32768
    8d54:	10bfffc4 	addi	r2,r2,-1
    8d58:	18800326 	beq	r3,r2,8d68 <altera_avalon_jtag_uart_ioctl+0x8c>
    8d5c:	e0bff917 	ldw	r2,-28(fp)
    8d60:	e0bffe15 	stw	r2,-8(fp)
    8d64:	00000306 	br	8d74 <altera_avalon_jtag_uart_ioctl+0x98>
    8d68:	00e00034 	movhi	r3,32768
    8d6c:	18ffff84 	addi	r3,r3,-2
    8d70:	e0fffe15 	stw	r3,-8(fp)
    8d74:	e0bffb17 	ldw	r2,-20(fp)
    8d78:	e0fffe17 	ldw	r3,-8(fp)
    8d7c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    8d80:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    8d84:	00000d06 	br	8dbc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    8d88:	e0bffb17 	ldw	r2,-20(fp)
    8d8c:	10c00117 	ldw	r3,4(r2)
    8d90:	00a00034 	movhi	r2,32768
    8d94:	10bfffc4 	addi	r2,r2,-1
    8d98:	18800826 	beq	r3,r2,8dbc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    8d9c:	e13ffd17 	ldw	r4,-12(fp)
    8da0:	e0bffb17 	ldw	r2,-20(fp)
    8da4:	10c00917 	ldw	r3,36(r2)
    8da8:	e0bffb17 	ldw	r2,-20(fp)
    8dac:	10800117 	ldw	r2,4(r2)
    8db0:	1885803a 	cmpltu	r2,r3,r2
    8db4:	20800015 	stw	r2,0(r4)
      rc = 0;
    8db8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    8dbc:	e0bffa17 	ldw	r2,-24(fp)
}
    8dc0:	e037883a 	mov	sp,fp
    8dc4:	df000017 	ldw	fp,0(sp)
    8dc8:	dec00104 	addi	sp,sp,4
    8dcc:	f800283a 	ret

00008dd0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    8dd0:	defff204 	addi	sp,sp,-56
    8dd4:	dfc00d15 	stw	ra,52(sp)
    8dd8:	df000c15 	stw	fp,48(sp)
    8ddc:	df000c04 	addi	fp,sp,48
    8de0:	e13ffb15 	stw	r4,-20(fp)
    8de4:	e17ffc15 	stw	r5,-16(fp)
    8de8:	e1bffd15 	stw	r6,-12(fp)
    8dec:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    8df0:	e0bffc17 	ldw	r2,-16(fp)
    8df4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8df8:	00004806 	br	8f1c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    8dfc:	e0bffb17 	ldw	r2,-20(fp)
    8e00:	10800a17 	ldw	r2,40(r2)
    8e04:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    8e08:	e0bffb17 	ldw	r2,-20(fp)
    8e0c:	10800b17 	ldw	r2,44(r2)
    8e10:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    8e14:	e0fff717 	ldw	r3,-36(fp)
    8e18:	e0bff617 	ldw	r2,-40(fp)
    8e1c:	18800536 	bltu	r3,r2,8e34 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    8e20:	e0bff717 	ldw	r2,-36(fp)
    8e24:	e0fff617 	ldw	r3,-40(fp)
    8e28:	10c5c83a 	sub	r2,r2,r3
    8e2c:	e0bff815 	stw	r2,-32(fp)
    8e30:	00000406 	br	8e44 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    8e34:	00820004 	movi	r2,2048
    8e38:	e0fff617 	ldw	r3,-40(fp)
    8e3c:	10c5c83a 	sub	r2,r2,r3
    8e40:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    8e44:	e0bff817 	ldw	r2,-32(fp)
    8e48:	1005003a 	cmpeq	r2,r2,zero
    8e4c:	10001f1e 	bne	r2,zero,8ecc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    8e50:	e0fffd17 	ldw	r3,-12(fp)
    8e54:	e0bff817 	ldw	r2,-32(fp)
    8e58:	1880022e 	bgeu	r3,r2,8e64 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    8e5c:	e0bffd17 	ldw	r2,-12(fp)
    8e60:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    8e64:	e0bffb17 	ldw	r2,-20(fp)
    8e68:	10c00e04 	addi	r3,r2,56
    8e6c:	e0bff617 	ldw	r2,-40(fp)
    8e70:	1887883a 	add	r3,r3,r2
    8e74:	e0bffa17 	ldw	r2,-24(fp)
    8e78:	1009883a 	mov	r4,r2
    8e7c:	180b883a 	mov	r5,r3
    8e80:	e1bff817 	ldw	r6,-32(fp)
    8e84:	000ad580 	call	ad58 <memcpy>
      ptr   += n;
    8e88:	e0fff817 	ldw	r3,-32(fp)
    8e8c:	e0bffa17 	ldw	r2,-24(fp)
    8e90:	10c5883a 	add	r2,r2,r3
    8e94:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    8e98:	e0fffd17 	ldw	r3,-12(fp)
    8e9c:	e0bff817 	ldw	r2,-32(fp)
    8ea0:	1885c83a 	sub	r2,r3,r2
    8ea4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8ea8:	e0fff617 	ldw	r3,-40(fp)
    8eac:	e0bff817 	ldw	r2,-32(fp)
    8eb0:	1885883a 	add	r2,r3,r2
    8eb4:	10c1ffcc 	andi	r3,r2,2047
    8eb8:	e0bffb17 	ldw	r2,-20(fp)
    8ebc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    8ec0:	e0bffd17 	ldw	r2,-12(fp)
    8ec4:	10800048 	cmpgei	r2,r2,1
    8ec8:	103fcc1e 	bne	r2,zero,8dfc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    8ecc:	e0fffa17 	ldw	r3,-24(fp)
    8ed0:	e0bffc17 	ldw	r2,-16(fp)
    8ed4:	1880141e 	bne	r3,r2,8f28 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    8ed8:	e0bffe17 	ldw	r2,-8(fp)
    8edc:	1090000c 	andi	r2,r2,16384
    8ee0:	1004c03a 	cmpne	r2,r2,zero
    8ee4:	1000101e 	bne	r2,zero,8f28 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    8ee8:	e0bffb17 	ldw	r2,-20(fp)
    8eec:	10c00a17 	ldw	r3,40(r2)
    8ef0:	e0bff717 	ldw	r2,-36(fp)
    8ef4:	1880051e 	bne	r3,r2,8f0c <altera_avalon_jtag_uart_read+0x13c>
    8ef8:	e0bffb17 	ldw	r2,-20(fp)
    8efc:	10c00917 	ldw	r3,36(r2)
    8f00:	e0bffb17 	ldw	r2,-20(fp)
    8f04:	10800117 	ldw	r2,4(r2)
    8f08:	18bff736 	bltu	r3,r2,8ee8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    8f0c:	e0bffb17 	ldw	r2,-20(fp)
    8f10:	10c00a17 	ldw	r3,40(r2)
    8f14:	e0bff717 	ldw	r2,-36(fp)
    8f18:	18800326 	beq	r3,r2,8f28 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8f1c:	e0bffd17 	ldw	r2,-12(fp)
    8f20:	10800048 	cmpgei	r2,r2,1
    8f24:	103fb51e 	bne	r2,zero,8dfc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    8f28:	e0fffa17 	ldw	r3,-24(fp)
    8f2c:	e0bffc17 	ldw	r2,-16(fp)
    8f30:	18801926 	beq	r3,r2,8f98 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8f34:	0005303a 	rdctl	r2,status
    8f38:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f3c:	e0fff517 	ldw	r3,-44(fp)
    8f40:	00bfff84 	movi	r2,-2
    8f44:	1884703a 	and	r2,r3,r2
    8f48:	1001703a 	wrctl	status,r2
  
  return context;
    8f4c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    8f50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8f54:	e0bffb17 	ldw	r2,-20(fp)
    8f58:	10800817 	ldw	r2,32(r2)
    8f5c:	10c00054 	ori	r3,r2,1
    8f60:	e0bffb17 	ldw	r2,-20(fp)
    8f64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8f68:	e0bffb17 	ldw	r2,-20(fp)
    8f6c:	10800017 	ldw	r2,0(r2)
    8f70:	11000104 	addi	r4,r2,4
    8f74:	e0bffb17 	ldw	r2,-20(fp)
    8f78:	10800817 	ldw	r2,32(r2)
    8f7c:	1007883a 	mov	r3,r2
    8f80:	2005883a 	mov	r2,r4
    8f84:	10c00035 	stwio	r3,0(r2)
    8f88:	e0bff917 	ldw	r2,-28(fp)
    8f8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8f90:	e0bff417 	ldw	r2,-48(fp)
    8f94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    8f98:	e0fffa17 	ldw	r3,-24(fp)
    8f9c:	e0bffc17 	ldw	r2,-16(fp)
    8fa0:	18800526 	beq	r3,r2,8fb8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    8fa4:	e0fffa17 	ldw	r3,-24(fp)
    8fa8:	e0bffc17 	ldw	r2,-16(fp)
    8fac:	1887c83a 	sub	r3,r3,r2
    8fb0:	e0ffff15 	stw	r3,-4(fp)
    8fb4:	00000906 	br	8fdc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    8fb8:	e0bffe17 	ldw	r2,-8(fp)
    8fbc:	1090000c 	andi	r2,r2,16384
    8fc0:	1005003a 	cmpeq	r2,r2,zero
    8fc4:	1000031e 	bne	r2,zero,8fd4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    8fc8:	00bffd44 	movi	r2,-11
    8fcc:	e0bfff15 	stw	r2,-4(fp)
    8fd0:	00000206 	br	8fdc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    8fd4:	00bffec4 	movi	r2,-5
    8fd8:	e0bfff15 	stw	r2,-4(fp)
    8fdc:	e0bfff17 	ldw	r2,-4(fp)
}
    8fe0:	e037883a 	mov	sp,fp
    8fe4:	dfc00117 	ldw	ra,4(sp)
    8fe8:	df000017 	ldw	fp,0(sp)
    8fec:	dec00204 	addi	sp,sp,8
    8ff0:	f800283a 	ret

00008ff4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8ff4:	defff204 	addi	sp,sp,-56
    8ff8:	dfc00d15 	stw	ra,52(sp)
    8ffc:	df000c15 	stw	fp,48(sp)
    9000:	df000c04 	addi	fp,sp,48
    9004:	e13ffb15 	stw	r4,-20(fp)
    9008:	e17ffc15 	stw	r5,-16(fp)
    900c:	e1bffd15 	stw	r6,-12(fp)
    9010:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    9014:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    9018:	e0bffc17 	ldw	r2,-16(fp)
    901c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    9020:	00003a06 	br	910c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    9024:	e0bffb17 	ldw	r2,-20(fp)
    9028:	10800c17 	ldw	r2,48(r2)
    902c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    9030:	e0bffb17 	ldw	r2,-20(fp)
    9034:	10800d17 	ldw	r2,52(r2)
    9038:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    903c:	e0fffa17 	ldw	r3,-24(fp)
    9040:	e0bff917 	ldw	r2,-28(fp)
    9044:	1880062e 	bgeu	r3,r2,9060 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    9048:	e0fff917 	ldw	r3,-28(fp)
    904c:	e0bffa17 	ldw	r2,-24(fp)
    9050:	1885c83a 	sub	r2,r3,r2
    9054:	10bfffc4 	addi	r2,r2,-1
    9058:	e0bff815 	stw	r2,-32(fp)
    905c:	00000c06 	br	9090 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    9060:	e0bff917 	ldw	r2,-28(fp)
    9064:	1005003a 	cmpeq	r2,r2,zero
    9068:	1000051e 	bne	r2,zero,9080 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    906c:	00820004 	movi	r2,2048
    9070:	e0fffa17 	ldw	r3,-24(fp)
    9074:	10c5c83a 	sub	r2,r2,r3
    9078:	e0bff815 	stw	r2,-32(fp)
    907c:	00000406 	br	9090 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    9080:	0081ffc4 	movi	r2,2047
    9084:	e0fffa17 	ldw	r3,-24(fp)
    9088:	10c5c83a 	sub	r2,r2,r3
    908c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    9090:	e0bff817 	ldw	r2,-32(fp)
    9094:	1005003a 	cmpeq	r2,r2,zero
    9098:	10001f1e 	bne	r2,zero,9118 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    909c:	e0fffd17 	ldw	r3,-12(fp)
    90a0:	e0bff817 	ldw	r2,-32(fp)
    90a4:	1880022e 	bgeu	r3,r2,90b0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    90a8:	e0bffd17 	ldw	r2,-12(fp)
    90ac:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    90b0:	e0bffb17 	ldw	r2,-20(fp)
    90b4:	10c20e04 	addi	r3,r2,2104
    90b8:	e0bffa17 	ldw	r2,-24(fp)
    90bc:	1885883a 	add	r2,r3,r2
    90c0:	e0fffc17 	ldw	r3,-16(fp)
    90c4:	1009883a 	mov	r4,r2
    90c8:	180b883a 	mov	r5,r3
    90cc:	e1bff817 	ldw	r6,-32(fp)
    90d0:	000ad580 	call	ad58 <memcpy>
      ptr   += n;
    90d4:	e0fff817 	ldw	r3,-32(fp)
    90d8:	e0bffc17 	ldw	r2,-16(fp)
    90dc:	10c5883a 	add	r2,r2,r3
    90e0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    90e4:	e0fffd17 	ldw	r3,-12(fp)
    90e8:	e0bff817 	ldw	r2,-32(fp)
    90ec:	1885c83a 	sub	r2,r3,r2
    90f0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    90f4:	e0fffa17 	ldw	r3,-24(fp)
    90f8:	e0bff817 	ldw	r2,-32(fp)
    90fc:	1885883a 	add	r2,r3,r2
    9100:	10c1ffcc 	andi	r3,r2,2047
    9104:	e0bffb17 	ldw	r2,-20(fp)
    9108:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    910c:	e0bffd17 	ldw	r2,-12(fp)
    9110:	10800048 	cmpgei	r2,r2,1
    9114:	103fc31e 	bne	r2,zero,9024 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9118:	0005303a 	rdctl	r2,status
    911c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9120:	e0fff517 	ldw	r3,-44(fp)
    9124:	00bfff84 	movi	r2,-2
    9128:	1884703a 	and	r2,r3,r2
    912c:	1001703a 	wrctl	status,r2
  
  return context;
    9130:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    9134:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    9138:	e0bffb17 	ldw	r2,-20(fp)
    913c:	10800817 	ldw	r2,32(r2)
    9140:	10c00094 	ori	r3,r2,2
    9144:	e0bffb17 	ldw	r2,-20(fp)
    9148:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    914c:	e0bffb17 	ldw	r2,-20(fp)
    9150:	10800017 	ldw	r2,0(r2)
    9154:	11000104 	addi	r4,r2,4
    9158:	e0bffb17 	ldw	r2,-20(fp)
    915c:	10800817 	ldw	r2,32(r2)
    9160:	1007883a 	mov	r3,r2
    9164:	2005883a 	mov	r2,r4
    9168:	10c00035 	stwio	r3,0(r2)
    916c:	e0bff717 	ldw	r2,-36(fp)
    9170:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9174:	e0bff417 	ldw	r2,-48(fp)
    9178:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    917c:	e0bffd17 	ldw	r2,-12(fp)
    9180:	10800050 	cmplti	r2,r2,1
    9184:	1000111e 	bne	r2,zero,91cc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    9188:	e0bffe17 	ldw	r2,-8(fp)
    918c:	1090000c 	andi	r2,r2,16384
    9190:	1004c03a 	cmpne	r2,r2,zero
    9194:	1000101e 	bne	r2,zero,91d8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    9198:	e0bffb17 	ldw	r2,-20(fp)
    919c:	10c00d17 	ldw	r3,52(r2)
    91a0:	e0bff917 	ldw	r2,-28(fp)
    91a4:	1880051e 	bne	r3,r2,91bc <altera_avalon_jtag_uart_write+0x1c8>
    91a8:	e0bffb17 	ldw	r2,-20(fp)
    91ac:	10c00917 	ldw	r3,36(r2)
    91b0:	e0bffb17 	ldw	r2,-20(fp)
    91b4:	10800117 	ldw	r2,4(r2)
    91b8:	18bff736 	bltu	r3,r2,9198 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    91bc:	e0bffb17 	ldw	r2,-20(fp)
    91c0:	10c00d17 	ldw	r3,52(r2)
    91c4:	e0bff917 	ldw	r2,-28(fp)
    91c8:	18800326 	beq	r3,r2,91d8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    91cc:	e0bffd17 	ldw	r2,-12(fp)
    91d0:	10800048 	cmpgei	r2,r2,1
    91d4:	103fcd1e 	bne	r2,zero,910c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    91d8:	e0fffc17 	ldw	r3,-16(fp)
    91dc:	e0bff617 	ldw	r2,-40(fp)
    91e0:	18800526 	beq	r3,r2,91f8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    91e4:	e0fffc17 	ldw	r3,-16(fp)
    91e8:	e0bff617 	ldw	r2,-40(fp)
    91ec:	1887c83a 	sub	r3,r3,r2
    91f0:	e0ffff15 	stw	r3,-4(fp)
    91f4:	00000906 	br	921c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    91f8:	e0bffe17 	ldw	r2,-8(fp)
    91fc:	1090000c 	andi	r2,r2,16384
    9200:	1005003a 	cmpeq	r2,r2,zero
    9204:	1000031e 	bne	r2,zero,9214 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    9208:	00bffd44 	movi	r2,-11
    920c:	e0bfff15 	stw	r2,-4(fp)
    9210:	00000206 	br	921c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    9214:	00bffec4 	movi	r2,-5
    9218:	e0bfff15 	stw	r2,-4(fp)
    921c:	e0bfff17 	ldw	r2,-4(fp)
}
    9220:	e037883a 	mov	sp,fp
    9224:	dfc00117 	ldw	ra,4(sp)
    9228:	df000017 	ldw	fp,0(sp)
    922c:	dec00204 	addi	sp,sp,8
    9230:	f800283a 	ret

00009234 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9234:	defffa04 	addi	sp,sp,-24
    9238:	dfc00515 	stw	ra,20(sp)
    923c:	df000415 	stw	fp,16(sp)
    9240:	df000404 	addi	fp,sp,16
    9244:	e13ffd15 	stw	r4,-12(fp)
    9248:	e17ffe15 	stw	r5,-8(fp)
    924c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    9250:	e0bffd17 	ldw	r2,-12(fp)
    9254:	10800017 	ldw	r2,0(r2)
    9258:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    925c:	e0bffc17 	ldw	r2,-16(fp)
    9260:	11000a04 	addi	r4,r2,40
    9264:	e0bffd17 	ldw	r2,-12(fp)
    9268:	11c00217 	ldw	r7,8(r2)
    926c:	e17ffe17 	ldw	r5,-8(fp)
    9270:	e1bfff17 	ldw	r6,-4(fp)
    9274:	000972c0 	call	972c <altera_avalon_uart_read>
      fd->fd_flags);
}
    9278:	e037883a 	mov	sp,fp
    927c:	dfc00117 	ldw	ra,4(sp)
    9280:	df000017 	ldw	fp,0(sp)
    9284:	dec00204 	addi	sp,sp,8
    9288:	f800283a 	ret

0000928c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    928c:	defffa04 	addi	sp,sp,-24
    9290:	dfc00515 	stw	ra,20(sp)
    9294:	df000415 	stw	fp,16(sp)
    9298:	df000404 	addi	fp,sp,16
    929c:	e13ffd15 	stw	r4,-12(fp)
    92a0:	e17ffe15 	stw	r5,-8(fp)
    92a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    92a8:	e0bffd17 	ldw	r2,-12(fp)
    92ac:	10800017 	ldw	r2,0(r2)
    92b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    92b4:	e0bffc17 	ldw	r2,-16(fp)
    92b8:	11000a04 	addi	r4,r2,40
    92bc:	e0bffd17 	ldw	r2,-12(fp)
    92c0:	11c00217 	ldw	r7,8(r2)
    92c4:	e17ffe17 	ldw	r5,-8(fp)
    92c8:	e1bfff17 	ldw	r6,-4(fp)
    92cc:	00099bc0 	call	99bc <altera_avalon_uart_write>
      fd->fd_flags);
}
    92d0:	e037883a 	mov	sp,fp
    92d4:	dfc00117 	ldw	ra,4(sp)
    92d8:	df000017 	ldw	fp,0(sp)
    92dc:	dec00204 	addi	sp,sp,8
    92e0:	f800283a 	ret

000092e4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    92e4:	defffc04 	addi	sp,sp,-16
    92e8:	dfc00315 	stw	ra,12(sp)
    92ec:	df000215 	stw	fp,8(sp)
    92f0:	df000204 	addi	fp,sp,8
    92f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    92f8:	e0bfff17 	ldw	r2,-4(fp)
    92fc:	10800017 	ldw	r2,0(r2)
    9300:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    9304:	e0bffe17 	ldw	r2,-8(fp)
    9308:	11000a04 	addi	r4,r2,40
    930c:	e0bfff17 	ldw	r2,-4(fp)
    9310:	11400217 	ldw	r5,8(r2)
    9314:	00096cc0 	call	96cc <altera_avalon_uart_close>
}
    9318:	e037883a 	mov	sp,fp
    931c:	dfc00117 	ldw	ra,4(sp)
    9320:	df000017 	ldw	fp,0(sp)
    9324:	dec00204 	addi	sp,sp,8
    9328:	f800283a 	ret

0000932c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    932c:	defff704 	addi	sp,sp,-36
    9330:	dfc00815 	stw	ra,32(sp)
    9334:	df000715 	stw	fp,28(sp)
    9338:	df000704 	addi	fp,sp,28
    933c:	e13ffc15 	stw	r4,-16(fp)
    9340:	e17ffd15 	stw	r5,-12(fp)
    9344:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    9348:	e0bffc17 	ldw	r2,-16(fp)
    934c:	10800017 	ldw	r2,0(r2)
    9350:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    9354:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    9358:	1004c03a 	cmpne	r2,r2,zero
    935c:	1000061e 	bne	r2,zero,9378 <altera_avalon_uart_init+0x4c>
    9360:	0005883a 	mov	r2,zero
    9364:	1004c03a 	cmpne	r2,r2,zero
    9368:	1000031e 	bne	r2,zero,9378 <altera_avalon_uart_init+0x4c>
    936c:	0005883a 	mov	r2,zero
    9370:	1005003a 	cmpeq	r2,r2,zero
    9374:	1000031e 	bne	r2,zero,9384 <altera_avalon_uart_init+0x58>
    9378:	00800044 	movi	r2,1
    937c:	e0bfff15 	stw	r2,-4(fp)
    9380:	00000106 	br	9388 <altera_avalon_uart_init+0x5c>
    9384:	e03fff15 	stw	zero,-4(fp)
    9388:	e0bfff17 	ldw	r2,-4(fp)
    938c:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    9390:	e0bffa17 	ldw	r2,-24(fp)
    9394:	1004c03a 	cmpne	r2,r2,zero
    9398:	1000111e 	bne	r2,zero,93e0 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    939c:	e0fffc17 	ldw	r3,-16(fp)
    93a0:	00832004 	movi	r2,3200
    93a4:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    93a8:	e0bffb17 	ldw	r2,-20(fp)
    93ac:	11000304 	addi	r4,r2,12
    93b0:	e0bffc17 	ldw	r2,-16(fp)
    93b4:	10800117 	ldw	r2,4(r2)
    93b8:	1007883a 	mov	r3,r2
    93bc:	2005883a 	mov	r2,r4
    93c0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    93c4:	d8000015 	stw	zero,0(sp)
    93c8:	e13ffd17 	ldw	r4,-12(fp)
    93cc:	e17ffe17 	ldw	r5,-8(fp)
    93d0:	01800074 	movhi	r6,1
    93d4:	31a4fd04 	addi	r6,r6,-27660
    93d8:	e1fffc17 	ldw	r7,-16(fp)
    93dc:	000a0d80 	call	a0d8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    93e0:	e037883a 	mov	sp,fp
    93e4:	dfc00117 	ldw	ra,4(sp)
    93e8:	df000017 	ldw	fp,0(sp)
    93ec:	dec00204 	addi	sp,sp,8
    93f0:	f800283a 	ret

000093f4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    93f4:	defffa04 	addi	sp,sp,-24
    93f8:	dfc00515 	stw	ra,20(sp)
    93fc:	df000415 	stw	fp,16(sp)
    9400:	df000404 	addi	fp,sp,16
    9404:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    9408:	e0bfff17 	ldw	r2,-4(fp)
    940c:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    9410:	e0bffd17 	ldw	r2,-12(fp)
    9414:	10800017 	ldw	r2,0(r2)
    9418:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    941c:	e0bffc17 	ldw	r2,-16(fp)
    9420:	10800204 	addi	r2,r2,8
    9424:	10800037 	ldwio	r2,0(r2)
    9428:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    942c:	e0bffc17 	ldw	r2,-16(fp)
    9430:	10800204 	addi	r2,r2,8
    9434:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    9438:	e0bffc17 	ldw	r2,-16(fp)
    943c:	10800204 	addi	r2,r2,8
    9440:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    9444:	e0bffe17 	ldw	r2,-8(fp)
    9448:	1080200c 	andi	r2,r2,128
    944c:	1005003a 	cmpeq	r2,r2,zero
    9450:	1000031e 	bne	r2,zero,9460 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    9454:	e13ffd17 	ldw	r4,-12(fp)
    9458:	e17ffe17 	ldw	r5,-8(fp)
    945c:	00094900 	call	9490 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    9460:	e0bffe17 	ldw	r2,-8(fp)
    9464:	1081100c 	andi	r2,r2,1088
    9468:	1005003a 	cmpeq	r2,r2,zero
    946c:	1000031e 	bne	r2,zero,947c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    9470:	e13ffd17 	ldw	r4,-12(fp)
    9474:	e17ffe17 	ldw	r5,-8(fp)
    9478:	00095700 	call	9570 <altera_avalon_uart_txirq>
  }
  

}
    947c:	e037883a 	mov	sp,fp
    9480:	dfc00117 	ldw	ra,4(sp)
    9484:	df000017 	ldw	fp,0(sp)
    9488:	dec00204 	addi	sp,sp,8
    948c:	f800283a 	ret

00009490 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    9490:	defffc04 	addi	sp,sp,-16
    9494:	df000315 	stw	fp,12(sp)
    9498:	df000304 	addi	fp,sp,12
    949c:	e13ffe15 	stw	r4,-8(fp)
    94a0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    94a4:	e0bfff17 	ldw	r2,-4(fp)
    94a8:	108000cc 	andi	r2,r2,3
    94ac:	1004c03a 	cmpne	r2,r2,zero
    94b0:	10002b1e 	bne	r2,zero,9560 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    94b4:	e0bffe17 	ldw	r2,-8(fp)
    94b8:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    94bc:	e0bffe17 	ldw	r2,-8(fp)
    94c0:	10800317 	ldw	r2,12(r2)
    94c4:	10800044 	addi	r2,r2,1
    94c8:	10800fcc 	andi	r2,r2,63
    94cc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    94d0:	e0bffe17 	ldw	r2,-8(fp)
    94d4:	11000317 	ldw	r4,12(r2)
    94d8:	e0bffe17 	ldw	r2,-8(fp)
    94dc:	10800017 	ldw	r2,0(r2)
    94e0:	10800037 	ldwio	r2,0(r2)
    94e4:	1007883a 	mov	r3,r2
    94e8:	e0bffe17 	ldw	r2,-8(fp)
    94ec:	2085883a 	add	r2,r4,r2
    94f0:	10800704 	addi	r2,r2,28
    94f4:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    94f8:	e0fffe17 	ldw	r3,-8(fp)
    94fc:	e0bffd17 	ldw	r2,-12(fp)
    9500:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    9504:	e0bffe17 	ldw	r2,-8(fp)
    9508:	10800317 	ldw	r2,12(r2)
    950c:	10800044 	addi	r2,r2,1
    9510:	10800fcc 	andi	r2,r2,63
    9514:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    9518:	e0bffe17 	ldw	r2,-8(fp)
    951c:	10c00217 	ldw	r3,8(r2)
    9520:	e0bffd17 	ldw	r2,-12(fp)
    9524:	18800e1e 	bne	r3,r2,9560 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    9528:	e0bffe17 	ldw	r2,-8(fp)
    952c:	10c00117 	ldw	r3,4(r2)
    9530:	00bfdfc4 	movi	r2,-129
    9534:	1886703a 	and	r3,r3,r2
    9538:	e0bffe17 	ldw	r2,-8(fp)
    953c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    9540:	e0bffe17 	ldw	r2,-8(fp)
    9544:	10800017 	ldw	r2,0(r2)
    9548:	11000304 	addi	r4,r2,12
    954c:	e0bffe17 	ldw	r2,-8(fp)
    9550:	10800117 	ldw	r2,4(r2)
    9554:	1007883a 	mov	r3,r2
    9558:	2005883a 	mov	r2,r4
    955c:	10c00035 	stwio	r3,0(r2)
  }   
}
    9560:	e037883a 	mov	sp,fp
    9564:	df000017 	ldw	fp,0(sp)
    9568:	dec00104 	addi	sp,sp,4
    956c:	f800283a 	ret

00009570 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    9570:	defffd04 	addi	sp,sp,-12
    9574:	df000215 	stw	fp,8(sp)
    9578:	df000204 	addi	fp,sp,8
    957c:	e13ffe15 	stw	r4,-8(fp)
    9580:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    9584:	e0bffe17 	ldw	r2,-8(fp)
    9588:	10c00417 	ldw	r3,16(r2)
    958c:	e0bffe17 	ldw	r2,-8(fp)
    9590:	10800517 	ldw	r2,20(r2)
    9594:	18803626 	beq	r3,r2,9670 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    9598:	e0bffe17 	ldw	r2,-8(fp)
    959c:	10800617 	ldw	r2,24(r2)
    95a0:	1080008c 	andi	r2,r2,2
    95a4:	1005003a 	cmpeq	r2,r2,zero
    95a8:	1000041e 	bne	r2,zero,95bc <altera_avalon_uart_txirq+0x4c>
    95ac:	e0bfff17 	ldw	r2,-4(fp)
    95b0:	1082000c 	andi	r2,r2,2048
    95b4:	1005003a 	cmpeq	r2,r2,zero
    95b8:	10001e1e 	bne	r2,zero,9634 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    95bc:	e0bffe17 	ldw	r2,-8(fp)
    95c0:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    95c4:	e0bffe17 	ldw	r2,-8(fp)
    95c8:	10800017 	ldw	r2,0(r2)
    95cc:	11000104 	addi	r4,r2,4
    95d0:	e0bffe17 	ldw	r2,-8(fp)
    95d4:	10c00417 	ldw	r3,16(r2)
    95d8:	e0bffe17 	ldw	r2,-8(fp)
    95dc:	1885883a 	add	r2,r3,r2
    95e0:	10801704 	addi	r2,r2,92
    95e4:	10800003 	ldbu	r2,0(r2)
    95e8:	10c03fcc 	andi	r3,r2,255
    95ec:	2005883a 	mov	r2,r4
    95f0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    95f4:	e0bffe17 	ldw	r2,-8(fp)
    95f8:	10800417 	ldw	r2,16(r2)
    95fc:	10c00044 	addi	r3,r2,1
    9600:	e0bffe17 	ldw	r2,-8(fp)
    9604:	10c00415 	stw	r3,16(r2)
    9608:	e0bffe17 	ldw	r2,-8(fp)
    960c:	10800417 	ldw	r2,16(r2)
    9610:	10c00fcc 	andi	r3,r2,63
    9614:	e0bffe17 	ldw	r2,-8(fp)
    9618:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    961c:	e0bffe17 	ldw	r2,-8(fp)
    9620:	10800117 	ldw	r2,4(r2)
    9624:	10c01014 	ori	r3,r2,64
    9628:	e0bffe17 	ldw	r2,-8(fp)
    962c:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    9630:	00000f06 	br	9670 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    9634:	e0bffe17 	ldw	r2,-8(fp)
    9638:	10800017 	ldw	r2,0(r2)
    963c:	10800204 	addi	r2,r2,8
    9640:	10800037 	ldwio	r2,0(r2)
    9644:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    9648:	e0bfff17 	ldw	r2,-4(fp)
    964c:	1082000c 	andi	r2,r2,2048
    9650:	1004c03a 	cmpne	r2,r2,zero
    9654:	1000061e 	bne	r2,zero,9670 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    9658:	e0bffe17 	ldw	r2,-8(fp)
    965c:	10c00117 	ldw	r3,4(r2)
    9660:	00bfefc4 	movi	r2,-65
    9664:	1886703a 	and	r3,r3,r2
    9668:	e0bffe17 	ldw	r2,-8(fp)
    966c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    9670:	e0bffe17 	ldw	r2,-8(fp)
    9674:	10c00417 	ldw	r3,16(r2)
    9678:	e0bffe17 	ldw	r2,-8(fp)
    967c:	10800517 	ldw	r2,20(r2)
    9680:	1880061e 	bne	r3,r2,969c <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    9684:	e0bffe17 	ldw	r2,-8(fp)
    9688:	10c00117 	ldw	r3,4(r2)
    968c:	00beefc4 	movi	r2,-1089
    9690:	1886703a 	and	r3,r3,r2
    9694:	e0bffe17 	ldw	r2,-8(fp)
    9698:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    969c:	e0bffe17 	ldw	r2,-8(fp)
    96a0:	10800017 	ldw	r2,0(r2)
    96a4:	11000304 	addi	r4,r2,12
    96a8:	e0bffe17 	ldw	r2,-8(fp)
    96ac:	10800117 	ldw	r2,4(r2)
    96b0:	1007883a 	mov	r3,r2
    96b4:	2005883a 	mov	r2,r4
    96b8:	10c00035 	stwio	r3,0(r2)
}
    96bc:	e037883a 	mov	sp,fp
    96c0:	df000017 	ldw	fp,0(sp)
    96c4:	dec00104 	addi	sp,sp,4
    96c8:	f800283a 	ret

000096cc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    96cc:	defffc04 	addi	sp,sp,-16
    96d0:	df000315 	stw	fp,12(sp)
    96d4:	df000304 	addi	fp,sp,12
    96d8:	e13ffd15 	stw	r4,-12(fp)
    96dc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    96e0:	00000706 	br	9700 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    96e4:	e0bffe17 	ldw	r2,-8(fp)
    96e8:	1090000c 	andi	r2,r2,16384
    96ec:	1005003a 	cmpeq	r2,r2,zero
    96f0:	1000031e 	bne	r2,zero,9700 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    96f4:	00bffd44 	movi	r2,-11
    96f8:	e0bfff15 	stw	r2,-4(fp)
    96fc:	00000606 	br	9718 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    9700:	e0bffd17 	ldw	r2,-12(fp)
    9704:	10c00417 	ldw	r3,16(r2)
    9708:	e0bffd17 	ldw	r2,-12(fp)
    970c:	10800517 	ldw	r2,20(r2)
    9710:	18bff41e 	bne	r3,r2,96e4 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    9714:	e03fff15 	stw	zero,-4(fp)
    9718:	e0bfff17 	ldw	r2,-4(fp)
}
    971c:	e037883a 	mov	sp,fp
    9720:	df000017 	ldw	fp,0(sp)
    9724:	dec00104 	addi	sp,sp,4
    9728:	f800283a 	ret

0000972c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    972c:	defff004 	addi	sp,sp,-64
    9730:	dfc00f15 	stw	ra,60(sp)
    9734:	df000e15 	stw	fp,56(sp)
    9738:	df000e04 	addi	fp,sp,56
    973c:	e13ffb15 	stw	r4,-20(fp)
    9740:	e17ffc15 	stw	r5,-16(fp)
    9744:	e1bffd15 	stw	r6,-12(fp)
    9748:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    974c:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    9750:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    9754:	e0bffe17 	ldw	r2,-8(fp)
    9758:	1090000c 	andi	r2,r2,16384
    975c:	1005003a 	cmpeq	r2,r2,zero
    9760:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    9764:	e0bffb17 	ldw	r2,-20(fp)
    9768:	10800217 	ldw	r2,8(r2)
    976c:	10800044 	addi	r2,r2,1
    9770:	10800fcc 	andi	r2,r2,63
    9774:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    9778:	00001906 	br	97e0 <altera_avalon_uart_read+0xb4>
    {
      count++;
    977c:	e0bff617 	ldw	r2,-40(fp)
    9780:	10800044 	addi	r2,r2,1
    9784:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    9788:	e0bffb17 	ldw	r2,-20(fp)
    978c:	10c00217 	ldw	r3,8(r2)
    9790:	e0bffb17 	ldw	r2,-20(fp)
    9794:	1885883a 	add	r2,r3,r2
    9798:	10800704 	addi	r2,r2,28
    979c:	10800003 	ldbu	r2,0(r2)
    97a0:	1007883a 	mov	r3,r2
    97a4:	e0bffc17 	ldw	r2,-16(fp)
    97a8:	10c00005 	stb	r3,0(r2)
    97ac:	e0bffc17 	ldw	r2,-16(fp)
    97b0:	10800044 	addi	r2,r2,1
    97b4:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    97b8:	e0bffb17 	ldw	r2,-20(fp)
    97bc:	10800217 	ldw	r2,8(r2)
    97c0:	10c00044 	addi	r3,r2,1
    97c4:	e0bffb17 	ldw	r2,-20(fp)
    97c8:	10c00215 	stw	r3,8(r2)
    97cc:	e0bffb17 	ldw	r2,-20(fp)
    97d0:	10800217 	ldw	r2,8(r2)
    97d4:	10c00fcc 	andi	r3,r2,63
    97d8:	e0bffb17 	ldw	r2,-20(fp)
    97dc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    97e0:	e0fff617 	ldw	r3,-40(fp)
    97e4:	e0bffd17 	ldw	r2,-12(fp)
    97e8:	1880050e 	bge	r3,r2,9800 <altera_avalon_uart_read+0xd4>
    97ec:	e0bffb17 	ldw	r2,-20(fp)
    97f0:	10c00217 	ldw	r3,8(r2)
    97f4:	e0bffb17 	ldw	r2,-20(fp)
    97f8:	10800317 	ldw	r2,12(r2)
    97fc:	18bfdf1e 	bne	r3,r2,977c <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    9800:	e0bff617 	ldw	r2,-40(fp)
    9804:	1004c03a 	cmpne	r2,r2,zero
    9808:	1000271e 	bne	r2,zero,98a8 <altera_avalon_uart_read+0x17c>
    980c:	e0bffb17 	ldw	r2,-20(fp)
    9810:	10c00217 	ldw	r3,8(r2)
    9814:	e0bffb17 	ldw	r2,-20(fp)
    9818:	10800317 	ldw	r2,12(r2)
    981c:	1880221e 	bne	r3,r2,98a8 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    9820:	e0bff917 	ldw	r2,-28(fp)
    9824:	1004c03a 	cmpne	r2,r2,zero
    9828:	1000061e 	bne	r2,zero,9844 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    982c:	000995c0 	call	995c <alt_get_errno>
    9830:	00c002c4 	movi	r3,11
    9834:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    9838:	00800044 	movi	r2,1
    983c:	e0bff705 	stb	r2,-36(fp)
        break;
    9840:	00001f06 	br	98c0 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9844:	0005303a 	rdctl	r2,status
    9848:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    984c:	e0fff517 	ldw	r3,-44(fp)
    9850:	00bfff84 	movi	r2,-2
    9854:	1884703a 	and	r2,r3,r2
    9858:	1001703a 	wrctl	status,r2
  
  return context;
    985c:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    9860:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    9864:	e0bffb17 	ldw	r2,-20(fp)
    9868:	10800117 	ldw	r2,4(r2)
    986c:	10c02014 	ori	r3,r2,128
    9870:	e0bffb17 	ldw	r2,-20(fp)
    9874:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    9878:	e0bffb17 	ldw	r2,-20(fp)
    987c:	10800017 	ldw	r2,0(r2)
    9880:	11000304 	addi	r4,r2,12
    9884:	e0bffb17 	ldw	r2,-20(fp)
    9888:	10800117 	ldw	r2,4(r2)
    988c:	1007883a 	mov	r3,r2
    9890:	2005883a 	mov	r2,r4
    9894:	10c00035 	stwio	r3,0(r2)
    9898:	e0bffa17 	ldw	r2,-24(fp)
    989c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    98a0:	e0bff417 	ldw	r2,-48(fp)
    98a4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    98a8:	e0bff617 	ldw	r2,-40(fp)
    98ac:	1004c03a 	cmpne	r2,r2,zero
    98b0:	1000031e 	bne	r2,zero,98c0 <altera_avalon_uart_read+0x194>
    98b4:	e0bffd17 	ldw	r2,-12(fp)
    98b8:	1004c03a 	cmpne	r2,r2,zero
    98bc:	103fc81e 	bne	r2,zero,97e0 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98c0:	0005303a 	rdctl	r2,status
    98c4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98c8:	e0fff317 	ldw	r3,-52(fp)
    98cc:	00bfff84 	movi	r2,-2
    98d0:	1884703a 	and	r2,r3,r2
    98d4:	1001703a 	wrctl	status,r2
  
  return context;
    98d8:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    98dc:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    98e0:	e0bffb17 	ldw	r2,-20(fp)
    98e4:	10800117 	ldw	r2,4(r2)
    98e8:	10c02014 	ori	r3,r2,128
    98ec:	e0bffb17 	ldw	r2,-20(fp)
    98f0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    98f4:	e0bffb17 	ldw	r2,-20(fp)
    98f8:	10800017 	ldw	r2,0(r2)
    98fc:	11000304 	addi	r4,r2,12
    9900:	e0bffb17 	ldw	r2,-20(fp)
    9904:	10800117 	ldw	r2,4(r2)
    9908:	1007883a 	mov	r3,r2
    990c:	2005883a 	mov	r2,r4
    9910:	10c00035 	stwio	r3,0(r2)
    9914:	e0bffa17 	ldw	r2,-24(fp)
    9918:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    991c:	e0bff217 	ldw	r2,-56(fp)
    9920:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    9924:	e0bff703 	ldbu	r2,-36(fp)
    9928:	1005003a 	cmpeq	r2,r2,zero
    992c:	1000031e 	bne	r2,zero,993c <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    9930:	00bffd04 	movi	r2,-12
    9934:	e0bfff15 	stw	r2,-4(fp)
    9938:	00000206 	br	9944 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    993c:	e0bff617 	ldw	r2,-40(fp)
    9940:	e0bfff15 	stw	r2,-4(fp)
    9944:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    9948:	e037883a 	mov	sp,fp
    994c:	dfc00117 	ldw	ra,4(sp)
    9950:	df000017 	ldw	fp,0(sp)
    9954:	dec00204 	addi	sp,sp,8
    9958:	f800283a 	ret

0000995c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    995c:	defffd04 	addi	sp,sp,-12
    9960:	dfc00215 	stw	ra,8(sp)
    9964:	df000115 	stw	fp,4(sp)
    9968:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    996c:	00800074 	movhi	r2,1
    9970:	10b23704 	addi	r2,r2,-14116
    9974:	10800017 	ldw	r2,0(r2)
    9978:	1005003a 	cmpeq	r2,r2,zero
    997c:	1000061e 	bne	r2,zero,9998 <alt_get_errno+0x3c>
    9980:	00800074 	movhi	r2,1
    9984:	10b23704 	addi	r2,r2,-14116
    9988:	10800017 	ldw	r2,0(r2)
    998c:	103ee83a 	callr	r2
    9990:	e0bfff15 	stw	r2,-4(fp)
    9994:	00000306 	br	99a4 <alt_get_errno+0x48>
    9998:	00800074 	movhi	r2,1
    999c:	10b80104 	addi	r2,r2,-8188
    99a0:	e0bfff15 	stw	r2,-4(fp)
    99a4:	e0bfff17 	ldw	r2,-4(fp)
}
    99a8:	e037883a 	mov	sp,fp
    99ac:	dfc00117 	ldw	ra,4(sp)
    99b0:	df000017 	ldw	fp,0(sp)
    99b4:	dec00204 	addi	sp,sp,8
    99b8:	f800283a 	ret

000099bc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    99bc:	defff204 	addi	sp,sp,-56
    99c0:	dfc00d15 	stw	ra,52(sp)
    99c4:	df000c15 	stw	fp,48(sp)
    99c8:	df000c04 	addi	fp,sp,48
    99cc:	e13ffc15 	stw	r4,-16(fp)
    99d0:	e17ffd15 	stw	r5,-12(fp)
    99d4:	e1bffe15 	stw	r6,-8(fp)
    99d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    99dc:	e0bffe17 	ldw	r2,-8(fp)
    99e0:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    99e4:	e0bfff17 	ldw	r2,-4(fp)
    99e8:	1090000c 	andi	r2,r2,16384
    99ec:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    99f0:	00004006 	br	9af4 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    99f4:	e0bffc17 	ldw	r2,-16(fp)
    99f8:	10800517 	ldw	r2,20(r2)
    99fc:	10800044 	addi	r2,r2,1
    9a00:	10800fcc 	andi	r2,r2,63
    9a04:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    9a08:	e0bffc17 	ldw	r2,-16(fp)
    9a0c:	10c00417 	ldw	r3,16(r2)
    9a10:	e0bff917 	ldw	r2,-28(fp)
    9a14:	1880251e 	bne	r3,r2,9aac <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    9a18:	e0bffa17 	ldw	r2,-24(fp)
    9a1c:	1005003a 	cmpeq	r2,r2,zero
    9a20:	1000051e 	bne	r2,zero,9a38 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    9a24:	0009b840 	call	9b84 <alt_get_errno>
    9a28:	1007883a 	mov	r3,r2
    9a2c:	008002c4 	movi	r2,11
    9a30:	18800015 	stw	r2,0(r3)
        break;
    9a34:	00003206 	br	9b00 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a38:	0005303a 	rdctl	r2,status
    9a3c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a40:	e0fff717 	ldw	r3,-36(fp)
    9a44:	00bfff84 	movi	r2,-2
    9a48:	1884703a 	and	r2,r3,r2
    9a4c:	1001703a 	wrctl	status,r2
  
  return context;
    9a50:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    9a54:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    9a58:	e0bffc17 	ldw	r2,-16(fp)
    9a5c:	10800117 	ldw	r2,4(r2)
    9a60:	10c11014 	ori	r3,r2,1088
    9a64:	e0bffc17 	ldw	r2,-16(fp)
    9a68:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    9a6c:	e0bffc17 	ldw	r2,-16(fp)
    9a70:	10800017 	ldw	r2,0(r2)
    9a74:	11000304 	addi	r4,r2,12
    9a78:	e0bffc17 	ldw	r2,-16(fp)
    9a7c:	10800117 	ldw	r2,4(r2)
    9a80:	1007883a 	mov	r3,r2
    9a84:	2005883a 	mov	r2,r4
    9a88:	10c00035 	stwio	r3,0(r2)
    9a8c:	e0bffb17 	ldw	r2,-20(fp)
    9a90:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a94:	e0bff617 	ldw	r2,-40(fp)
    9a98:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    9a9c:	e0bffc17 	ldw	r2,-16(fp)
    9aa0:	10c00417 	ldw	r3,16(r2)
    9aa4:	e0bff917 	ldw	r2,-28(fp)
    9aa8:	18bffc26 	beq	r3,r2,9a9c <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    9aac:	e0bff817 	ldw	r2,-32(fp)
    9ab0:	10bfffc4 	addi	r2,r2,-1
    9ab4:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    9ab8:	e0bffc17 	ldw	r2,-16(fp)
    9abc:	10c00517 	ldw	r3,20(r2)
    9ac0:	e0bffd17 	ldw	r2,-12(fp)
    9ac4:	10800003 	ldbu	r2,0(r2)
    9ac8:	1009883a 	mov	r4,r2
    9acc:	e0bffc17 	ldw	r2,-16(fp)
    9ad0:	1885883a 	add	r2,r3,r2
    9ad4:	10801704 	addi	r2,r2,92
    9ad8:	11000005 	stb	r4,0(r2)
    9adc:	e0bffd17 	ldw	r2,-12(fp)
    9ae0:	10800044 	addi	r2,r2,1
    9ae4:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    9ae8:	e0fffc17 	ldw	r3,-16(fp)
    9aec:	e0bff917 	ldw	r2,-28(fp)
    9af0:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    9af4:	e0bff817 	ldw	r2,-32(fp)
    9af8:	1004c03a 	cmpne	r2,r2,zero
    9afc:	103fbd1e 	bne	r2,zero,99f4 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9b00:	0005303a 	rdctl	r2,status
    9b04:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b08:	e0fff517 	ldw	r3,-44(fp)
    9b0c:	00bfff84 	movi	r2,-2
    9b10:	1884703a 	and	r2,r3,r2
    9b14:	1001703a 	wrctl	status,r2
  
  return context;
    9b18:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    9b1c:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    9b20:	e0bffc17 	ldw	r2,-16(fp)
    9b24:	10800117 	ldw	r2,4(r2)
    9b28:	10c11014 	ori	r3,r2,1088
    9b2c:	e0bffc17 	ldw	r2,-16(fp)
    9b30:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    9b34:	e0bffc17 	ldw	r2,-16(fp)
    9b38:	10800017 	ldw	r2,0(r2)
    9b3c:	11000304 	addi	r4,r2,12
    9b40:	e0bffc17 	ldw	r2,-16(fp)
    9b44:	10800117 	ldw	r2,4(r2)
    9b48:	1007883a 	mov	r3,r2
    9b4c:	2005883a 	mov	r2,r4
    9b50:	10c00035 	stwio	r3,0(r2)
    9b54:	e0bffb17 	ldw	r2,-20(fp)
    9b58:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b5c:	e0bff417 	ldw	r2,-48(fp)
    9b60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    9b64:	e0fffe17 	ldw	r3,-8(fp)
    9b68:	e0bff817 	ldw	r2,-32(fp)
    9b6c:	1885c83a 	sub	r2,r3,r2
}
    9b70:	e037883a 	mov	sp,fp
    9b74:	dfc00117 	ldw	ra,4(sp)
    9b78:	df000017 	ldw	fp,0(sp)
    9b7c:	dec00204 	addi	sp,sp,8
    9b80:	f800283a 	ret

00009b84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9b84:	defffd04 	addi	sp,sp,-12
    9b88:	dfc00215 	stw	ra,8(sp)
    9b8c:	df000115 	stw	fp,4(sp)
    9b90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9b94:	00800074 	movhi	r2,1
    9b98:	10b23704 	addi	r2,r2,-14116
    9b9c:	10800017 	ldw	r2,0(r2)
    9ba0:	1005003a 	cmpeq	r2,r2,zero
    9ba4:	1000061e 	bne	r2,zero,9bc0 <alt_get_errno+0x3c>
    9ba8:	00800074 	movhi	r2,1
    9bac:	10b23704 	addi	r2,r2,-14116
    9bb0:	10800017 	ldw	r2,0(r2)
    9bb4:	103ee83a 	callr	r2
    9bb8:	e0bfff15 	stw	r2,-4(fp)
    9bbc:	00000306 	br	9bcc <alt_get_errno+0x48>
    9bc0:	00800074 	movhi	r2,1
    9bc4:	10b80104 	addi	r2,r2,-8188
    9bc8:	e0bfff15 	stw	r2,-4(fp)
    9bcc:	e0bfff17 	ldw	r2,-4(fp)
}
    9bd0:	e037883a 	mov	sp,fp
    9bd4:	dfc00117 	ldw	ra,4(sp)
    9bd8:	df000017 	ldw	fp,0(sp)
    9bdc:	dec00204 	addi	sp,sp,8
    9be0:	f800283a 	ret

00009be4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    9be4:	defff404 	addi	sp,sp,-48
    9be8:	df000b15 	stw	fp,44(sp)
    9bec:	df000b04 	addi	fp,sp,44
    9bf0:	e13ffb15 	stw	r4,-20(fp)
    9bf4:	e17ffc15 	stw	r5,-16(fp)
    9bf8:	e1bffd15 	stw	r6,-12(fp)
    9bfc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    9c00:	e03ff915 	stw	zero,-28(fp)
    9c04:	00800074 	movhi	r2,1
    9c08:	10b7ff04 	addi	r2,r2,-8196
    9c0c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    9c10:	1005003a 	cmpeq	r2,r2,zero
    9c14:	1000411e 	bne	r2,zero,9d1c <alt_alarm_start+0x138>
  {
    if (alarm)
    9c18:	e0bffb17 	ldw	r2,-20(fp)
    9c1c:	1005003a 	cmpeq	r2,r2,zero
    9c20:	10003b1e 	bne	r2,zero,9d10 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    9c24:	e0fffb17 	ldw	r3,-20(fp)
    9c28:	e0bffd17 	ldw	r2,-12(fp)
    9c2c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    9c30:	e0fffb17 	ldw	r3,-20(fp)
    9c34:	e0bffe17 	ldw	r2,-8(fp)
    9c38:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c3c:	0005303a 	rdctl	r2,status
    9c40:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c44:	e0fff817 	ldw	r3,-32(fp)
    9c48:	00bfff84 	movi	r2,-2
    9c4c:	1884703a 	and	r2,r3,r2
    9c50:	1001703a 	wrctl	status,r2
  
  return context;
    9c54:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    9c58:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    9c5c:	00800074 	movhi	r2,1
    9c60:	10b80004 	addi	r2,r2,-8192
    9c64:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    9c68:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    9c6c:	e0fffc17 	ldw	r3,-16(fp)
    9c70:	e0bff917 	ldw	r2,-28(fp)
    9c74:	1885883a 	add	r2,r3,r2
    9c78:	10c00044 	addi	r3,r2,1
    9c7c:	e0bffb17 	ldw	r2,-20(fp)
    9c80:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    9c84:	e0bffb17 	ldw	r2,-20(fp)
    9c88:	10c00217 	ldw	r3,8(r2)
    9c8c:	e0bff917 	ldw	r2,-28(fp)
    9c90:	1880042e 	bgeu	r3,r2,9ca4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    9c94:	e0fffb17 	ldw	r3,-20(fp)
    9c98:	00800044 	movi	r2,1
    9c9c:	18800405 	stb	r2,16(r3)
    9ca0:	00000206 	br	9cac <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    9ca4:	e0bffb17 	ldw	r2,-20(fp)
    9ca8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    9cac:	e0fffb17 	ldw	r3,-20(fp)
    9cb0:	00800074 	movhi	r2,1
    9cb4:	10b23904 	addi	r2,r2,-14108
    9cb8:	e0bff615 	stw	r2,-40(fp)
    9cbc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9cc0:	e0fff717 	ldw	r3,-36(fp)
    9cc4:	e0bff617 	ldw	r2,-40(fp)
    9cc8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    9ccc:	e0bff617 	ldw	r2,-40(fp)
    9cd0:	10c00017 	ldw	r3,0(r2)
    9cd4:	e0bff717 	ldw	r2,-36(fp)
    9cd8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9cdc:	e0bff617 	ldw	r2,-40(fp)
    9ce0:	10c00017 	ldw	r3,0(r2)
    9ce4:	e0bff717 	ldw	r2,-36(fp)
    9ce8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    9cec:	e0fff617 	ldw	r3,-40(fp)
    9cf0:	e0bff717 	ldw	r2,-36(fp)
    9cf4:	18800015 	stw	r2,0(r3)
    9cf8:	e0bffa17 	ldw	r2,-24(fp)
    9cfc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9d00:	e0bff517 	ldw	r2,-44(fp)
    9d04:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    9d08:	e03fff15 	stw	zero,-4(fp)
    9d0c:	00000506 	br	9d24 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    9d10:	00bffa84 	movi	r2,-22
    9d14:	e0bfff15 	stw	r2,-4(fp)
    9d18:	00000206 	br	9d24 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    9d1c:	00bfde84 	movi	r2,-134
    9d20:	e0bfff15 	stw	r2,-4(fp)
    9d24:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    9d28:	e037883a 	mov	sp,fp
    9d2c:	df000017 	ldw	fp,0(sp)
    9d30:	dec00104 	addi	sp,sp,4
    9d34:	f800283a 	ret

00009d38 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9d38:	defff804 	addi	sp,sp,-32
    9d3c:	dfc00715 	stw	ra,28(sp)
    9d40:	df000615 	stw	fp,24(sp)
    9d44:	df000604 	addi	fp,sp,24
    9d48:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9d4c:	e0bffc17 	ldw	r2,-16(fp)
    9d50:	1004803a 	cmplt	r2,r2,zero
    9d54:	1000091e 	bne	r2,zero,9d7c <close+0x44>
    9d58:	e13ffc17 	ldw	r4,-16(fp)
    9d5c:	01400304 	movi	r5,12
    9d60:	00085280 	call	8528 <__mulsi3>
    9d64:	1007883a 	mov	r3,r2
    9d68:	00800074 	movhi	r2,1
    9d6c:	10b0d204 	addi	r2,r2,-15544
    9d70:	1887883a 	add	r3,r3,r2
    9d74:	e0ffff15 	stw	r3,-4(fp)
    9d78:	00000106 	br	9d80 <close+0x48>
    9d7c:	e03fff15 	stw	zero,-4(fp)
    9d80:	e0bfff17 	ldw	r2,-4(fp)
    9d84:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9d88:	e0bffb17 	ldw	r2,-20(fp)
    9d8c:	1005003a 	cmpeq	r2,r2,zero
    9d90:	10001d1e 	bne	r2,zero,9e08 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9d94:	e0bffb17 	ldw	r2,-20(fp)
    9d98:	10800017 	ldw	r2,0(r2)
    9d9c:	10800417 	ldw	r2,16(r2)
    9da0:	1005003a 	cmpeq	r2,r2,zero
    9da4:	1000071e 	bne	r2,zero,9dc4 <close+0x8c>
    9da8:	e0bffb17 	ldw	r2,-20(fp)
    9dac:	10800017 	ldw	r2,0(r2)
    9db0:	10800417 	ldw	r2,16(r2)
    9db4:	e13ffb17 	ldw	r4,-20(fp)
    9db8:	103ee83a 	callr	r2
    9dbc:	e0bffe15 	stw	r2,-8(fp)
    9dc0:	00000106 	br	9dc8 <close+0x90>
    9dc4:	e03ffe15 	stw	zero,-8(fp)
    9dc8:	e0bffe17 	ldw	r2,-8(fp)
    9dcc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9dd0:	e13ffc17 	ldw	r4,-16(fp)
    9dd4:	000a7d80 	call	a7d8 <alt_release_fd>
    if (rval < 0)
    9dd8:	e0bffa17 	ldw	r2,-24(fp)
    9ddc:	1004403a 	cmpge	r2,r2,zero
    9de0:	1000071e 	bne	r2,zero,9e00 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9de4:	0009e380 	call	9e38 <alt_get_errno>
    9de8:	e0fffa17 	ldw	r3,-24(fp)
    9dec:	00c7c83a 	sub	r3,zero,r3
    9df0:	10c00015 	stw	r3,0(r2)
      return -1;
    9df4:	00bfffc4 	movi	r2,-1
    9df8:	e0bffd15 	stw	r2,-12(fp)
    9dfc:	00000806 	br	9e20 <close+0xe8>
    }
    return 0;
    9e00:	e03ffd15 	stw	zero,-12(fp)
    9e04:	00000606 	br	9e20 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9e08:	0009e380 	call	9e38 <alt_get_errno>
    9e0c:	1007883a 	mov	r3,r2
    9e10:	00801444 	movi	r2,81
    9e14:	18800015 	stw	r2,0(r3)
    return -1;
    9e18:	00bfffc4 	movi	r2,-1
    9e1c:	e0bffd15 	stw	r2,-12(fp)
    9e20:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9e24:	e037883a 	mov	sp,fp
    9e28:	dfc00117 	ldw	ra,4(sp)
    9e2c:	df000017 	ldw	fp,0(sp)
    9e30:	dec00204 	addi	sp,sp,8
    9e34:	f800283a 	ret

00009e38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e38:	defffd04 	addi	sp,sp,-12
    9e3c:	dfc00215 	stw	ra,8(sp)
    9e40:	df000115 	stw	fp,4(sp)
    9e44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9e48:	00800074 	movhi	r2,1
    9e4c:	10b23704 	addi	r2,r2,-14116
    9e50:	10800017 	ldw	r2,0(r2)
    9e54:	1005003a 	cmpeq	r2,r2,zero
    9e58:	1000061e 	bne	r2,zero,9e74 <alt_get_errno+0x3c>
    9e5c:	00800074 	movhi	r2,1
    9e60:	10b23704 	addi	r2,r2,-14116
    9e64:	10800017 	ldw	r2,0(r2)
    9e68:	103ee83a 	callr	r2
    9e6c:	e0bfff15 	stw	r2,-4(fp)
    9e70:	00000306 	br	9e80 <alt_get_errno+0x48>
    9e74:	00800074 	movhi	r2,1
    9e78:	10b80104 	addi	r2,r2,-8188
    9e7c:	e0bfff15 	stw	r2,-4(fp)
    9e80:	e0bfff17 	ldw	r2,-4(fp)
}
    9e84:	e037883a 	mov	sp,fp
    9e88:	dfc00117 	ldw	ra,4(sp)
    9e8c:	df000017 	ldw	fp,0(sp)
    9e90:	dec00204 	addi	sp,sp,8
    9e94:	f800283a 	ret

00009e98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9e98:	deffff04 	addi	sp,sp,-4
    9e9c:	df000015 	stw	fp,0(sp)
    9ea0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9ea4:	e037883a 	mov	sp,fp
    9ea8:	df000017 	ldw	fp,0(sp)
    9eac:	dec00104 	addi	sp,sp,4
    9eb0:	f800283a 	ret

00009eb4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9eb4:	defffc04 	addi	sp,sp,-16
    9eb8:	df000315 	stw	fp,12(sp)
    9ebc:	df000304 	addi	fp,sp,12
    9ec0:	e13ffd15 	stw	r4,-12(fp)
    9ec4:	e17ffe15 	stw	r5,-8(fp)
    9ec8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9ecc:	e0bfff17 	ldw	r2,-4(fp)
}
    9ed0:	e037883a 	mov	sp,fp
    9ed4:	df000017 	ldw	fp,0(sp)
    9ed8:	dec00104 	addi	sp,sp,4
    9edc:	f800283a 	ret

00009ee0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9ee0:	defff904 	addi	sp,sp,-28
    9ee4:	dfc00615 	stw	ra,24(sp)
    9ee8:	df000515 	stw	fp,20(sp)
    9eec:	df000504 	addi	fp,sp,20
    9ef0:	e13ffd15 	stw	r4,-12(fp)
    9ef4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9ef8:	e0bffd17 	ldw	r2,-12(fp)
    9efc:	1005003a 	cmpeq	r2,r2,zero
    9f00:	1000041e 	bne	r2,zero,9f14 <alt_dev_llist_insert+0x34>
    9f04:	e0bffd17 	ldw	r2,-12(fp)
    9f08:	10800217 	ldw	r2,8(r2)
    9f0c:	1004c03a 	cmpne	r2,r2,zero
    9f10:	1000071e 	bne	r2,zero,9f30 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    9f14:	0009f940 	call	9f94 <alt_get_errno>
    9f18:	1007883a 	mov	r3,r2
    9f1c:	00800584 	movi	r2,22
    9f20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9f24:	00bffa84 	movi	r2,-22
    9f28:	e0bfff15 	stw	r2,-4(fp)
    9f2c:	00001306 	br	9f7c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9f30:	e0fffd17 	ldw	r3,-12(fp)
    9f34:	e0bffe17 	ldw	r2,-8(fp)
    9f38:	e0bffb15 	stw	r2,-20(fp)
    9f3c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9f40:	e0fffc17 	ldw	r3,-16(fp)
    9f44:	e0bffb17 	ldw	r2,-20(fp)
    9f48:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    9f4c:	e0bffb17 	ldw	r2,-20(fp)
    9f50:	10c00017 	ldw	r3,0(r2)
    9f54:	e0bffc17 	ldw	r2,-16(fp)
    9f58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9f5c:	e0bffb17 	ldw	r2,-20(fp)
    9f60:	10c00017 	ldw	r3,0(r2)
    9f64:	e0bffc17 	ldw	r2,-16(fp)
    9f68:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    9f6c:	e0fffb17 	ldw	r3,-20(fp)
    9f70:	e0bffc17 	ldw	r2,-16(fp)
    9f74:	18800015 	stw	r2,0(r3)

  return 0;  
    9f78:	e03fff15 	stw	zero,-4(fp)
    9f7c:	e0bfff17 	ldw	r2,-4(fp)
}
    9f80:	e037883a 	mov	sp,fp
    9f84:	dfc00117 	ldw	ra,4(sp)
    9f88:	df000017 	ldw	fp,0(sp)
    9f8c:	dec00204 	addi	sp,sp,8
    9f90:	f800283a 	ret

00009f94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f94:	defffd04 	addi	sp,sp,-12
    9f98:	dfc00215 	stw	ra,8(sp)
    9f9c:	df000115 	stw	fp,4(sp)
    9fa0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9fa4:	00800074 	movhi	r2,1
    9fa8:	10b23704 	addi	r2,r2,-14116
    9fac:	10800017 	ldw	r2,0(r2)
    9fb0:	1005003a 	cmpeq	r2,r2,zero
    9fb4:	1000061e 	bne	r2,zero,9fd0 <alt_get_errno+0x3c>
    9fb8:	00800074 	movhi	r2,1
    9fbc:	10b23704 	addi	r2,r2,-14116
    9fc0:	10800017 	ldw	r2,0(r2)
    9fc4:	103ee83a 	callr	r2
    9fc8:	e0bfff15 	stw	r2,-4(fp)
    9fcc:	00000306 	br	9fdc <alt_get_errno+0x48>
    9fd0:	00800074 	movhi	r2,1
    9fd4:	10b80104 	addi	r2,r2,-8188
    9fd8:	e0bfff15 	stw	r2,-4(fp)
    9fdc:	e0bfff17 	ldw	r2,-4(fp)
}
    9fe0:	e037883a 	mov	sp,fp
    9fe4:	dfc00117 	ldw	ra,4(sp)
    9fe8:	df000017 	ldw	fp,0(sp)
    9fec:	dec00204 	addi	sp,sp,8
    9ff0:	f800283a 	ret

00009ff4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9ff4:	defffd04 	addi	sp,sp,-12
    9ff8:	dfc00215 	stw	ra,8(sp)
    9ffc:	df000115 	stw	fp,4(sp)
    a000:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    a004:	00bfff04 	movi	r2,-4
    a008:	00c00074 	movhi	r3,1
    a00c:	18ec6e04 	addi	r3,r3,-20040
    a010:	1885883a 	add	r2,r3,r2
    a014:	e0bfff15 	stw	r2,-4(fp)
    a018:	00000606 	br	a034 <_do_ctors+0x40>
        (*ctor) (); 
    a01c:	e0bfff17 	ldw	r2,-4(fp)
    a020:	10800017 	ldw	r2,0(r2)
    a024:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    a028:	e0bfff17 	ldw	r2,-4(fp)
    a02c:	10bfff04 	addi	r2,r2,-4
    a030:	e0bfff15 	stw	r2,-4(fp)
    a034:	e0ffff17 	ldw	r3,-4(fp)
    a038:	00800074 	movhi	r2,1
    a03c:	10ac6d04 	addi	r2,r2,-20044
    a040:	18bff62e 	bgeu	r3,r2,a01c <_do_ctors+0x28>
        (*ctor) (); 
}
    a044:	e037883a 	mov	sp,fp
    a048:	dfc00117 	ldw	ra,4(sp)
    a04c:	df000017 	ldw	fp,0(sp)
    a050:	dec00204 	addi	sp,sp,8
    a054:	f800283a 	ret

0000a058 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    a058:	defffd04 	addi	sp,sp,-12
    a05c:	dfc00215 	stw	ra,8(sp)
    a060:	df000115 	stw	fp,4(sp)
    a064:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a068:	00bfff04 	movi	r2,-4
    a06c:	00c00074 	movhi	r3,1
    a070:	18ec6e04 	addi	r3,r3,-20040
    a074:	1885883a 	add	r2,r3,r2
    a078:	e0bfff15 	stw	r2,-4(fp)
    a07c:	00000606 	br	a098 <_do_dtors+0x40>
        (*dtor) (); 
    a080:	e0bfff17 	ldw	r2,-4(fp)
    a084:	10800017 	ldw	r2,0(r2)
    a088:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a08c:	e0bfff17 	ldw	r2,-4(fp)
    a090:	10bfff04 	addi	r2,r2,-4
    a094:	e0bfff15 	stw	r2,-4(fp)
    a098:	e0ffff17 	ldw	r3,-4(fp)
    a09c:	00800074 	movhi	r2,1
    a0a0:	10ac6e04 	addi	r2,r2,-20040
    a0a4:	18bff62e 	bgeu	r3,r2,a080 <_do_dtors+0x28>
        (*dtor) (); 
}
    a0a8:	e037883a 	mov	sp,fp
    a0ac:	dfc00117 	ldw	ra,4(sp)
    a0b0:	df000017 	ldw	fp,0(sp)
    a0b4:	dec00204 	addi	sp,sp,8
    a0b8:	f800283a 	ret

0000a0bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a0bc:	deffff04 	addi	sp,sp,-4
    a0c0:	df000015 	stw	fp,0(sp)
    a0c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    a0c8:	e037883a 	mov	sp,fp
    a0cc:	df000017 	ldw	fp,0(sp)
    a0d0:	dec00104 	addi	sp,sp,4
    a0d4:	f800283a 	ret

0000a0d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a0d8:	defff904 	addi	sp,sp,-28
    a0dc:	dfc00615 	stw	ra,24(sp)
    a0e0:	df000515 	stw	fp,20(sp)
    a0e4:	df000504 	addi	fp,sp,20
    a0e8:	e13ffc15 	stw	r4,-16(fp)
    a0ec:	e17ffd15 	stw	r5,-12(fp)
    a0f0:	e1bffe15 	stw	r6,-8(fp)
    a0f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    a0f8:	e0800217 	ldw	r2,8(fp)
    a0fc:	d8800015 	stw	r2,0(sp)
    a100:	e13ffc17 	ldw	r4,-16(fp)
    a104:	e17ffd17 	ldw	r5,-12(fp)
    a108:	e1bffe17 	ldw	r6,-8(fp)
    a10c:	e1ffff17 	ldw	r7,-4(fp)
    a110:	000a2ac0 	call	a2ac <alt_iic_isr_register>
}  
    a114:	e037883a 	mov	sp,fp
    a118:	dfc00117 	ldw	ra,4(sp)
    a11c:	df000017 	ldw	fp,0(sp)
    a120:	dec00204 	addi	sp,sp,8
    a124:	f800283a 	ret

0000a128 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    a128:	defff904 	addi	sp,sp,-28
    a12c:	df000615 	stw	fp,24(sp)
    a130:	df000604 	addi	fp,sp,24
    a134:	e13ffe15 	stw	r4,-8(fp)
    a138:	e17fff15 	stw	r5,-4(fp)
    a13c:	e0bfff17 	ldw	r2,-4(fp)
    a140:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a144:	0005303a 	rdctl	r2,status
    a148:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a14c:	e0fffb17 	ldw	r3,-20(fp)
    a150:	00bfff84 	movi	r2,-2
    a154:	1884703a 	and	r2,r3,r2
    a158:	1001703a 	wrctl	status,r2
  
  return context;
    a15c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a160:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    a164:	e0fffc17 	ldw	r3,-16(fp)
    a168:	00800044 	movi	r2,1
    a16c:	10c4983a 	sll	r2,r2,r3
    a170:	1007883a 	mov	r3,r2
    a174:	00800074 	movhi	r2,1
    a178:	10b7fe04 	addi	r2,r2,-8200
    a17c:	10800017 	ldw	r2,0(r2)
    a180:	1886b03a 	or	r3,r3,r2
    a184:	00800074 	movhi	r2,1
    a188:	10b7fe04 	addi	r2,r2,-8200
    a18c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a190:	00800074 	movhi	r2,1
    a194:	10b7fe04 	addi	r2,r2,-8200
    a198:	10800017 	ldw	r2,0(r2)
    a19c:	100170fa 	wrctl	ienable,r2
    a1a0:	e0bffd17 	ldw	r2,-12(fp)
    a1a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a1a8:	e0bffa17 	ldw	r2,-24(fp)
    a1ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a1b0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    a1b4:	e037883a 	mov	sp,fp
    a1b8:	df000017 	ldw	fp,0(sp)
    a1bc:	dec00104 	addi	sp,sp,4
    a1c0:	f800283a 	ret

0000a1c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    a1c4:	defff904 	addi	sp,sp,-28
    a1c8:	df000615 	stw	fp,24(sp)
    a1cc:	df000604 	addi	fp,sp,24
    a1d0:	e13ffe15 	stw	r4,-8(fp)
    a1d4:	e17fff15 	stw	r5,-4(fp)
    a1d8:	e0bfff17 	ldw	r2,-4(fp)
    a1dc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a1e0:	0005303a 	rdctl	r2,status
    a1e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a1e8:	e0fffb17 	ldw	r3,-20(fp)
    a1ec:	00bfff84 	movi	r2,-2
    a1f0:	1884703a 	and	r2,r3,r2
    a1f4:	1001703a 	wrctl	status,r2
  
  return context;
    a1f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a1fc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    a200:	e0fffc17 	ldw	r3,-16(fp)
    a204:	00800044 	movi	r2,1
    a208:	10c4983a 	sll	r2,r2,r3
    a20c:	0084303a 	nor	r2,zero,r2
    a210:	1007883a 	mov	r3,r2
    a214:	00800074 	movhi	r2,1
    a218:	10b7fe04 	addi	r2,r2,-8200
    a21c:	10800017 	ldw	r2,0(r2)
    a220:	1886703a 	and	r3,r3,r2
    a224:	00800074 	movhi	r2,1
    a228:	10b7fe04 	addi	r2,r2,-8200
    a22c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a230:	00800074 	movhi	r2,1
    a234:	10b7fe04 	addi	r2,r2,-8200
    a238:	10800017 	ldw	r2,0(r2)
    a23c:	100170fa 	wrctl	ienable,r2
    a240:	e0bffd17 	ldw	r2,-12(fp)
    a244:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a248:	e0bffa17 	ldw	r2,-24(fp)
    a24c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a250:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    a254:	e037883a 	mov	sp,fp
    a258:	df000017 	ldw	fp,0(sp)
    a25c:	dec00104 	addi	sp,sp,4
    a260:	f800283a 	ret

0000a264 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a264:	defffc04 	addi	sp,sp,-16
    a268:	df000315 	stw	fp,12(sp)
    a26c:	df000304 	addi	fp,sp,12
    a270:	e13ffe15 	stw	r4,-8(fp)
    a274:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a278:	000530fa 	rdctl	r2,ienable
    a27c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a280:	e0ffff17 	ldw	r3,-4(fp)
    a284:	00800044 	movi	r2,1
    a288:	10c4983a 	sll	r2,r2,r3
    a28c:	1007883a 	mov	r3,r2
    a290:	e0bffd17 	ldw	r2,-12(fp)
    a294:	1884703a 	and	r2,r3,r2
    a298:	1004c03a 	cmpne	r2,r2,zero
}
    a29c:	e037883a 	mov	sp,fp
    a2a0:	df000017 	ldw	fp,0(sp)
    a2a4:	dec00104 	addi	sp,sp,4
    a2a8:	f800283a 	ret

0000a2ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a2ac:	defff404 	addi	sp,sp,-48
    a2b0:	dfc00b15 	stw	ra,44(sp)
    a2b4:	df000a15 	stw	fp,40(sp)
    a2b8:	df000a04 	addi	fp,sp,40
    a2bc:	e13ffb15 	stw	r4,-20(fp)
    a2c0:	e17ffc15 	stw	r5,-16(fp)
    a2c4:	e1bffd15 	stw	r6,-12(fp)
    a2c8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    a2cc:	00bffa84 	movi	r2,-22
    a2d0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a2d4:	e0bffc17 	ldw	r2,-16(fp)
    a2d8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a2dc:	e0bff917 	ldw	r2,-28(fp)
    a2e0:	10800808 	cmpgei	r2,r2,32
    a2e4:	1000291e 	bne	r2,zero,a38c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a2e8:	0005303a 	rdctl	r2,status
    a2ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a2f0:	e0fff717 	ldw	r3,-36(fp)
    a2f4:	00bfff84 	movi	r2,-2
    a2f8:	1884703a 	and	r2,r3,r2
    a2fc:	1001703a 	wrctl	status,r2
  
  return context;
    a300:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a304:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    a308:	e0bff917 	ldw	r2,-28(fp)
    a30c:	00c00074 	movhi	r3,1
    a310:	18f80204 	addi	r3,r3,-8184
    a314:	100490fa 	slli	r2,r2,3
    a318:	10c7883a 	add	r3,r2,r3
    a31c:	e0bffd17 	ldw	r2,-12(fp)
    a320:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    a324:	e0bff917 	ldw	r2,-28(fp)
    a328:	00c00074 	movhi	r3,1
    a32c:	18f80204 	addi	r3,r3,-8184
    a330:	100490fa 	slli	r2,r2,3
    a334:	10c5883a 	add	r2,r2,r3
    a338:	10c00104 	addi	r3,r2,4
    a33c:	e0bffe17 	ldw	r2,-8(fp)
    a340:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a344:	e0bffd17 	ldw	r2,-12(fp)
    a348:	1005003a 	cmpeq	r2,r2,zero
    a34c:	1000051e 	bne	r2,zero,a364 <alt_iic_isr_register+0xb8>
    a350:	e17ff917 	ldw	r5,-28(fp)
    a354:	e13ffb17 	ldw	r4,-20(fp)
    a358:	000a1280 	call	a128 <alt_ic_irq_enable>
    a35c:	e0bfff15 	stw	r2,-4(fp)
    a360:	00000406 	br	a374 <alt_iic_isr_register+0xc8>
    a364:	e17ff917 	ldw	r5,-28(fp)
    a368:	e13ffb17 	ldw	r4,-20(fp)
    a36c:	000a1c40 	call	a1c4 <alt_ic_irq_disable>
    a370:	e0bfff15 	stw	r2,-4(fp)
    a374:	e0bfff17 	ldw	r2,-4(fp)
    a378:	e0bffa15 	stw	r2,-24(fp)
    a37c:	e0bff817 	ldw	r2,-32(fp)
    a380:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a384:	e0bff617 	ldw	r2,-40(fp)
    a388:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a38c:	e0bffa17 	ldw	r2,-24(fp)
}
    a390:	e037883a 	mov	sp,fp
    a394:	dfc00117 	ldw	ra,4(sp)
    a398:	df000017 	ldw	fp,0(sp)
    a39c:	dec00204 	addi	sp,sp,8
    a3a0:	f800283a 	ret

0000a3a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a3a4:	defff804 	addi	sp,sp,-32
    a3a8:	dfc00715 	stw	ra,28(sp)
    a3ac:	df000615 	stw	fp,24(sp)
    a3b0:	dc000515 	stw	r16,20(sp)
    a3b4:	df000504 	addi	fp,sp,20
    a3b8:	e13ffc15 	stw	r4,-16(fp)
    a3bc:	e17ffd15 	stw	r5,-12(fp)
    a3c0:	e1bffe15 	stw	r6,-8(fp)
    a3c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    a3c8:	e13ffd17 	ldw	r4,-12(fp)
    a3cc:	e17ffe17 	ldw	r5,-8(fp)
    a3d0:	e1bfff17 	ldw	r6,-4(fp)
    a3d4:	000a5ec0 	call	a5ec <open>
    a3d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    a3dc:	e0bffb17 	ldw	r2,-20(fp)
    a3e0:	1004803a 	cmplt	r2,r2,zero
    a3e4:	10001f1e 	bne	r2,zero,a464 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    a3e8:	e13ffb17 	ldw	r4,-20(fp)
    a3ec:	04000074 	movhi	r16,1
    a3f0:	8430d204 	addi	r16,r16,-15544
    a3f4:	01400304 	movi	r5,12
    a3f8:	00085280 	call	8528 <__mulsi3>
    a3fc:	1405883a 	add	r2,r2,r16
    a400:	10c00017 	ldw	r3,0(r2)
    a404:	e0bffc17 	ldw	r2,-16(fp)
    a408:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a40c:	e13ffb17 	ldw	r4,-20(fp)
    a410:	04000074 	movhi	r16,1
    a414:	8430d204 	addi	r16,r16,-15544
    a418:	01400304 	movi	r5,12
    a41c:	00085280 	call	8528 <__mulsi3>
    a420:	1405883a 	add	r2,r2,r16
    a424:	10800104 	addi	r2,r2,4
    a428:	10c00017 	ldw	r3,0(r2)
    a42c:	e0bffc17 	ldw	r2,-16(fp)
    a430:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a434:	e13ffb17 	ldw	r4,-20(fp)
    a438:	04000074 	movhi	r16,1
    a43c:	8430d204 	addi	r16,r16,-15544
    a440:	01400304 	movi	r5,12
    a444:	00085280 	call	8528 <__mulsi3>
    a448:	1405883a 	add	r2,r2,r16
    a44c:	10800204 	addi	r2,r2,8
    a450:	10c00017 	ldw	r3,0(r2)
    a454:	e0bffc17 	ldw	r2,-16(fp)
    a458:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a45c:	e13ffb17 	ldw	r4,-20(fp)
    a460:	000a7d80 	call	a7d8 <alt_release_fd>
  }
} 
    a464:	e037883a 	mov	sp,fp
    a468:	dfc00217 	ldw	ra,8(sp)
    a46c:	df000117 	ldw	fp,4(sp)
    a470:	dc000017 	ldw	r16,0(sp)
    a474:	dec00304 	addi	sp,sp,12
    a478:	f800283a 	ret

0000a47c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a47c:	defffb04 	addi	sp,sp,-20
    a480:	dfc00415 	stw	ra,16(sp)
    a484:	df000315 	stw	fp,12(sp)
    a488:	df000304 	addi	fp,sp,12
    a48c:	e13ffd15 	stw	r4,-12(fp)
    a490:	e17ffe15 	stw	r5,-8(fp)
    a494:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a498:	01000074 	movhi	r4,1
    a49c:	2130d504 	addi	r4,r4,-15532
    a4a0:	e17ffd17 	ldw	r5,-12(fp)
    a4a4:	01800044 	movi	r6,1
    a4a8:	01c07fc4 	movi	r7,511
    a4ac:	000a3a40 	call	a3a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a4b0:	01000074 	movhi	r4,1
    a4b4:	2130d204 	addi	r4,r4,-15544
    a4b8:	e17ffe17 	ldw	r5,-8(fp)
    a4bc:	000d883a 	mov	r6,zero
    a4c0:	01c07fc4 	movi	r7,511
    a4c4:	000a3a40 	call	a3a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a4c8:	01000074 	movhi	r4,1
    a4cc:	2130d804 	addi	r4,r4,-15520
    a4d0:	e17fff17 	ldw	r5,-4(fp)
    a4d4:	01800044 	movi	r6,1
    a4d8:	01c07fc4 	movi	r7,511
    a4dc:	000a3a40 	call	a3a4 <alt_open_fd>
}  
    a4e0:	e037883a 	mov	sp,fp
    a4e4:	dfc00117 	ldw	ra,4(sp)
    a4e8:	df000017 	ldw	fp,0(sp)
    a4ec:	dec00204 	addi	sp,sp,8
    a4f0:	f800283a 	ret

0000a4f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a4f4:	defffa04 	addi	sp,sp,-24
    a4f8:	dfc00515 	stw	ra,20(sp)
    a4fc:	df000415 	stw	fp,16(sp)
    a500:	dc000315 	stw	r16,12(sp)
    a504:	df000304 	addi	fp,sp,12
    a508:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a50c:	e0bffe17 	ldw	r2,-8(fp)
    a510:	10800217 	ldw	r2,8(r2)
    a514:	10d00034 	orhi	r3,r2,16384
    a518:	e0bffe17 	ldw	r2,-8(fp)
    a51c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a520:	e03ffd15 	stw	zero,-12(fp)
    a524:	00002306 	br	a5b4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a528:	e13ffd17 	ldw	r4,-12(fp)
    a52c:	04000074 	movhi	r16,1
    a530:	8430d204 	addi	r16,r16,-15544
    a534:	01400304 	movi	r5,12
    a538:	00085280 	call	8528 <__mulsi3>
    a53c:	1405883a 	add	r2,r2,r16
    a540:	10c00017 	ldw	r3,0(r2)
    a544:	e0bffe17 	ldw	r2,-8(fp)
    a548:	10800017 	ldw	r2,0(r2)
    a54c:	1880161e 	bne	r3,r2,a5a8 <alt_file_locked+0xb4>
    a550:	e13ffd17 	ldw	r4,-12(fp)
    a554:	04000074 	movhi	r16,1
    a558:	8430d204 	addi	r16,r16,-15544
    a55c:	01400304 	movi	r5,12
    a560:	00085280 	call	8528 <__mulsi3>
    a564:	1405883a 	add	r2,r2,r16
    a568:	10800204 	addi	r2,r2,8
    a56c:	10800017 	ldw	r2,0(r2)
    a570:	1004403a 	cmpge	r2,r2,zero
    a574:	10000c1e 	bne	r2,zero,a5a8 <alt_file_locked+0xb4>
    a578:	e13ffd17 	ldw	r4,-12(fp)
    a57c:	01400304 	movi	r5,12
    a580:	00085280 	call	8528 <__mulsi3>
    a584:	1007883a 	mov	r3,r2
    a588:	00800074 	movhi	r2,1
    a58c:	10b0d204 	addi	r2,r2,-15544
    a590:	1887883a 	add	r3,r3,r2
    a594:	e0bffe17 	ldw	r2,-8(fp)
    a598:	18800326 	beq	r3,r2,a5a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a59c:	00bffcc4 	movi	r2,-13
    a5a0:	e0bfff15 	stw	r2,-4(fp)
    a5a4:	00000a06 	br	a5d0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a5a8:	e0bffd17 	ldw	r2,-12(fp)
    a5ac:	10800044 	addi	r2,r2,1
    a5b0:	e0bffd15 	stw	r2,-12(fp)
    a5b4:	00800074 	movhi	r2,1
    a5b8:	10b23604 	addi	r2,r2,-14120
    a5bc:	10800017 	ldw	r2,0(r2)
    a5c0:	1007883a 	mov	r3,r2
    a5c4:	e0bffd17 	ldw	r2,-12(fp)
    a5c8:	18bfd72e 	bgeu	r3,r2,a528 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a5cc:	e03fff15 	stw	zero,-4(fp)
    a5d0:	e0bfff17 	ldw	r2,-4(fp)
}
    a5d4:	e037883a 	mov	sp,fp
    a5d8:	dfc00217 	ldw	ra,8(sp)
    a5dc:	df000117 	ldw	fp,4(sp)
    a5e0:	dc000017 	ldw	r16,0(sp)
    a5e4:	dec00304 	addi	sp,sp,12
    a5e8:	f800283a 	ret

0000a5ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a5ec:	defff404 	addi	sp,sp,-48
    a5f0:	dfc00b15 	stw	ra,44(sp)
    a5f4:	df000a15 	stw	fp,40(sp)
    a5f8:	df000a04 	addi	fp,sp,40
    a5fc:	e13ffb15 	stw	r4,-20(fp)
    a600:	e17ffc15 	stw	r5,-16(fp)
    a604:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a608:	00bfffc4 	movi	r2,-1
    a60c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    a610:	00bffb44 	movi	r2,-19
    a614:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    a618:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a61c:	e13ffb17 	ldw	r4,-20(fp)
    a620:	01400074 	movhi	r5,1
    a624:	29723404 	addi	r5,r5,-14128
    a628:	000aa140 	call	aa14 <alt_find_dev>
    a62c:	e0bffa15 	stw	r2,-24(fp)
    a630:	e0bffa17 	ldw	r2,-24(fp)
    a634:	1004c03a 	cmpne	r2,r2,zero
    a638:	1000051e 	bne	r2,zero,a650 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a63c:	e13ffb17 	ldw	r4,-20(fp)
    a640:	000aaa80 	call	aaa8 <alt_find_file>
    a644:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    a648:	00800044 	movi	r2,1
    a64c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a650:	e0bffa17 	ldw	r2,-24(fp)
    a654:	1005003a 	cmpeq	r2,r2,zero
    a658:	1000311e 	bne	r2,zero,a720 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a65c:	e13ffa17 	ldw	r4,-24(fp)
    a660:	000abc80 	call	abc8 <alt_get_fd>
    a664:	e0bff815 	stw	r2,-32(fp)
    a668:	e0bff817 	ldw	r2,-32(fp)
    a66c:	1004403a 	cmpge	r2,r2,zero
    a670:	1000031e 	bne	r2,zero,a680 <open+0x94>
    {
      status = index;
    a674:	e0bff817 	ldw	r2,-32(fp)
    a678:	e0bff715 	stw	r2,-36(fp)
    a67c:	00002a06 	br	a728 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    a680:	e13ff817 	ldw	r4,-32(fp)
    a684:	01400304 	movi	r5,12
    a688:	00085280 	call	8528 <__mulsi3>
    a68c:	1007883a 	mov	r3,r2
    a690:	00800074 	movhi	r2,1
    a694:	10b0d204 	addi	r2,r2,-15544
    a698:	1885883a 	add	r2,r3,r2
    a69c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a6a0:	e0fffc17 	ldw	r3,-16(fp)
    a6a4:	00900034 	movhi	r2,16384
    a6a8:	10bfffc4 	addi	r2,r2,-1
    a6ac:	1886703a 	and	r3,r3,r2
    a6b0:	e0bff917 	ldw	r2,-28(fp)
    a6b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a6b8:	e0bff617 	ldw	r2,-40(fp)
    a6bc:	1004c03a 	cmpne	r2,r2,zero
    a6c0:	1000061e 	bne	r2,zero,a6dc <open+0xf0>
    a6c4:	e13ff917 	ldw	r4,-28(fp)
    a6c8:	000a4f40 	call	a4f4 <alt_file_locked>
    a6cc:	e0bff715 	stw	r2,-36(fp)
    a6d0:	e0bff717 	ldw	r2,-36(fp)
    a6d4:	1004803a 	cmplt	r2,r2,zero
    a6d8:	1000131e 	bne	r2,zero,a728 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a6dc:	e0bffa17 	ldw	r2,-24(fp)
    a6e0:	10800317 	ldw	r2,12(r2)
    a6e4:	1005003a 	cmpeq	r2,r2,zero
    a6e8:	1000091e 	bne	r2,zero,a710 <open+0x124>
    a6ec:	e0bffa17 	ldw	r2,-24(fp)
    a6f0:	10800317 	ldw	r2,12(r2)
    a6f4:	e13ff917 	ldw	r4,-28(fp)
    a6f8:	e17ffb17 	ldw	r5,-20(fp)
    a6fc:	e1bffc17 	ldw	r6,-16(fp)
    a700:	e1fffd17 	ldw	r7,-12(fp)
    a704:	103ee83a 	callr	r2
    a708:	e0bfff15 	stw	r2,-4(fp)
    a70c:	00000106 	br	a714 <open+0x128>
    a710:	e03fff15 	stw	zero,-4(fp)
    a714:	e0bfff17 	ldw	r2,-4(fp)
    a718:	e0bff715 	stw	r2,-36(fp)
    a71c:	00000206 	br	a728 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a720:	00bffb44 	movi	r2,-19
    a724:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a728:	e0bff717 	ldw	r2,-36(fp)
    a72c:	1004403a 	cmpge	r2,r2,zero
    a730:	1000091e 	bne	r2,zero,a758 <open+0x16c>
  {
    alt_release_fd (index);  
    a734:	e13ff817 	ldw	r4,-32(fp)
    a738:	000a7d80 	call	a7d8 <alt_release_fd>
    ALT_ERRNO = -status;
    a73c:	000a7780 	call	a778 <alt_get_errno>
    a740:	e0fff717 	ldw	r3,-36(fp)
    a744:	00c7c83a 	sub	r3,zero,r3
    a748:	10c00015 	stw	r3,0(r2)
    return -1;
    a74c:	00bfffc4 	movi	r2,-1
    a750:	e0bffe15 	stw	r2,-8(fp)
    a754:	00000206 	br	a760 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    a758:	e0bff817 	ldw	r2,-32(fp)
    a75c:	e0bffe15 	stw	r2,-8(fp)
    a760:	e0bffe17 	ldw	r2,-8(fp)
}
    a764:	e037883a 	mov	sp,fp
    a768:	dfc00117 	ldw	ra,4(sp)
    a76c:	df000017 	ldw	fp,0(sp)
    a770:	dec00204 	addi	sp,sp,8
    a774:	f800283a 	ret

0000a778 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a778:	defffd04 	addi	sp,sp,-12
    a77c:	dfc00215 	stw	ra,8(sp)
    a780:	df000115 	stw	fp,4(sp)
    a784:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a788:	00800074 	movhi	r2,1
    a78c:	10b23704 	addi	r2,r2,-14116
    a790:	10800017 	ldw	r2,0(r2)
    a794:	1005003a 	cmpeq	r2,r2,zero
    a798:	1000061e 	bne	r2,zero,a7b4 <alt_get_errno+0x3c>
    a79c:	00800074 	movhi	r2,1
    a7a0:	10b23704 	addi	r2,r2,-14116
    a7a4:	10800017 	ldw	r2,0(r2)
    a7a8:	103ee83a 	callr	r2
    a7ac:	e0bfff15 	stw	r2,-4(fp)
    a7b0:	00000306 	br	a7c0 <alt_get_errno+0x48>
    a7b4:	00800074 	movhi	r2,1
    a7b8:	10b80104 	addi	r2,r2,-8188
    a7bc:	e0bfff15 	stw	r2,-4(fp)
    a7c0:	e0bfff17 	ldw	r2,-4(fp)
}
    a7c4:	e037883a 	mov	sp,fp
    a7c8:	dfc00117 	ldw	ra,4(sp)
    a7cc:	df000017 	ldw	fp,0(sp)
    a7d0:	dec00204 	addi	sp,sp,8
    a7d4:	f800283a 	ret

0000a7d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a7d8:	defffc04 	addi	sp,sp,-16
    a7dc:	dfc00315 	stw	ra,12(sp)
    a7e0:	df000215 	stw	fp,8(sp)
    a7e4:	dc000115 	stw	r16,4(sp)
    a7e8:	df000104 	addi	fp,sp,4
    a7ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a7f0:	e0bfff17 	ldw	r2,-4(fp)
    a7f4:	108000d0 	cmplti	r2,r2,3
    a7f8:	10000f1e 	bne	r2,zero,a838 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    a7fc:	e13fff17 	ldw	r4,-4(fp)
    a800:	04000074 	movhi	r16,1
    a804:	8430d204 	addi	r16,r16,-15544
    a808:	01400304 	movi	r5,12
    a80c:	00085280 	call	8528 <__mulsi3>
    a810:	1405883a 	add	r2,r2,r16
    a814:	10800204 	addi	r2,r2,8
    a818:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a81c:	e13fff17 	ldw	r4,-4(fp)
    a820:	04000074 	movhi	r16,1
    a824:	8430d204 	addi	r16,r16,-15544
    a828:	01400304 	movi	r5,12
    a82c:	00085280 	call	8528 <__mulsi3>
    a830:	1405883a 	add	r2,r2,r16
    a834:	10000015 	stw	zero,0(r2)
  }
}
    a838:	e037883a 	mov	sp,fp
    a83c:	dfc00217 	ldw	ra,8(sp)
    a840:	df000117 	ldw	fp,4(sp)
    a844:	dc000017 	ldw	r16,0(sp)
    a848:	dec00304 	addi	sp,sp,12
    a84c:	f800283a 	ret

0000a850 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a850:	defffa04 	addi	sp,sp,-24
    a854:	df000515 	stw	fp,20(sp)
    a858:	df000504 	addi	fp,sp,20
    a85c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a860:	0005303a 	rdctl	r2,status
    a864:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a868:	e0fffd17 	ldw	r3,-12(fp)
    a86c:	00bfff84 	movi	r2,-2
    a870:	1884703a 	and	r2,r3,r2
    a874:	1001703a 	wrctl	status,r2
  
  return context;
    a878:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a87c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    a880:	e0bfff17 	ldw	r2,-4(fp)
    a884:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a888:	e0bffc17 	ldw	r2,-16(fp)
    a88c:	10c00017 	ldw	r3,0(r2)
    a890:	e0bffc17 	ldw	r2,-16(fp)
    a894:	10800117 	ldw	r2,4(r2)
    a898:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    a89c:	e0bffc17 	ldw	r2,-16(fp)
    a8a0:	10c00117 	ldw	r3,4(r2)
    a8a4:	e0bffc17 	ldw	r2,-16(fp)
    a8a8:	10800017 	ldw	r2,0(r2)
    a8ac:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a8b0:	e0fffc17 	ldw	r3,-16(fp)
    a8b4:	e0bffc17 	ldw	r2,-16(fp)
    a8b8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    a8bc:	e0fffc17 	ldw	r3,-16(fp)
    a8c0:	e0bffc17 	ldw	r2,-16(fp)
    a8c4:	18800015 	stw	r2,0(r3)
    a8c8:	e0bffe17 	ldw	r2,-8(fp)
    a8cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a8d0:	e0bffb17 	ldw	r2,-20(fp)
    a8d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a8d8:	e037883a 	mov	sp,fp
    a8dc:	df000017 	ldw	fp,0(sp)
    a8e0:	dec00104 	addi	sp,sp,4
    a8e4:	f800283a 	ret

0000a8e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a8e8:	defffb04 	addi	sp,sp,-20
    a8ec:	dfc00415 	stw	ra,16(sp)
    a8f0:	df000315 	stw	fp,12(sp)
    a8f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a8f8:	d0a00717 	ldw	r2,-32740(gp)
    a8fc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a900:	d0a5ce17 	ldw	r2,-26824(gp)
    a904:	10800044 	addi	r2,r2,1
    a908:	d0a5ce15 	stw	r2,-26824(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a90c:	00003106 	br	a9d4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    a910:	e0bffe17 	ldw	r2,-8(fp)
    a914:	10800017 	ldw	r2,0(r2)
    a918:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a91c:	e0bffe17 	ldw	r2,-8(fp)
    a920:	10800403 	ldbu	r2,16(r2)
    a924:	10803fcc 	andi	r2,r2,255
    a928:	1005003a 	cmpeq	r2,r2,zero
    a92c:	1000051e 	bne	r2,zero,a944 <alt_tick+0x5c>
    a930:	d0a5ce17 	ldw	r2,-26824(gp)
    a934:	1004c03a 	cmpne	r2,r2,zero
    a938:	1000021e 	bne	r2,zero,a944 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    a93c:	e0bffe17 	ldw	r2,-8(fp)
    a940:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a944:	e0bffe17 	ldw	r2,-8(fp)
    a948:	10c00217 	ldw	r3,8(r2)
    a94c:	d0a5ce17 	ldw	r2,-26824(gp)
    a950:	10c01e36 	bltu	r2,r3,a9cc <alt_tick+0xe4>
    a954:	e0bffe17 	ldw	r2,-8(fp)
    a958:	10800403 	ldbu	r2,16(r2)
    a95c:	10803fcc 	andi	r2,r2,255
    a960:	1004c03a 	cmpne	r2,r2,zero
    a964:	1000191e 	bne	r2,zero,a9cc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    a968:	e0bffe17 	ldw	r2,-8(fp)
    a96c:	10c00317 	ldw	r3,12(r2)
    a970:	e0bffe17 	ldw	r2,-8(fp)
    a974:	11000517 	ldw	r4,20(r2)
    a978:	183ee83a 	callr	r3
    a97c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a980:	e0bffd17 	ldw	r2,-12(fp)
    a984:	1004c03a 	cmpne	r2,r2,zero
    a988:	1000031e 	bne	r2,zero,a998 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    a98c:	e13ffe17 	ldw	r4,-8(fp)
    a990:	000a8500 	call	a850 <alt_alarm_stop>
    a994:	00000d06 	br	a9cc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    a998:	e0bffe17 	ldw	r2,-8(fp)
    a99c:	10c00217 	ldw	r3,8(r2)
    a9a0:	e0bffd17 	ldw	r2,-12(fp)
    a9a4:	1887883a 	add	r3,r3,r2
    a9a8:	e0bffe17 	ldw	r2,-8(fp)
    a9ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a9b0:	e0bffe17 	ldw	r2,-8(fp)
    a9b4:	10c00217 	ldw	r3,8(r2)
    a9b8:	d0a5ce17 	ldw	r2,-26824(gp)
    a9bc:	1880032e 	bgeu	r3,r2,a9cc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    a9c0:	e0fffe17 	ldw	r3,-8(fp)
    a9c4:	00800044 	movi	r2,1
    a9c8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    a9cc:	e0bfff17 	ldw	r2,-4(fp)
    a9d0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a9d4:	d0e00704 	addi	r3,gp,-32740
    a9d8:	e0bffe17 	ldw	r2,-8(fp)
    a9dc:	10ffcc1e 	bne	r2,r3,a910 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    a9e0:	e037883a 	mov	sp,fp
    a9e4:	dfc00117 	ldw	ra,4(sp)
    a9e8:	df000017 	ldw	fp,0(sp)
    a9ec:	dec00204 	addi	sp,sp,8
    a9f0:	f800283a 	ret

0000a9f4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    a9f4:	deffff04 	addi	sp,sp,-4
    a9f8:	df000015 	stw	fp,0(sp)
    a9fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    aa00:	000170fa 	wrctl	ienable,zero
}
    aa04:	e037883a 	mov	sp,fp
    aa08:	df000017 	ldw	fp,0(sp)
    aa0c:	dec00104 	addi	sp,sp,4
    aa10:	f800283a 	ret

0000aa14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    aa14:	defff904 	addi	sp,sp,-28
    aa18:	dfc00615 	stw	ra,24(sp)
    aa1c:	df000515 	stw	fp,20(sp)
    aa20:	df000504 	addi	fp,sp,20
    aa24:	e13ffd15 	stw	r4,-12(fp)
    aa28:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    aa2c:	e0bffe17 	ldw	r2,-8(fp)
    aa30:	10800017 	ldw	r2,0(r2)
    aa34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    aa38:	e13ffd17 	ldw	r4,-12(fp)
    aa3c:	000adf80 	call	adf8 <strlen>
    aa40:	10800044 	addi	r2,r2,1
    aa44:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    aa48:	00000d06 	br	aa80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    aa4c:	e0bffc17 	ldw	r2,-16(fp)
    aa50:	11000217 	ldw	r4,8(r2)
    aa54:	e1bffb17 	ldw	r6,-20(fp)
    aa58:	e17ffd17 	ldw	r5,-12(fp)
    aa5c:	000ace40 	call	ace4 <memcmp>
    aa60:	1004c03a 	cmpne	r2,r2,zero
    aa64:	1000031e 	bne	r2,zero,aa74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    aa68:	e0bffc17 	ldw	r2,-16(fp)
    aa6c:	e0bfff15 	stw	r2,-4(fp)
    aa70:	00000706 	br	aa90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    aa74:	e0bffc17 	ldw	r2,-16(fp)
    aa78:	10800017 	ldw	r2,0(r2)
    aa7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    aa80:	e0fffe17 	ldw	r3,-8(fp)
    aa84:	e0bffc17 	ldw	r2,-16(fp)
    aa88:	10fff01e 	bne	r2,r3,aa4c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    aa8c:	e03fff15 	stw	zero,-4(fp)
    aa90:	e0bfff17 	ldw	r2,-4(fp)
}
    aa94:	e037883a 	mov	sp,fp
    aa98:	dfc00117 	ldw	ra,4(sp)
    aa9c:	df000017 	ldw	fp,0(sp)
    aaa0:	dec00204 	addi	sp,sp,8
    aaa4:	f800283a 	ret

0000aaa8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    aaa8:	defffa04 	addi	sp,sp,-24
    aaac:	dfc00515 	stw	ra,20(sp)
    aab0:	df000415 	stw	fp,16(sp)
    aab4:	df000404 	addi	fp,sp,16
    aab8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    aabc:	00800074 	movhi	r2,1
    aac0:	10b23204 	addi	r2,r2,-14136
    aac4:	10800017 	ldw	r2,0(r2)
    aac8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    aacc:	00003306 	br	ab9c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    aad0:	e0bffd17 	ldw	r2,-12(fp)
    aad4:	11000217 	ldw	r4,8(r2)
    aad8:	000adf80 	call	adf8 <strlen>
    aadc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    aae0:	e0bffd17 	ldw	r2,-12(fp)
    aae4:	10c00217 	ldw	r3,8(r2)
    aae8:	e0bffc17 	ldw	r2,-16(fp)
    aaec:	1885883a 	add	r2,r3,r2
    aaf0:	10bfffc4 	addi	r2,r2,-1
    aaf4:	10800003 	ldbu	r2,0(r2)
    aaf8:	10803fcc 	andi	r2,r2,255
    aafc:	1080201c 	xori	r2,r2,128
    ab00:	10bfe004 	addi	r2,r2,-128
    ab04:	10800bd8 	cmpnei	r2,r2,47
    ab08:	1000031e 	bne	r2,zero,ab18 <alt_find_file+0x70>
    {
      len -= 1;
    ab0c:	e0bffc17 	ldw	r2,-16(fp)
    ab10:	10bfffc4 	addi	r2,r2,-1
    ab14:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ab18:	e0bffc17 	ldw	r2,-16(fp)
    ab1c:	1007883a 	mov	r3,r2
    ab20:	e0bffe17 	ldw	r2,-8(fp)
    ab24:	1885883a 	add	r2,r3,r2
    ab28:	10800003 	ldbu	r2,0(r2)
    ab2c:	10803fcc 	andi	r2,r2,255
    ab30:	1080201c 	xori	r2,r2,128
    ab34:	10bfe004 	addi	r2,r2,-128
    ab38:	10800be0 	cmpeqi	r2,r2,47
    ab3c:	10000a1e 	bne	r2,zero,ab68 <alt_find_file+0xc0>
    ab40:	e0bffc17 	ldw	r2,-16(fp)
    ab44:	1007883a 	mov	r3,r2
    ab48:	e0bffe17 	ldw	r2,-8(fp)
    ab4c:	1885883a 	add	r2,r3,r2
    ab50:	10800003 	ldbu	r2,0(r2)
    ab54:	10803fcc 	andi	r2,r2,255
    ab58:	1080201c 	xori	r2,r2,128
    ab5c:	10bfe004 	addi	r2,r2,-128
    ab60:	1004c03a 	cmpne	r2,r2,zero
    ab64:	10000a1e 	bne	r2,zero,ab90 <alt_find_file+0xe8>
    ab68:	e0bffd17 	ldw	r2,-12(fp)
    ab6c:	11000217 	ldw	r4,8(r2)
    ab70:	e1bffc17 	ldw	r6,-16(fp)
    ab74:	e17ffe17 	ldw	r5,-8(fp)
    ab78:	000ace40 	call	ace4 <memcmp>
    ab7c:	1004c03a 	cmpne	r2,r2,zero
    ab80:	1000031e 	bne	r2,zero,ab90 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ab84:	e0bffd17 	ldw	r2,-12(fp)
    ab88:	e0bfff15 	stw	r2,-4(fp)
    ab8c:	00000806 	br	abb0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    ab90:	e0bffd17 	ldw	r2,-12(fp)
    ab94:	10800017 	ldw	r2,0(r2)
    ab98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ab9c:	00c00074 	movhi	r3,1
    aba0:	18f23204 	addi	r3,r3,-14136
    aba4:	e0bffd17 	ldw	r2,-12(fp)
    aba8:	10ffc91e 	bne	r2,r3,aad0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    abac:	e03fff15 	stw	zero,-4(fp)
    abb0:	e0bfff17 	ldw	r2,-4(fp)
}
    abb4:	e037883a 	mov	sp,fp
    abb8:	dfc00117 	ldw	ra,4(sp)
    abbc:	df000017 	ldw	fp,0(sp)
    abc0:	dec00204 	addi	sp,sp,8
    abc4:	f800283a 	ret

0000abc8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    abc8:	defffa04 	addi	sp,sp,-24
    abcc:	dfc00515 	stw	ra,20(sp)
    abd0:	df000415 	stw	fp,16(sp)
    abd4:	dc000315 	stw	r16,12(sp)
    abd8:	df000304 	addi	fp,sp,12
    abdc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    abe0:	00bffa04 	movi	r2,-24
    abe4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    abe8:	e03ffe15 	stw	zero,-8(fp)
    abec:	00002006 	br	ac70 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    abf0:	e13ffe17 	ldw	r4,-8(fp)
    abf4:	04000074 	movhi	r16,1
    abf8:	8430d204 	addi	r16,r16,-15544
    abfc:	01400304 	movi	r5,12
    ac00:	00085280 	call	8528 <__mulsi3>
    ac04:	1405883a 	add	r2,r2,r16
    ac08:	10800017 	ldw	r2,0(r2)
    ac0c:	1004c03a 	cmpne	r2,r2,zero
    ac10:	1000141e 	bne	r2,zero,ac64 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    ac14:	e13ffe17 	ldw	r4,-8(fp)
    ac18:	04000074 	movhi	r16,1
    ac1c:	8430d204 	addi	r16,r16,-15544
    ac20:	01400304 	movi	r5,12
    ac24:	00085280 	call	8528 <__mulsi3>
    ac28:	1407883a 	add	r3,r2,r16
    ac2c:	e0bfff17 	ldw	r2,-4(fp)
    ac30:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    ac34:	00800074 	movhi	r2,1
    ac38:	10b23604 	addi	r2,r2,-14120
    ac3c:	10c00017 	ldw	r3,0(r2)
    ac40:	e0bffe17 	ldw	r2,-8(fp)
    ac44:	1880040e 	bge	r3,r2,ac58 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    ac48:	00c00074 	movhi	r3,1
    ac4c:	18f23604 	addi	r3,r3,-14120
    ac50:	e0bffe17 	ldw	r2,-8(fp)
    ac54:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    ac58:	e0bffe17 	ldw	r2,-8(fp)
    ac5c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    ac60:	00000606 	br	ac7c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ac64:	e0bffe17 	ldw	r2,-8(fp)
    ac68:	10800044 	addi	r2,r2,1
    ac6c:	e0bffe15 	stw	r2,-8(fp)
    ac70:	e0bffe17 	ldw	r2,-8(fp)
    ac74:	10800810 	cmplti	r2,r2,32
    ac78:	103fdd1e 	bne	r2,zero,abf0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ac7c:	e0bffd17 	ldw	r2,-12(fp)
}
    ac80:	e037883a 	mov	sp,fp
    ac84:	dfc00217 	ldw	ra,8(sp)
    ac88:	df000117 	ldw	fp,4(sp)
    ac8c:	dc000017 	ldw	r16,0(sp)
    ac90:	dec00304 	addi	sp,sp,12
    ac94:	f800283a 	ret

0000ac98 <atexit>:
    ac98:	200b883a 	mov	r5,r4
    ac9c:	000d883a 	mov	r6,zero
    aca0:	0009883a 	mov	r4,zero
    aca4:	000f883a 	mov	r7,zero
    aca8:	000ae6c1 	jmpi	ae6c <__register_exitproc>

0000acac <exit>:
    acac:	defffe04 	addi	sp,sp,-8
    acb0:	000b883a 	mov	r5,zero
    acb4:	dc000015 	stw	r16,0(sp)
    acb8:	dfc00115 	stw	ra,4(sp)
    acbc:	2021883a 	mov	r16,r4
    acc0:	000afa40 	call	afa4 <__call_exitprocs>
    acc4:	00800074 	movhi	r2,1
    acc8:	10b23c04 	addi	r2,r2,-14096
    accc:	11000017 	ldw	r4,0(r2)
    acd0:	20800f17 	ldw	r2,60(r4)
    acd4:	10000126 	beq	r2,zero,acdc <exit+0x30>
    acd8:	103ee83a 	callr	r2
    acdc:	8009883a 	mov	r4,r16
    ace0:	000b1940 	call	b194 <_exit>

0000ace4 <memcmp>:
    ace4:	00c000c4 	movi	r3,3
    ace8:	1980032e 	bgeu	r3,r6,acf8 <memcmp+0x14>
    acec:	2144b03a 	or	r2,r4,r5
    acf0:	10c4703a 	and	r2,r2,r3
    acf4:	10000f26 	beq	r2,zero,ad34 <memcmp+0x50>
    acf8:	31ffffc4 	addi	r7,r6,-1
    acfc:	3000061e 	bne	r6,zero,ad18 <memcmp+0x34>
    ad00:	00000a06 	br	ad2c <memcmp+0x48>
    ad04:	39ffffc4 	addi	r7,r7,-1
    ad08:	00bfffc4 	movi	r2,-1
    ad0c:	21000044 	addi	r4,r4,1
    ad10:	29400044 	addi	r5,r5,1
    ad14:	38800526 	beq	r7,r2,ad2c <memcmp+0x48>
    ad18:	20c00003 	ldbu	r3,0(r4)
    ad1c:	28800003 	ldbu	r2,0(r5)
    ad20:	18bff826 	beq	r3,r2,ad04 <memcmp+0x20>
    ad24:	1885c83a 	sub	r2,r3,r2
    ad28:	f800283a 	ret
    ad2c:	0005883a 	mov	r2,zero
    ad30:	f800283a 	ret
    ad34:	180f883a 	mov	r7,r3
    ad38:	20c00017 	ldw	r3,0(r4)
    ad3c:	28800017 	ldw	r2,0(r5)
    ad40:	18bfed1e 	bne	r3,r2,acf8 <memcmp+0x14>
    ad44:	31bfff04 	addi	r6,r6,-4
    ad48:	21000104 	addi	r4,r4,4
    ad4c:	29400104 	addi	r5,r5,4
    ad50:	39bff936 	bltu	r7,r6,ad38 <memcmp+0x54>
    ad54:	003fe806 	br	acf8 <memcmp+0x14>

0000ad58 <memcpy>:
    ad58:	01c003c4 	movi	r7,15
    ad5c:	2007883a 	mov	r3,r4
    ad60:	3980032e 	bgeu	r7,r6,ad70 <memcpy+0x18>
    ad64:	2904b03a 	or	r2,r5,r4
    ad68:	108000cc 	andi	r2,r2,3
    ad6c:	10000926 	beq	r2,zero,ad94 <memcpy+0x3c>
    ad70:	30000626 	beq	r6,zero,ad8c <memcpy+0x34>
    ad74:	30cd883a 	add	r6,r6,r3
    ad78:	28800003 	ldbu	r2,0(r5)
    ad7c:	29400044 	addi	r5,r5,1
    ad80:	18800005 	stb	r2,0(r3)
    ad84:	18c00044 	addi	r3,r3,1
    ad88:	30fffb1e 	bne	r6,r3,ad78 <memcpy+0x20>
    ad8c:	2005883a 	mov	r2,r4
    ad90:	f800283a 	ret
    ad94:	3811883a 	mov	r8,r7
    ad98:	200f883a 	mov	r7,r4
    ad9c:	28c00017 	ldw	r3,0(r5)
    ada0:	31bffc04 	addi	r6,r6,-16
    ada4:	38c00015 	stw	r3,0(r7)
    ada8:	28800117 	ldw	r2,4(r5)
    adac:	38800115 	stw	r2,4(r7)
    adb0:	28c00217 	ldw	r3,8(r5)
    adb4:	38c00215 	stw	r3,8(r7)
    adb8:	28800317 	ldw	r2,12(r5)
    adbc:	29400404 	addi	r5,r5,16
    adc0:	38800315 	stw	r2,12(r7)
    adc4:	39c00404 	addi	r7,r7,16
    adc8:	41bff436 	bltu	r8,r6,ad9c <memcpy+0x44>
    adcc:	008000c4 	movi	r2,3
    add0:	1180072e 	bgeu	r2,r6,adf0 <memcpy+0x98>
    add4:	1007883a 	mov	r3,r2
    add8:	28800017 	ldw	r2,0(r5)
    addc:	31bfff04 	addi	r6,r6,-4
    ade0:	29400104 	addi	r5,r5,4
    ade4:	38800015 	stw	r2,0(r7)
    ade8:	39c00104 	addi	r7,r7,4
    adec:	19bffa36 	bltu	r3,r6,add8 <memcpy+0x80>
    adf0:	3807883a 	mov	r3,r7
    adf4:	003fde06 	br	ad70 <memcpy+0x18>

0000adf8 <strlen>:
    adf8:	208000cc 	andi	r2,r4,3
    adfc:	2011883a 	mov	r8,r4
    ae00:	1000161e 	bne	r2,zero,ae5c <strlen+0x64>
    ae04:	20c00017 	ldw	r3,0(r4)
    ae08:	017fbff4 	movhi	r5,65279
    ae0c:	297fbfc4 	addi	r5,r5,-257
    ae10:	01e02074 	movhi	r7,32897
    ae14:	39e02004 	addi	r7,r7,-32640
    ae18:	1945883a 	add	r2,r3,r5
    ae1c:	11c4703a 	and	r2,r2,r7
    ae20:	00c6303a 	nor	r3,zero,r3
    ae24:	1886703a 	and	r3,r3,r2
    ae28:	18000c1e 	bne	r3,zero,ae5c <strlen+0x64>
    ae2c:	280d883a 	mov	r6,r5
    ae30:	380b883a 	mov	r5,r7
    ae34:	21000104 	addi	r4,r4,4
    ae38:	20800017 	ldw	r2,0(r4)
    ae3c:	1187883a 	add	r3,r2,r6
    ae40:	1946703a 	and	r3,r3,r5
    ae44:	0084303a 	nor	r2,zero,r2
    ae48:	10c4703a 	and	r2,r2,r3
    ae4c:	103ff926 	beq	r2,zero,ae34 <strlen+0x3c>
    ae50:	20800007 	ldb	r2,0(r4)
    ae54:	10000326 	beq	r2,zero,ae64 <strlen+0x6c>
    ae58:	21000044 	addi	r4,r4,1
    ae5c:	20800007 	ldb	r2,0(r4)
    ae60:	103ffd1e 	bne	r2,zero,ae58 <strlen+0x60>
    ae64:	2205c83a 	sub	r2,r4,r8
    ae68:	f800283a 	ret

0000ae6c <__register_exitproc>:
    ae6c:	defffa04 	addi	sp,sp,-24
    ae70:	00800074 	movhi	r2,1
    ae74:	10b23c04 	addi	r2,r2,-14096
    ae78:	dc000015 	stw	r16,0(sp)
    ae7c:	14000017 	ldw	r16,0(r2)
    ae80:	dd000415 	stw	r20,16(sp)
    ae84:	2829883a 	mov	r20,r5
    ae88:	81405217 	ldw	r5,328(r16)
    ae8c:	dcc00315 	stw	r19,12(sp)
    ae90:	dc800215 	stw	r18,8(sp)
    ae94:	dc400115 	stw	r17,4(sp)
    ae98:	dfc00515 	stw	ra,20(sp)
    ae9c:	2023883a 	mov	r17,r4
    aea0:	3027883a 	mov	r19,r6
    aea4:	3825883a 	mov	r18,r7
    aea8:	28002526 	beq	r5,zero,af40 <__register_exitproc+0xd4>
    aeac:	29000117 	ldw	r4,4(r5)
    aeb0:	008007c4 	movi	r2,31
    aeb4:	11002716 	blt	r2,r4,af54 <__register_exitproc+0xe8>
    aeb8:	8800101e 	bne	r17,zero,aefc <__register_exitproc+0x90>
    aebc:	2105883a 	add	r2,r4,r4
    aec0:	1085883a 	add	r2,r2,r2
    aec4:	20c00044 	addi	r3,r4,1
    aec8:	1145883a 	add	r2,r2,r5
    aecc:	0009883a 	mov	r4,zero
    aed0:	15000215 	stw	r20,8(r2)
    aed4:	28c00115 	stw	r3,4(r5)
    aed8:	2005883a 	mov	r2,r4
    aedc:	dfc00517 	ldw	ra,20(sp)
    aee0:	dd000417 	ldw	r20,16(sp)
    aee4:	dcc00317 	ldw	r19,12(sp)
    aee8:	dc800217 	ldw	r18,8(sp)
    aeec:	dc400117 	ldw	r17,4(sp)
    aef0:	dc000017 	ldw	r16,0(sp)
    aef4:	dec00604 	addi	sp,sp,24
    aef8:	f800283a 	ret
    aefc:	29802204 	addi	r6,r5,136
    af00:	00800044 	movi	r2,1
    af04:	110e983a 	sll	r7,r2,r4
    af08:	30c04017 	ldw	r3,256(r6)
    af0c:	2105883a 	add	r2,r4,r4
    af10:	1085883a 	add	r2,r2,r2
    af14:	1185883a 	add	r2,r2,r6
    af18:	19c6b03a 	or	r3,r3,r7
    af1c:	14802015 	stw	r18,128(r2)
    af20:	14c00015 	stw	r19,0(r2)
    af24:	00800084 	movi	r2,2
    af28:	30c04015 	stw	r3,256(r6)
    af2c:	88bfe31e 	bne	r17,r2,aebc <__register_exitproc+0x50>
    af30:	30804117 	ldw	r2,260(r6)
    af34:	11c4b03a 	or	r2,r2,r7
    af38:	30804115 	stw	r2,260(r6)
    af3c:	003fdf06 	br	aebc <__register_exitproc+0x50>
    af40:	00800074 	movhi	r2,1
    af44:	10b84204 	addi	r2,r2,-7928
    af48:	100b883a 	mov	r5,r2
    af4c:	80805215 	stw	r2,328(r16)
    af50:	003fd606 	br	aeac <__register_exitproc+0x40>
    af54:	00800034 	movhi	r2,0
    af58:	10800004 	addi	r2,r2,0
    af5c:	1000021e 	bne	r2,zero,af68 <__register_exitproc+0xfc>
    af60:	013fffc4 	movi	r4,-1
    af64:	003fdc06 	br	aed8 <__register_exitproc+0x6c>
    af68:	01006404 	movi	r4,400
    af6c:	103ee83a 	callr	r2
    af70:	1007883a 	mov	r3,r2
    af74:	103ffa26 	beq	r2,zero,af60 <__register_exitproc+0xf4>
    af78:	80805217 	ldw	r2,328(r16)
    af7c:	180b883a 	mov	r5,r3
    af80:	18000115 	stw	zero,4(r3)
    af84:	18800015 	stw	r2,0(r3)
    af88:	80c05215 	stw	r3,328(r16)
    af8c:	18006215 	stw	zero,392(r3)
    af90:	18006315 	stw	zero,396(r3)
    af94:	0009883a 	mov	r4,zero
    af98:	883fc826 	beq	r17,zero,aebc <__register_exitproc+0x50>
    af9c:	003fd706 	br	aefc <__register_exitproc+0x90>

0000afa0 <register_fini>:
    afa0:	f800283a 	ret

0000afa4 <__call_exitprocs>:
    afa4:	00800074 	movhi	r2,1
    afa8:	10b23c04 	addi	r2,r2,-14096
    afac:	10800017 	ldw	r2,0(r2)
    afb0:	defff304 	addi	sp,sp,-52
    afb4:	df000b15 	stw	fp,44(sp)
    afb8:	d8800115 	stw	r2,4(sp)
    afbc:	00800034 	movhi	r2,0
    afc0:	10800004 	addi	r2,r2,0
    afc4:	1005003a 	cmpeq	r2,r2,zero
    afc8:	d8800215 	stw	r2,8(sp)
    afcc:	d8800117 	ldw	r2,4(sp)
    afd0:	dd400815 	stw	r21,32(sp)
    afd4:	dd000715 	stw	r20,28(sp)
    afd8:	10805204 	addi	r2,r2,328
    afdc:	dfc00c15 	stw	ra,48(sp)
    afe0:	ddc00a15 	stw	r23,40(sp)
    afe4:	dd800915 	stw	r22,36(sp)
    afe8:	dcc00615 	stw	r19,24(sp)
    afec:	dc800515 	stw	r18,20(sp)
    aff0:	dc400415 	stw	r17,16(sp)
    aff4:	dc000315 	stw	r16,12(sp)
    aff8:	282b883a 	mov	r21,r5
    affc:	2039883a 	mov	fp,r4
    b000:	d8800015 	stw	r2,0(sp)
    b004:	2829003a 	cmpeq	r20,r5,zero
    b008:	d8800117 	ldw	r2,4(sp)
    b00c:	14405217 	ldw	r17,328(r2)
    b010:	88001026 	beq	r17,zero,b054 <__call_exitprocs+0xb0>
    b014:	ddc00017 	ldw	r23,0(sp)
    b018:	88800117 	ldw	r2,4(r17)
    b01c:	8c802204 	addi	r18,r17,136
    b020:	143fffc4 	addi	r16,r2,-1
    b024:	80000916 	blt	r16,zero,b04c <__call_exitprocs+0xa8>
    b028:	05bfffc4 	movi	r22,-1
    b02c:	a000151e 	bne	r20,zero,b084 <__call_exitprocs+0xe0>
    b030:	8409883a 	add	r4,r16,r16
    b034:	2105883a 	add	r2,r4,r4
    b038:	1485883a 	add	r2,r2,r18
    b03c:	10c02017 	ldw	r3,128(r2)
    b040:	a8c01126 	beq	r21,r3,b088 <__call_exitprocs+0xe4>
    b044:	843fffc4 	addi	r16,r16,-1
    b048:	85bff81e 	bne	r16,r22,b02c <__call_exitprocs+0x88>
    b04c:	d8800217 	ldw	r2,8(sp)
    b050:	10003126 	beq	r2,zero,b118 <__call_exitprocs+0x174>
    b054:	dfc00c17 	ldw	ra,48(sp)
    b058:	df000b17 	ldw	fp,44(sp)
    b05c:	ddc00a17 	ldw	r23,40(sp)
    b060:	dd800917 	ldw	r22,36(sp)
    b064:	dd400817 	ldw	r21,32(sp)
    b068:	dd000717 	ldw	r20,28(sp)
    b06c:	dcc00617 	ldw	r19,24(sp)
    b070:	dc800517 	ldw	r18,20(sp)
    b074:	dc400417 	ldw	r17,16(sp)
    b078:	dc000317 	ldw	r16,12(sp)
    b07c:	dec00d04 	addi	sp,sp,52
    b080:	f800283a 	ret
    b084:	8409883a 	add	r4,r16,r16
    b088:	88c00117 	ldw	r3,4(r17)
    b08c:	2105883a 	add	r2,r4,r4
    b090:	1445883a 	add	r2,r2,r17
    b094:	18ffffc4 	addi	r3,r3,-1
    b098:	11800217 	ldw	r6,8(r2)
    b09c:	1c001526 	beq	r3,r16,b0f4 <__call_exitprocs+0x150>
    b0a0:	10000215 	stw	zero,8(r2)
    b0a4:	303fe726 	beq	r6,zero,b044 <__call_exitprocs+0xa0>
    b0a8:	00c00044 	movi	r3,1
    b0ac:	1c06983a 	sll	r3,r3,r16
    b0b0:	90804017 	ldw	r2,256(r18)
    b0b4:	8cc00117 	ldw	r19,4(r17)
    b0b8:	1884703a 	and	r2,r3,r2
    b0bc:	10001426 	beq	r2,zero,b110 <__call_exitprocs+0x16c>
    b0c0:	90804117 	ldw	r2,260(r18)
    b0c4:	1884703a 	and	r2,r3,r2
    b0c8:	10000c1e 	bne	r2,zero,b0fc <__call_exitprocs+0x158>
    b0cc:	2105883a 	add	r2,r4,r4
    b0d0:	1485883a 	add	r2,r2,r18
    b0d4:	11400017 	ldw	r5,0(r2)
    b0d8:	e009883a 	mov	r4,fp
    b0dc:	303ee83a 	callr	r6
    b0e0:	88800117 	ldw	r2,4(r17)
    b0e4:	98bfc81e 	bne	r19,r2,b008 <__call_exitprocs+0x64>
    b0e8:	b8800017 	ldw	r2,0(r23)
    b0ec:	147fd526 	beq	r2,r17,b044 <__call_exitprocs+0xa0>
    b0f0:	003fc506 	br	b008 <__call_exitprocs+0x64>
    b0f4:	8c000115 	stw	r16,4(r17)
    b0f8:	003fea06 	br	b0a4 <__call_exitprocs+0x100>
    b0fc:	2105883a 	add	r2,r4,r4
    b100:	1485883a 	add	r2,r2,r18
    b104:	11000017 	ldw	r4,0(r2)
    b108:	303ee83a 	callr	r6
    b10c:	003ff406 	br	b0e0 <__call_exitprocs+0x13c>
    b110:	303ee83a 	callr	r6
    b114:	003ff206 	br	b0e0 <__call_exitprocs+0x13c>
    b118:	88800117 	ldw	r2,4(r17)
    b11c:	1000081e 	bne	r2,zero,b140 <__call_exitprocs+0x19c>
    b120:	89000017 	ldw	r4,0(r17)
    b124:	20000726 	beq	r4,zero,b144 <__call_exitprocs+0x1a0>
    b128:	b9000015 	stw	r4,0(r23)
    b12c:	8809883a 	mov	r4,r17
    b130:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    b134:	bc400017 	ldw	r17,0(r23)
    b138:	883fb71e 	bne	r17,zero,b018 <__call_exitprocs+0x74>
    b13c:	003fc506 	br	b054 <__call_exitprocs+0xb0>
    b140:	89000017 	ldw	r4,0(r17)
    b144:	882f883a 	mov	r23,r17
    b148:	2023883a 	mov	r17,r4
    b14c:	883fb21e 	bne	r17,zero,b018 <__call_exitprocs+0x74>
    b150:	003fc006 	br	b054 <__call_exitprocs+0xb0>

0000b154 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    b154:	defffd04 	addi	sp,sp,-12
    b158:	df000215 	stw	fp,8(sp)
    b15c:	df000204 	addi	fp,sp,8
    b160:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    b164:	e0bfff17 	ldw	r2,-4(fp)
    b168:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b16c:	e0bffe17 	ldw	r2,-8(fp)
    b170:	1005003a 	cmpeq	r2,r2,zero
    b174:	1000021e 	bne	r2,zero,b180 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    b178:	002af070 	cmpltui	zero,zero,43969
    b17c:	00000106 	br	b184 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    b180:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    b184:	e037883a 	mov	sp,fp
    b188:	df000017 	ldw	fp,0(sp)
    b18c:	dec00104 	addi	sp,sp,4
    b190:	f800283a 	ret

0000b194 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b194:	defffd04 	addi	sp,sp,-12
    b198:	dfc00215 	stw	ra,8(sp)
    b19c:	df000115 	stw	fp,4(sp)
    b1a0:	df000104 	addi	fp,sp,4
    b1a4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    b1a8:	e13fff17 	ldw	r4,-4(fp)
    b1ac:	000b1540 	call	b154 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b1b0:	003fff06 	br	b1b0 <_exit+0x1c>
    b1b4:	0000afa0 	cmpeqi	zero,zero,702
